// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package talkservice

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"reflect"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type Method_ int64

const (
	Method__TIMELINE Method_ = 1
	Method__NEARBY   Method_ = 2
	Method__SQUARE   Method_ = 3
)

func (p Method_) String() string {
	switch p {
	case Method__TIMELINE:
		return "TIMELINE"
	case Method__NEARBY:
		return "NEARBY"
	case Method__SQUARE:
		return "SQUARE"
	}
	return "<UNSET>"
}

func Method_FromString(s string) (Method_, error) {
	switch s {
	case "TIMELINE":
		return Method__TIMELINE, nil
	case "NEARBY":
		return Method__NEARBY, nil
	case "SQUARE":
		return Method__SQUARE, nil
	}
	return Method_(0), fmt.Errorf("not a valid Method_ string")
}

func Method_Ptr(v Method_) *Method_ { return &v }

func (p Method_) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *Method_) UnmarshalText(text []byte) error {
	q, err := Method_FromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *Method_) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = Method_(v)
	return nil
}

func (p *Method_) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ErrorCode int64

const (
	ErrorCode_ILLEGAL_ARGUMENT                                      ErrorCode = 0
	ErrorCode_AUTHENTICATION_FAILED                                 ErrorCode = 1
	ErrorCode_DB_FAILED                                             ErrorCode = 2
	ErrorCode_INVALID_STATE                                         ErrorCode = 3
	ErrorCode_EXCESSIVE_ACCESS                                      ErrorCode = 4
	ErrorCode_NOT_FOUND                                             ErrorCode = 5
	ErrorCode_INVALID_MID                                           ErrorCode = 9
	ErrorCode_NOT_A_MEMBER                                          ErrorCode = 10
	ErrorCode_INVALID_LENGTH                                        ErrorCode = 6
	ErrorCode_NOT_AVAILABLE_USER                                    ErrorCode = 7
	ErrorCode_NOT_AUTHORIZED_DEVICE                                 ErrorCode = 8
	ErrorCode_NOT_AUTHORIZED_SESSION                                ErrorCode = 14
	ErrorCode_INCOMPATIBLE_APP_VERSION                              ErrorCode = 11
	ErrorCode_NOT_READY                                             ErrorCode = 12
	ErrorCode_NOT_AVAILABLE_SESSION                                 ErrorCode = 13
	ErrorCode_SYSTEM_ERROR                                          ErrorCode = 15
	ErrorCode_NO_AVAILABLE_VERIFICATION_METHOD                      ErrorCode = 16
	ErrorCode_NOT_AUTHENTICATED                                     ErrorCode = 17
	ErrorCode_INVALID_IDENTITY_CREDENTIAL                           ErrorCode = 18
	ErrorCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER                     ErrorCode = 19
	ErrorCode_INTERNAL_ERROR                                        ErrorCode = 20
	ErrorCode_NO_SUCH_IDENTITY_IDENFIER                             ErrorCode = 21
	ErrorCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY            ErrorCode = 22
	ErrorCode_ILLEGAL_IDENTITY_CREDENTIAL                           ErrorCode = 23
	ErrorCode_UNKNOWN_CHANNEL                                       ErrorCode = 24
	ErrorCode_NO_SUCH_MESSAGE_BOX                                   ErrorCode = 25
	ErrorCode_NOT_AVAILABLE_MESSAGE_BOX                             ErrorCode = 26
	ErrorCode_CHANNEL_DOES_NOT_MATCH                                ErrorCode = 27
	ErrorCode_NOT_YOUR_MESSAGE                                      ErrorCode = 28
	ErrorCode_MESSAGE_DEFINED_ERROR                                 ErrorCode = 29
	ErrorCode_USER_CANNOT_ACCEPT_PRESENTS                           ErrorCode = 30
	ErrorCode_USER_NOT_STICKER_OWNER                                ErrorCode = 32
	ErrorCode_MAINTENANCE_ERROR                                     ErrorCode = 33
	ErrorCode_ACCOUNT_NOT_MATCHED                                   ErrorCode = 34
	ErrorCode_ABUSE_BLOCK                                           ErrorCode = 35
	ErrorCode_NOT_FRIEND                                            ErrorCode = 36
	ErrorCode_NOT_ALLOWED_CALL                                      ErrorCode = 37
	ErrorCode_BLOCK_FRIEND                                          ErrorCode = 38
	ErrorCode_INCOMPATIBLE_VOIP_VERSION                             ErrorCode = 39
	ErrorCode_INVALID_SNS_ACCESS_TOKEN                              ErrorCode = 40
	ErrorCode_EXTERNAL_SERVICE_NOT_AVAILABLE                        ErrorCode = 41
	ErrorCode_NOT_ALLOWED_ADD_CONTACT                               ErrorCode = 42
	ErrorCode_NOT_CERTIFICATED                                      ErrorCode = 43
	ErrorCode_NOT_ALLOWED_SECONDARY_DEVICE                          ErrorCode = 44
	ErrorCode_INVALID_PIN_CODE                                      ErrorCode = 45
	ErrorCode_NOT_FOUND_IDENTITY_CREDENTIAL                         ErrorCode = 46
	ErrorCode_EXCEED_FILE_MAX_SIZE                                  ErrorCode = 47
	ErrorCode_EXCEED_DAILY_QUOTA                                    ErrorCode = 48
	ErrorCode_NOT_SUPPORT_SEND_FILE                                 ErrorCode = 49
	ErrorCode_MUST_UPGRADE                                          ErrorCode = 50
	ErrorCode_NOT_AVAILABLE_PIN_CODE_SESSION                        ErrorCode = 51
	ErrorCode_EXPIRED_REVISION                                      ErrorCode = 52
	ErrorCode_NOT_YET_PHONE_NUMBER                                  ErrorCode = 54
	ErrorCode_BAD_CALL_NUMBER                                       ErrorCode = 55
	ErrorCode_UNAVAILABLE_CALL_NUMBER                               ErrorCode = 56
	ErrorCode_NOT_SUPPORT_CALL_SERVICE                              ErrorCode = 57
	ErrorCode_CONGESTION_CONTROL                                    ErrorCode = 58
	ErrorCode_NO_BALANCE                                            ErrorCode = 59
	ErrorCode_NOT_PERMITTED_CALLER_ID                               ErrorCode = 60
	ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED                           ErrorCode = 61
	ErrorCode_CALLER_ID_VERIFICATION_REQUIRED                       ErrorCode = 62
	ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED ErrorCode = 63
	ErrorCode_MESSAGE_NOT_FOUND                                     ErrorCode = 64
	ErrorCode_INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT              ErrorCode = 65
	ErrorCode_ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED                 ErrorCode = 66
	ErrorCode_ACCOUNT_MIGRATION_PINCODE_BLOCKED                     ErrorCode = 67
	ErrorCode_INVALID_PASSWORD_FORMAT                               ErrorCode = 69
	ErrorCode_FEATURE_RESTRICTED                                    ErrorCode = 70
	ErrorCode_MESSAGE_NOT_DESTRUCTIBLE                              ErrorCode = 71
	ErrorCode_PAID_CALL_REDEEM_FAILED                               ErrorCode = 72
	ErrorCode_PREVENTED_JOIN_BY_TICKET                              ErrorCode = 73
	ErrorCode_SEND_MESSAGE_NOT_PERMITTED__fromLINE_AT               ErrorCode = 75
	ErrorCode_SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY           ErrorCode = 76
	ErrorCode_SECURITY_CENTER_NOT_VERIFIED                          ErrorCode = 77
	ErrorCode_SECURITY_CENTER_BLOCKED_BY_SETTING                    ErrorCode = 78
	ErrorCode_SECURITY_CENTER_BLOCKED                               ErrorCode = 79
	ErrorCode_TALK_PROXY_EXCEPTION                                  ErrorCode = 80
	ErrorCode_E2EE_INVALID_PROTOCOL                                 ErrorCode = 81
	ErrorCode_E2EE_RETRY_ENCRYPT                                    ErrorCode = 82
	ErrorCode_E2EE_UPDATE_SENDER_KEY                                ErrorCode = 83
	ErrorCode_E2EE_UPDATE_RECEIVER_KEY                              ErrorCode = 84
	ErrorCode_E2EE_INVALID_ARGUMENT                                 ErrorCode = 85
	ErrorCode_E2EE_INVALID_VERSION                                  ErrorCode = 86
	ErrorCode_E2EE_SENDER_DISABLED                                  ErrorCode = 87
	ErrorCode_E2EE_RECEIVER_DISABLED                                ErrorCode = 88
	ErrorCode_E2EE_SENDER_NOT_ALLOWED                               ErrorCode = 89
	ErrorCode_E2EE_RECEIVER_NOT_ALLOWED                             ErrorCode = 90
	ErrorCode_E2EE_RESEND_FAIL                                      ErrorCode = 91
	ErrorCode_E2EE_RESEND_OK                                        ErrorCode = 92
	ErrorCode_HITOKOTO_BACKUP_NO_AVAILABLE_DATA                     ErrorCode = 93
	ErrorCode_E2EE_UPDATE_PRIMARY_DEVICE                            ErrorCode = 94
	ErrorCode_SUCCESS                                               ErrorCode = 95
	ErrorCode_CANCEL                                                ErrorCode = 96
	ErrorCode_E2EE_PRIMARY_NOT_SUPPORT                              ErrorCode = 97
	ErrorCode_E2EE_RETRY_PLAIN                                      ErrorCode = 98
	ErrorCode_E2EE_RECREATE_GROUP_KEY                               ErrorCode = 99
	ErrorCode_E2EE_GROUP_TOO_MANY_MEMBERS                           ErrorCode = 100
	ErrorCode_SERVER_BUSY                                           ErrorCode = 101
	ErrorCode_NOT_ALLOWED_ADD_FOLLOW                                ErrorCode = 102
	ErrorCode_INCOMING_FRIEND_REQUEST_LIMIT                         ErrorCode = 103
	ErrorCode_OUTGOING_FRIEND_REQUEST_LIMIT                         ErrorCode = 104
	ErrorCode_OUTGOING_FRIEND_REQUEST_QUOTA                         ErrorCode = 105
	ErrorCode_DUPLICATED                                            ErrorCode = 106
	ErrorCode_BANNED                                                ErrorCode = 107
	ErrorCode_NOT_AN_INVITEE                                        ErrorCode = 108
	ErrorCode_NOT_AN_OUTSIDER                                       ErrorCode = 109
	ErrorCode_EMPTY_GROUP                                           ErrorCode = 111
	ErrorCode_EXCEED_FOLLOW_LIMIT                                   ErrorCode = 112
	ErrorCode_UNSUPPORTED_ACCOUNT_TYPE                              ErrorCode = 113
)

func (p ErrorCode) String() string {
	switch p {
	case ErrorCode_ILLEGAL_ARGUMENT:
		return "ILLEGAL_ARGUMENT"
	case ErrorCode_AUTHENTICATION_FAILED:
		return "AUTHENTICATION_FAILED"
	case ErrorCode_DB_FAILED:
		return "DB_FAILED"
	case ErrorCode_INVALID_STATE:
		return "INVALID_STATE"
	case ErrorCode_EXCESSIVE_ACCESS:
		return "EXCESSIVE_ACCESS"
	case ErrorCode_NOT_FOUND:
		return "NOT_FOUND"
	case ErrorCode_INVALID_MID:
		return "INVALID_MID"
	case ErrorCode_NOT_A_MEMBER:
		return "NOT_A_MEMBER"
	case ErrorCode_INVALID_LENGTH:
		return "INVALID_LENGTH"
	case ErrorCode_NOT_AVAILABLE_USER:
		return "NOT_AVAILABLE_USER"
	case ErrorCode_NOT_AUTHORIZED_DEVICE:
		return "NOT_AUTHORIZED_DEVICE"
	case ErrorCode_NOT_AUTHORIZED_SESSION:
		return "NOT_AUTHORIZED_SESSION"
	case ErrorCode_INCOMPATIBLE_APP_VERSION:
		return "INCOMPATIBLE_APP_VERSION"
	case ErrorCode_NOT_READY:
		return "NOT_READY"
	case ErrorCode_NOT_AVAILABLE_SESSION:
		return "NOT_AVAILABLE_SESSION"
	case ErrorCode_SYSTEM_ERROR:
		return "SYSTEM_ERROR"
	case ErrorCode_NO_AVAILABLE_VERIFICATION_METHOD:
		return "NO_AVAILABLE_VERIFICATION_METHOD"
	case ErrorCode_NOT_AUTHENTICATED:
		return "NOT_AUTHENTICATED"
	case ErrorCode_INVALID_IDENTITY_CREDENTIAL:
		return "INVALID_IDENTITY_CREDENTIAL"
	case ErrorCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER:
		return "NOT_AVAILABLE_IDENTITY_IDENTIFIER"
	case ErrorCode_INTERNAL_ERROR:
		return "INTERNAL_ERROR"
	case ErrorCode_NO_SUCH_IDENTITY_IDENFIER:
		return "NO_SUCH_IDENTITY_IDENFIER"
	case ErrorCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY:
		return "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY"
	case ErrorCode_ILLEGAL_IDENTITY_CREDENTIAL:
		return "ILLEGAL_IDENTITY_CREDENTIAL"
	case ErrorCode_UNKNOWN_CHANNEL:
		return "UNKNOWN_CHANNEL"
	case ErrorCode_NO_SUCH_MESSAGE_BOX:
		return "NO_SUCH_MESSAGE_BOX"
	case ErrorCode_NOT_AVAILABLE_MESSAGE_BOX:
		return "NOT_AVAILABLE_MESSAGE_BOX"
	case ErrorCode_CHANNEL_DOES_NOT_MATCH:
		return "CHANNEL_DOES_NOT_MATCH"
	case ErrorCode_NOT_YOUR_MESSAGE:
		return "NOT_YOUR_MESSAGE"
	case ErrorCode_MESSAGE_DEFINED_ERROR:
		return "MESSAGE_DEFINED_ERROR"
	case ErrorCode_USER_CANNOT_ACCEPT_PRESENTS:
		return "USER_CANNOT_ACCEPT_PRESENTS"
	case ErrorCode_USER_NOT_STICKER_OWNER:
		return "USER_NOT_STICKER_OWNER"
	case ErrorCode_MAINTENANCE_ERROR:
		return "MAINTENANCE_ERROR"
	case ErrorCode_ACCOUNT_NOT_MATCHED:
		return "ACCOUNT_NOT_MATCHED"
	case ErrorCode_ABUSE_BLOCK:
		return "ABUSE_BLOCK"
	case ErrorCode_NOT_FRIEND:
		return "NOT_FRIEND"
	case ErrorCode_NOT_ALLOWED_CALL:
		return "NOT_ALLOWED_CALL"
	case ErrorCode_BLOCK_FRIEND:
		return "BLOCK_FRIEND"
	case ErrorCode_INCOMPATIBLE_VOIP_VERSION:
		return "INCOMPATIBLE_VOIP_VERSION"
	case ErrorCode_INVALID_SNS_ACCESS_TOKEN:
		return "INVALID_SNS_ACCESS_TOKEN"
	case ErrorCode_EXTERNAL_SERVICE_NOT_AVAILABLE:
		return "EXTERNAL_SERVICE_NOT_AVAILABLE"
	case ErrorCode_NOT_ALLOWED_ADD_CONTACT:
		return "NOT_ALLOWED_ADD_CONTACT"
	case ErrorCode_NOT_CERTIFICATED:
		return "NOT_CERTIFICATED"
	case ErrorCode_NOT_ALLOWED_SECONDARY_DEVICE:
		return "NOT_ALLOWED_SECONDARY_DEVICE"
	case ErrorCode_INVALID_PIN_CODE:
		return "INVALID_PIN_CODE"
	case ErrorCode_NOT_FOUND_IDENTITY_CREDENTIAL:
		return "NOT_FOUND_IDENTITY_CREDENTIAL"
	case ErrorCode_EXCEED_FILE_MAX_SIZE:
		return "EXCEED_FILE_MAX_SIZE"
	case ErrorCode_EXCEED_DAILY_QUOTA:
		return "EXCEED_DAILY_QUOTA"
	case ErrorCode_NOT_SUPPORT_SEND_FILE:
		return "NOT_SUPPORT_SEND_FILE"
	case ErrorCode_MUST_UPGRADE:
		return "MUST_UPGRADE"
	case ErrorCode_NOT_AVAILABLE_PIN_CODE_SESSION:
		return "NOT_AVAILABLE_PIN_CODE_SESSION"
	case ErrorCode_EXPIRED_REVISION:
		return "EXPIRED_REVISION"
	case ErrorCode_NOT_YET_PHONE_NUMBER:
		return "NOT_YET_PHONE_NUMBER"
	case ErrorCode_BAD_CALL_NUMBER:
		return "BAD_CALL_NUMBER"
	case ErrorCode_UNAVAILABLE_CALL_NUMBER:
		return "UNAVAILABLE_CALL_NUMBER"
	case ErrorCode_NOT_SUPPORT_CALL_SERVICE:
		return "NOT_SUPPORT_CALL_SERVICE"
	case ErrorCode_CONGESTION_CONTROL:
		return "CONGESTION_CONTROL"
	case ErrorCode_NO_BALANCE:
		return "NO_BALANCE"
	case ErrorCode_NOT_PERMITTED_CALLER_ID:
		return "NOT_PERMITTED_CALLER_ID"
	case ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED:
		return "NO_CALLER_ID_LIMIT_EXCEEDED"
	case ErrorCode_CALLER_ID_VERIFICATION_REQUIRED:
		return "CALLER_ID_VERIFICATION_REQUIRED"
	case ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED:
		return "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED"
	case ErrorCode_MESSAGE_NOT_FOUND:
		return "MESSAGE_NOT_FOUND"
	case ErrorCode_INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT:
		return "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT"
	case ErrorCode_ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED:
		return "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED"
	case ErrorCode_ACCOUNT_MIGRATION_PINCODE_BLOCKED:
		return "ACCOUNT_MIGRATION_PINCODE_BLOCKED"
	case ErrorCode_INVALID_PASSWORD_FORMAT:
		return "INVALID_PASSWORD_FORMAT"
	case ErrorCode_FEATURE_RESTRICTED:
		return "FEATURE_RESTRICTED"
	case ErrorCode_MESSAGE_NOT_DESTRUCTIBLE:
		return "MESSAGE_NOT_DESTRUCTIBLE"
	case ErrorCode_PAID_CALL_REDEEM_FAILED:
		return "PAID_CALL_REDEEM_FAILED"
	case ErrorCode_PREVENTED_JOIN_BY_TICKET:
		return "PREVENTED_JOIN_BY_TICKET"
	case ErrorCode_SEND_MESSAGE_NOT_PERMITTED__fromLINE_AT:
		return "SEND_MESSAGE_NOT_PERMITTED__fromLINE_AT"
	case ErrorCode_SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY:
		return "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY"
	case ErrorCode_SECURITY_CENTER_NOT_VERIFIED:
		return "SECURITY_CENTER_NOT_VERIFIED"
	case ErrorCode_SECURITY_CENTER_BLOCKED_BY_SETTING:
		return "SECURITY_CENTER_BLOCKED_BY_SETTING"
	case ErrorCode_SECURITY_CENTER_BLOCKED:
		return "SECURITY_CENTER_BLOCKED"
	case ErrorCode_TALK_PROXY_EXCEPTION:
		return "TALK_PROXY_EXCEPTION"
	case ErrorCode_E2EE_INVALID_PROTOCOL:
		return "E2EE_INVALID_PROTOCOL"
	case ErrorCode_E2EE_RETRY_ENCRYPT:
		return "E2EE_RETRY_ENCRYPT"
	case ErrorCode_E2EE_UPDATE_SENDER_KEY:
		return "E2EE_UPDATE_SENDER_KEY"
	case ErrorCode_E2EE_UPDATE_RECEIVER_KEY:
		return "E2EE_UPDATE_RECEIVER_KEY"
	case ErrorCode_E2EE_INVALID_ARGUMENT:
		return "E2EE_INVALID_ARGUMENT"
	case ErrorCode_E2EE_INVALID_VERSION:
		return "E2EE_INVALID_VERSION"
	case ErrorCode_E2EE_SENDER_DISABLED:
		return "E2EE_SENDER_DISABLED"
	case ErrorCode_E2EE_RECEIVER_DISABLED:
		return "E2EE_RECEIVER_DISABLED"
	case ErrorCode_E2EE_SENDER_NOT_ALLOWED:
		return "E2EE_SENDER_NOT_ALLOWED"
	case ErrorCode_E2EE_RECEIVER_NOT_ALLOWED:
		return "E2EE_RECEIVER_NOT_ALLOWED"
	case ErrorCode_E2EE_RESEND_FAIL:
		return "E2EE_RESEND_FAIL"
	case ErrorCode_E2EE_RESEND_OK:
		return "E2EE_RESEND_OK"
	case ErrorCode_HITOKOTO_BACKUP_NO_AVAILABLE_DATA:
		return "HITOKOTO_BACKUP_NO_AVAILABLE_DATA"
	case ErrorCode_E2EE_UPDATE_PRIMARY_DEVICE:
		return "E2EE_UPDATE_PRIMARY_DEVICE"
	case ErrorCode_SUCCESS:
		return "SUCCESS"
	case ErrorCode_CANCEL:
		return "CANCEL"
	case ErrorCode_E2EE_PRIMARY_NOT_SUPPORT:
		return "E2EE_PRIMARY_NOT_SUPPORT"
	case ErrorCode_E2EE_RETRY_PLAIN:
		return "E2EE_RETRY_PLAIN"
	case ErrorCode_E2EE_RECREATE_GROUP_KEY:
		return "E2EE_RECREATE_GROUP_KEY"
	case ErrorCode_E2EE_GROUP_TOO_MANY_MEMBERS:
		return "E2EE_GROUP_TOO_MANY_MEMBERS"
	case ErrorCode_SERVER_BUSY:
		return "SERVER_BUSY"
	case ErrorCode_NOT_ALLOWED_ADD_FOLLOW:
		return "NOT_ALLOWED_ADD_FOLLOW"
	case ErrorCode_INCOMING_FRIEND_REQUEST_LIMIT:
		return "INCOMING_FRIEND_REQUEST_LIMIT"
	case ErrorCode_OUTGOING_FRIEND_REQUEST_LIMIT:
		return "OUTGOING_FRIEND_REQUEST_LIMIT"
	case ErrorCode_OUTGOING_FRIEND_REQUEST_QUOTA:
		return "OUTGOING_FRIEND_REQUEST_QUOTA"
	case ErrorCode_DUPLICATED:
		return "DUPLICATED"
	case ErrorCode_BANNED:
		return "BANNED"
	case ErrorCode_NOT_AN_INVITEE:
		return "NOT_AN_INVITEE"
	case ErrorCode_NOT_AN_OUTSIDER:
		return "NOT_AN_OUTSIDER"
	case ErrorCode_EMPTY_GROUP:
		return "EMPTY_GROUP"
	case ErrorCode_EXCEED_FOLLOW_LIMIT:
		return "EXCEED_FOLLOW_LIMIT"
	case ErrorCode_UNSUPPORTED_ACCOUNT_TYPE:
		return "UNSUPPORTED_ACCOUNT_TYPE"
	}
	return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
	switch s {
	case "ILLEGAL_ARGUMENT":
		return ErrorCode_ILLEGAL_ARGUMENT, nil
	case "AUTHENTICATION_FAILED":
		return ErrorCode_AUTHENTICATION_FAILED, nil
	case "DB_FAILED":
		return ErrorCode_DB_FAILED, nil
	case "INVALID_STATE":
		return ErrorCode_INVALID_STATE, nil
	case "EXCESSIVE_ACCESS":
		return ErrorCode_EXCESSIVE_ACCESS, nil
	case "NOT_FOUND":
		return ErrorCode_NOT_FOUND, nil
	case "INVALID_MID":
		return ErrorCode_INVALID_MID, nil
	case "NOT_A_MEMBER":
		return ErrorCode_NOT_A_MEMBER, nil
	case "INVALID_LENGTH":
		return ErrorCode_INVALID_LENGTH, nil
	case "NOT_AVAILABLE_USER":
		return ErrorCode_NOT_AVAILABLE_USER, nil
	case "NOT_AUTHORIZED_DEVICE":
		return ErrorCode_NOT_AUTHORIZED_DEVICE, nil
	case "NOT_AUTHORIZED_SESSION":
		return ErrorCode_NOT_AUTHORIZED_SESSION, nil
	case "INCOMPATIBLE_APP_VERSION":
		return ErrorCode_INCOMPATIBLE_APP_VERSION, nil
	case "NOT_READY":
		return ErrorCode_NOT_READY, nil
	case "NOT_AVAILABLE_SESSION":
		return ErrorCode_NOT_AVAILABLE_SESSION, nil
	case "SYSTEM_ERROR":
		return ErrorCode_SYSTEM_ERROR, nil
	case "NO_AVAILABLE_VERIFICATION_METHOD":
		return ErrorCode_NO_AVAILABLE_VERIFICATION_METHOD, nil
	case "NOT_AUTHENTICATED":
		return ErrorCode_NOT_AUTHENTICATED, nil
	case "INVALID_IDENTITY_CREDENTIAL":
		return ErrorCode_INVALID_IDENTITY_CREDENTIAL, nil
	case "NOT_AVAILABLE_IDENTITY_IDENTIFIER":
		return ErrorCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER, nil
	case "INTERNAL_ERROR":
		return ErrorCode_INTERNAL_ERROR, nil
	case "NO_SUCH_IDENTITY_IDENFIER":
		return ErrorCode_NO_SUCH_IDENTITY_IDENFIER, nil
	case "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY":
		return ErrorCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY, nil
	case "ILLEGAL_IDENTITY_CREDENTIAL":
		return ErrorCode_ILLEGAL_IDENTITY_CREDENTIAL, nil
	case "UNKNOWN_CHANNEL":
		return ErrorCode_UNKNOWN_CHANNEL, nil
	case "NO_SUCH_MESSAGE_BOX":
		return ErrorCode_NO_SUCH_MESSAGE_BOX, nil
	case "NOT_AVAILABLE_MESSAGE_BOX":
		return ErrorCode_NOT_AVAILABLE_MESSAGE_BOX, nil
	case "CHANNEL_DOES_NOT_MATCH":
		return ErrorCode_CHANNEL_DOES_NOT_MATCH, nil
	case "NOT_YOUR_MESSAGE":
		return ErrorCode_NOT_YOUR_MESSAGE, nil
	case "MESSAGE_DEFINED_ERROR":
		return ErrorCode_MESSAGE_DEFINED_ERROR, nil
	case "USER_CANNOT_ACCEPT_PRESENTS":
		return ErrorCode_USER_CANNOT_ACCEPT_PRESENTS, nil
	case "USER_NOT_STICKER_OWNER":
		return ErrorCode_USER_NOT_STICKER_OWNER, nil
	case "MAINTENANCE_ERROR":
		return ErrorCode_MAINTENANCE_ERROR, nil
	case "ACCOUNT_NOT_MATCHED":
		return ErrorCode_ACCOUNT_NOT_MATCHED, nil
	case "ABUSE_BLOCK":
		return ErrorCode_ABUSE_BLOCK, nil
	case "NOT_FRIEND":
		return ErrorCode_NOT_FRIEND, nil
	case "NOT_ALLOWED_CALL":
		return ErrorCode_NOT_ALLOWED_CALL, nil
	case "BLOCK_FRIEND":
		return ErrorCode_BLOCK_FRIEND, nil
	case "INCOMPATIBLE_VOIP_VERSION":
		return ErrorCode_INCOMPATIBLE_VOIP_VERSION, nil
	case "INVALID_SNS_ACCESS_TOKEN":
		return ErrorCode_INVALID_SNS_ACCESS_TOKEN, nil
	case "EXTERNAL_SERVICE_NOT_AVAILABLE":
		return ErrorCode_EXTERNAL_SERVICE_NOT_AVAILABLE, nil
	case "NOT_ALLOWED_ADD_CONTACT":
		return ErrorCode_NOT_ALLOWED_ADD_CONTACT, nil
	case "NOT_CERTIFICATED":
		return ErrorCode_NOT_CERTIFICATED, nil
	case "NOT_ALLOWED_SECONDARY_DEVICE":
		return ErrorCode_NOT_ALLOWED_SECONDARY_DEVICE, nil
	case "INVALID_PIN_CODE":
		return ErrorCode_INVALID_PIN_CODE, nil
	case "NOT_FOUND_IDENTITY_CREDENTIAL":
		return ErrorCode_NOT_FOUND_IDENTITY_CREDENTIAL, nil
	case "EXCEED_FILE_MAX_SIZE":
		return ErrorCode_EXCEED_FILE_MAX_SIZE, nil
	case "EXCEED_DAILY_QUOTA":
		return ErrorCode_EXCEED_DAILY_QUOTA, nil
	case "NOT_SUPPORT_SEND_FILE":
		return ErrorCode_NOT_SUPPORT_SEND_FILE, nil
	case "MUST_UPGRADE":
		return ErrorCode_MUST_UPGRADE, nil
	case "NOT_AVAILABLE_PIN_CODE_SESSION":
		return ErrorCode_NOT_AVAILABLE_PIN_CODE_SESSION, nil
	case "EXPIRED_REVISION":
		return ErrorCode_EXPIRED_REVISION, nil
	case "NOT_YET_PHONE_NUMBER":
		return ErrorCode_NOT_YET_PHONE_NUMBER, nil
	case "BAD_CALL_NUMBER":
		return ErrorCode_BAD_CALL_NUMBER, nil
	case "UNAVAILABLE_CALL_NUMBER":
		return ErrorCode_UNAVAILABLE_CALL_NUMBER, nil
	case "NOT_SUPPORT_CALL_SERVICE":
		return ErrorCode_NOT_SUPPORT_CALL_SERVICE, nil
	case "CONGESTION_CONTROL":
		return ErrorCode_CONGESTION_CONTROL, nil
	case "NO_BALANCE":
		return ErrorCode_NO_BALANCE, nil
	case "NOT_PERMITTED_CALLER_ID":
		return ErrorCode_NOT_PERMITTED_CALLER_ID, nil
	case "NO_CALLER_ID_LIMIT_EXCEEDED":
		return ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED, nil
	case "CALLER_ID_VERIFICATION_REQUIRED":
		return ErrorCode_CALLER_ID_VERIFICATION_REQUIRED, nil
	case "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED":
		return ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED, nil
	case "MESSAGE_NOT_FOUND":
		return ErrorCode_MESSAGE_NOT_FOUND, nil
	case "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT":
		return ErrorCode_INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT, nil
	case "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED":
		return ErrorCode_ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED, nil
	case "ACCOUNT_MIGRATION_PINCODE_BLOCKED":
		return ErrorCode_ACCOUNT_MIGRATION_PINCODE_BLOCKED, nil
	case "INVALID_PASSWORD_FORMAT":
		return ErrorCode_INVALID_PASSWORD_FORMAT, nil
	case "FEATURE_RESTRICTED":
		return ErrorCode_FEATURE_RESTRICTED, nil
	case "MESSAGE_NOT_DESTRUCTIBLE":
		return ErrorCode_MESSAGE_NOT_DESTRUCTIBLE, nil
	case "PAID_CALL_REDEEM_FAILED":
		return ErrorCode_PAID_CALL_REDEEM_FAILED, nil
	case "PREVENTED_JOIN_BY_TICKET":
		return ErrorCode_PREVENTED_JOIN_BY_TICKET, nil
	case "SEND_MESSAGE_NOT_PERMITTED__fromLINE_AT":
		return ErrorCode_SEND_MESSAGE_NOT_PERMITTED__fromLINE_AT, nil
	case "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY":
		return ErrorCode_SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY, nil
	case "SECURITY_CENTER_NOT_VERIFIED":
		return ErrorCode_SECURITY_CENTER_NOT_VERIFIED, nil
	case "SECURITY_CENTER_BLOCKED_BY_SETTING":
		return ErrorCode_SECURITY_CENTER_BLOCKED_BY_SETTING, nil
	case "SECURITY_CENTER_BLOCKED":
		return ErrorCode_SECURITY_CENTER_BLOCKED, nil
	case "TALK_PROXY_EXCEPTION":
		return ErrorCode_TALK_PROXY_EXCEPTION, nil
	case "E2EE_INVALID_PROTOCOL":
		return ErrorCode_E2EE_INVALID_PROTOCOL, nil
	case "E2EE_RETRY_ENCRYPT":
		return ErrorCode_E2EE_RETRY_ENCRYPT, nil
	case "E2EE_UPDATE_SENDER_KEY":
		return ErrorCode_E2EE_UPDATE_SENDER_KEY, nil
	case "E2EE_UPDATE_RECEIVER_KEY":
		return ErrorCode_E2EE_UPDATE_RECEIVER_KEY, nil
	case "E2EE_INVALID_ARGUMENT":
		return ErrorCode_E2EE_INVALID_ARGUMENT, nil
	case "E2EE_INVALID_VERSION":
		return ErrorCode_E2EE_INVALID_VERSION, nil
	case "E2EE_SENDER_DISABLED":
		return ErrorCode_E2EE_SENDER_DISABLED, nil
	case "E2EE_RECEIVER_DISABLED":
		return ErrorCode_E2EE_RECEIVER_DISABLED, nil
	case "E2EE_SENDER_NOT_ALLOWED":
		return ErrorCode_E2EE_SENDER_NOT_ALLOWED, nil
	case "E2EE_RECEIVER_NOT_ALLOWED":
		return ErrorCode_E2EE_RECEIVER_NOT_ALLOWED, nil
	case "E2EE_RESEND_FAIL":
		return ErrorCode_E2EE_RESEND_FAIL, nil
	case "E2EE_RESEND_OK":
		return ErrorCode_E2EE_RESEND_OK, nil
	case "HITOKOTO_BACKUP_NO_AVAILABLE_DATA":
		return ErrorCode_HITOKOTO_BACKUP_NO_AVAILABLE_DATA, nil
	case "E2EE_UPDATE_PRIMARY_DEVICE":
		return ErrorCode_E2EE_UPDATE_PRIMARY_DEVICE, nil
	case "SUCCESS":
		return ErrorCode_SUCCESS, nil
	case "CANCEL":
		return ErrorCode_CANCEL, nil
	case "E2EE_PRIMARY_NOT_SUPPORT":
		return ErrorCode_E2EE_PRIMARY_NOT_SUPPORT, nil
	case "E2EE_RETRY_PLAIN":
		return ErrorCode_E2EE_RETRY_PLAIN, nil
	case "E2EE_RECREATE_GROUP_KEY":
		return ErrorCode_E2EE_RECREATE_GROUP_KEY, nil
	case "E2EE_GROUP_TOO_MANY_MEMBERS":
		return ErrorCode_E2EE_GROUP_TOO_MANY_MEMBERS, nil
	case "SERVER_BUSY":
		return ErrorCode_SERVER_BUSY, nil
	case "NOT_ALLOWED_ADD_FOLLOW":
		return ErrorCode_NOT_ALLOWED_ADD_FOLLOW, nil
	case "INCOMING_FRIEND_REQUEST_LIMIT":
		return ErrorCode_INCOMING_FRIEND_REQUEST_LIMIT, nil
	case "OUTGOING_FRIEND_REQUEST_LIMIT":
		return ErrorCode_OUTGOING_FRIEND_REQUEST_LIMIT, nil
	case "OUTGOING_FRIEND_REQUEST_QUOTA":
		return ErrorCode_OUTGOING_FRIEND_REQUEST_QUOTA, nil
	case "DUPLICATED":
		return ErrorCode_DUPLICATED, nil
	case "BANNED":
		return ErrorCode_BANNED, nil
	case "NOT_AN_INVITEE":
		return ErrorCode_NOT_AN_INVITEE, nil
	case "NOT_AN_OUTSIDER":
		return ErrorCode_NOT_AN_OUTSIDER, nil
	case "EMPTY_GROUP":
		return ErrorCode_EMPTY_GROUP, nil
	case "EXCEED_FOLLOW_LIMIT":
		return ErrorCode_EXCEED_FOLLOW_LIMIT, nil
	case "UNSUPPORTED_ACCOUNT_TYPE":
		return ErrorCode_UNSUPPORTED_ACCOUNT_TYPE, nil
	}
	return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}

func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

func (p ErrorCode) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ErrorCode) UnmarshalText(text []byte) error {
	q, err := ErrorCodeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *ErrorCode) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = ErrorCode(v)
	return nil
}

func (p *ErrorCode) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type UpdateExtendedProfileAttributeAttr int64

const (
	UpdateExtendedProfileAttributeAttr_BIRTHDAY UpdateExtendedProfileAttributeAttr = 0
)

func (p UpdateExtendedProfileAttributeAttr) String() string {
	switch p {
	case UpdateExtendedProfileAttributeAttr_BIRTHDAY:
		return "BIRTHDAY"
	}
	return "<UNSET>"
}

func UpdateExtendedProfileAttributeAttrFromString(s string) (UpdateExtendedProfileAttributeAttr, error) {
	switch s {
	case "BIRTHDAY":
		return UpdateExtendedProfileAttributeAttr_BIRTHDAY, nil
	}
	return UpdateExtendedProfileAttributeAttr(0), fmt.Errorf("not a valid UpdateExtendedProfileAttributeAttr string")
}

func UpdateExtendedProfileAttributeAttrPtr(v UpdateExtendedProfileAttributeAttr) *UpdateExtendedProfileAttributeAttr {
	return &v
}

func (p UpdateExtendedProfileAttributeAttr) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *UpdateExtendedProfileAttributeAttr) UnmarshalText(text []byte) error {
	q, err := UpdateExtendedProfileAttributeAttrFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *UpdateExtendedProfileAttributeAttr) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = UpdateExtendedProfileAttributeAttr(v)
	return nil
}

func (p *UpdateExtendedProfileAttributeAttr) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type PrivacyLevelType int64

const (
	PrivacyLevelType_PUBLIC  PrivacyLevelType = 0
	PrivacyLevelType_PRIVATE PrivacyLevelType = 1
)

func (p PrivacyLevelType) String() string {
	switch p {
	case PrivacyLevelType_PUBLIC:
		return "PUBLIC"
	case PrivacyLevelType_PRIVATE:
		return "PRIVATE"
	}
	return "<UNSET>"
}

func PrivacyLevelTypeFromString(s string) (PrivacyLevelType, error) {
	switch s {
	case "PUBLIC":
		return PrivacyLevelType_PUBLIC, nil
	case "PRIVATE":
		return PrivacyLevelType_PRIVATE, nil
	}
	return PrivacyLevelType(0), fmt.Errorf("not a valid PrivacyLevelType string")
}

func PrivacyLevelTypePtr(v PrivacyLevelType) *PrivacyLevelType { return &v }

func (p PrivacyLevelType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *PrivacyLevelType) UnmarshalText(text []byte) error {
	q, err := PrivacyLevelTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *PrivacyLevelType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = PrivacyLevelType(v)
	return nil
}

func (p *PrivacyLevelType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type Trigger int64

const (
	Trigger_UNKNOWN        Trigger = 0
	Trigger_APP_FOREGROUND Trigger = 1
)

func (p Trigger) String() string {
	switch p {
	case Trigger_UNKNOWN:
		return "UNKNOWN"
	case Trigger_APP_FOREGROUND:
		return "APP_FOREGROUND"
	}
	return "<UNSET>"
}

func TriggerFromString(s string) (Trigger, error) {
	switch s {
	case "UNKNOWN":
		return Trigger_UNKNOWN, nil
	case "APP_FOREGROUND":
		return Trigger_APP_FOREGROUND, nil
	}
	return Trigger(0), fmt.Errorf("not a valid Trigger string")
}

func TriggerPtr(v Trigger) *Trigger { return &v }

func (p Trigger) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *Trigger) UnmarshalText(text []byte) error {
	q, err := TriggerFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *Trigger) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = Trigger(v)
	return nil
}

func (p *Trigger) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type NetworkType int64

const (
	NetworkType_UNKNOWN          NetworkType = 0
	NetworkType_WIFI             NetworkType = 1
	NetworkType_CELLULAR_NETWORK NetworkType = 2
)

func (p NetworkType) String() string {
	switch p {
	case NetworkType_UNKNOWN:
		return "UNKNOWN"
	case NetworkType_WIFI:
		return "WIFI"
	case NetworkType_CELLULAR_NETWORK:
		return "CELLULAR_NETWORK"
	}
	return "<UNSET>"
}

func NetworkTypeFromString(s string) (NetworkType, error) {
	switch s {
	case "UNKNOWN":
		return NetworkType_UNKNOWN, nil
	case "WIFI":
		return NetworkType_WIFI, nil
	case "CELLULAR_NETWORK":
		return NetworkType_CELLULAR_NETWORK, nil
	}
	return NetworkType(0), fmt.Errorf("not a valid NetworkType string")
}

func NetworkTypePtr(v NetworkType) *NetworkType { return &v }

func (p NetworkType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *NetworkType) UnmarshalText(text []byte) error {
	q, err := NetworkTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *NetworkType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = NetworkType(v)
	return nil
}

func (p *NetworkType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ProductType int64

const (
	ProductType_COIN    ProductType = 0
	ProductType_CREDIT  ProductType = 1
	ProductType_MONTHLY ProductType = 2
)

func (p ProductType) String() string {
	switch p {
	case ProductType_COIN:
		return "COIN"
	case ProductType_CREDIT:
		return "CREDIT"
	case ProductType_MONTHLY:
		return "MONTHLY"
	}
	return "<UNSET>"
}

func ProductTypeFromString(s string) (ProductType, error) {
	switch s {
	case "COIN":
		return ProductType_COIN, nil
	case "CREDIT":
		return ProductType_CREDIT, nil
	case "MONTHLY":
		return ProductType_MONTHLY, nil
	}
	return ProductType(0), fmt.Errorf("not a valid ProductType string")
}

func ProductTypePtr(v ProductType) *ProductType { return &v }

func (p ProductType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ProductType) UnmarshalText(text []byte) error {
	q, err := ProductTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *ProductType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = ProductType(v)
	return nil
}

func (p *ProductType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ChatType int64

const (
	ChatType_GROUP ChatType = 0
	ChatType_ROOM  ChatType = 1
	ChatType_PEER  ChatType = 2
)

func (p ChatType) String() string {
	switch p {
	case ChatType_GROUP:
		return "GROUP"
	case ChatType_ROOM:
		return "ROOM"
	case ChatType_PEER:
		return "PEER"
	}
	return "<UNSET>"
}

func ChatTypeFromString(s string) (ChatType, error) {
	switch s {
	case "GROUP":
		return ChatType_GROUP, nil
	case "ROOM":
		return ChatType_ROOM, nil
	case "PEER":
		return ChatType_PEER, nil
	}
	return ChatType(0), fmt.Errorf("not a valid ChatType string")
}

func ChatTypePtr(v ChatType) *ChatType { return &v }

func (p ChatType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ChatType) UnmarshalText(text []byte) error {
	q, err := ChatTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *ChatType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = ChatType(v)
	return nil
}

func (p *ChatType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type MIDType int64

const (
	MIDType_MID             MIDType = 0
	MIDType_PHONE           MIDType = 1
	MIDType_EMAIL           MIDType = 2
	MIDType_USERID          MIDType = 3
	MIDType_PROXIMITY       MIDType = 4
	MIDType_GROUP           MIDType = 5
	MIDType_USER            MIDType = 6
	MIDType_QRCODE          MIDType = 7
	MIDType_PROMOTION_BOT   MIDType = 8
	MIDType_CONTACT_MESSAGE MIDType = 9
	MIDType_FRIEND_REQUEST  MIDType = 10
	MIDType_REPAIR          MIDType = 128
	MIDType_FACEBOOK        MIDType = 2305
	MIDType_SINA            MIDType = 2306
	MIDType_RENREN          MIDType = 2307
	MIDType_FEIXIN          MIDType = 2308
	MIDType_BBM             MIDType = 2309
	MIDType_BEACON          MIDType = 11
)

func (p MIDType) String() string {
	switch p {
	case MIDType_MID:
		return "MID"
	case MIDType_PHONE:
		return "PHONE"
	case MIDType_EMAIL:
		return "EMAIL"
	case MIDType_USERID:
		return "USERID"
	case MIDType_PROXIMITY:
		return "PROXIMITY"
	case MIDType_GROUP:
		return "GROUP"
	case MIDType_USER:
		return "USER"
	case MIDType_QRCODE:
		return "QRCODE"
	case MIDType_PROMOTION_BOT:
		return "PROMOTION_BOT"
	case MIDType_CONTACT_MESSAGE:
		return "CONTACT_MESSAGE"
	case MIDType_FRIEND_REQUEST:
		return "FRIEND_REQUEST"
	case MIDType_REPAIR:
		return "REPAIR"
	case MIDType_FACEBOOK:
		return "FACEBOOK"
	case MIDType_SINA:
		return "SINA"
	case MIDType_RENREN:
		return "RENREN"
	case MIDType_FEIXIN:
		return "FEIXIN"
	case MIDType_BBM:
		return "BBM"
	case MIDType_BEACON:
		return "BEACON"
	}
	return "<UNSET>"
}

func MIDTypeFromString(s string) (MIDType, error) {
	switch s {
	case "MID":
		return MIDType_MID, nil
	case "PHONE":
		return MIDType_PHONE, nil
	case "EMAIL":
		return MIDType_EMAIL, nil
	case "USERID":
		return MIDType_USERID, nil
	case "PROXIMITY":
		return MIDType_PROXIMITY, nil
	case "GROUP":
		return MIDType_GROUP, nil
	case "USER":
		return MIDType_USER, nil
	case "QRCODE":
		return MIDType_QRCODE, nil
	case "PROMOTION_BOT":
		return MIDType_PROMOTION_BOT, nil
	case "CONTACT_MESSAGE":
		return MIDType_CONTACT_MESSAGE, nil
	case "FRIEND_REQUEST":
		return MIDType_FRIEND_REQUEST, nil
	case "REPAIR":
		return MIDType_REPAIR, nil
	case "FACEBOOK":
		return MIDType_FACEBOOK, nil
	case "SINA":
		return MIDType_SINA, nil
	case "RENREN":
		return MIDType_RENREN, nil
	case "FEIXIN":
		return MIDType_FEIXIN, nil
	case "BBM":
		return MIDType_BBM, nil
	case "BEACON":
		return MIDType_BEACON, nil
	}
	return MIDType(0), fmt.Errorf("not a valid MIDType string")
}

func MIDTypePtr(v MIDType) *MIDType { return &v }

func (p MIDType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *MIDType) UnmarshalText(text []byte) error {
	q, err := MIDTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *MIDType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = MIDType(v)
	return nil
}

func (p *MIDType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ContactStatus int64

const (
	ContactStatus_UNSPECIFIED       ContactStatus = 0
	ContactStatus_FRIEND            ContactStatus = 1
	ContactStatus_FRIEND_BLOCKED    ContactStatus = 2
	ContactStatus_RECOMMEND         ContactStatus = 3
	ContactStatus_RECOMMEND_BLOCKED ContactStatus = 4
	ContactStatus_DELETED           ContactStatus = 5
	ContactStatus_DELETED_BLOCKED   ContactStatus = 6
)

func (p ContactStatus) String() string {
	switch p {
	case ContactStatus_UNSPECIFIED:
		return "UNSPECIFIED"
	case ContactStatus_FRIEND:
		return "FRIEND"
	case ContactStatus_FRIEND_BLOCKED:
		return "FRIEND_BLOCKED"
	case ContactStatus_RECOMMEND:
		return "RECOMMEND"
	case ContactStatus_RECOMMEND_BLOCKED:
		return "RECOMMEND_BLOCKED"
	case ContactStatus_DELETED:
		return "DELETED"
	case ContactStatus_DELETED_BLOCKED:
		return "DELETED_BLOCKED"
	}
	return "<UNSET>"
}

func ContactStatusFromString(s string) (ContactStatus, error) {
	switch s {
	case "UNSPECIFIED":
		return ContactStatus_UNSPECIFIED, nil
	case "FRIEND":
		return ContactStatus_FRIEND, nil
	case "FRIEND_BLOCKED":
		return ContactStatus_FRIEND_BLOCKED, nil
	case "RECOMMEND":
		return ContactStatus_RECOMMEND, nil
	case "RECOMMEND_BLOCKED":
		return ContactStatus_RECOMMEND_BLOCKED, nil
	case "DELETED":
		return ContactStatus_DELETED, nil
	case "DELETED_BLOCKED":
		return ContactStatus_DELETED_BLOCKED, nil
	}
	return ContactStatus(0), fmt.Errorf("not a valid ContactStatus string")
}

func ContactStatusPtr(v ContactStatus) *ContactStatus { return &v }

func (p ContactStatus) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ContactStatus) UnmarshalText(text []byte) error {
	q, err := ContactStatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *ContactStatus) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = ContactStatus(v)
	return nil
}

func (p *ContactStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ContactRelation int64

const (
	ContactRelation_ONEWAY         ContactRelation = 0
	ContactRelation_BOTH           ContactRelation = 1
	ContactRelation_NOT_REGISTERED ContactRelation = 2
)

func (p ContactRelation) String() string {
	switch p {
	case ContactRelation_ONEWAY:
		return "ONEWAY"
	case ContactRelation_BOTH:
		return "BOTH"
	case ContactRelation_NOT_REGISTERED:
		return "NOT_REGISTERED"
	}
	return "<UNSET>"
}

func ContactRelationFromString(s string) (ContactRelation, error) {
	switch s {
	case "ONEWAY":
		return ContactRelation_ONEWAY, nil
	case "BOTH":
		return ContactRelation_BOTH, nil
	case "NOT_REGISTERED":
		return ContactRelation_NOT_REGISTERED, nil
	}
	return ContactRelation(0), fmt.Errorf("not a valid ContactRelation string")
}

func ContactRelationPtr(v ContactRelation) *ContactRelation { return &v }

func (p ContactRelation) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ContactRelation) UnmarshalText(text []byte) error {
	q, err := ContactRelationFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *ContactRelation) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = ContactRelation(v)
	return nil
}

func (p *ContactRelation) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type FriendRequestStatus int64

const (
	FriendRequestStatus_NONE              FriendRequestStatus = 0
	FriendRequestStatus_AVAILABLE         FriendRequestStatus = 1
	FriendRequestStatus_ALREADY_REQUESTED FriendRequestStatus = 2
	FriendRequestStatus_UNAVAILABLE       FriendRequestStatus = 3
)

func (p FriendRequestStatus) String() string {
	switch p {
	case FriendRequestStatus_NONE:
		return "NONE"
	case FriendRequestStatus_AVAILABLE:
		return "AVAILABLE"
	case FriendRequestStatus_ALREADY_REQUESTED:
		return "ALREADY_REQUESTED"
	case FriendRequestStatus_UNAVAILABLE:
		return "UNAVAILABLE"
	}
	return "<UNSET>"
}

func FriendRequestStatusFromString(s string) (FriendRequestStatus, error) {
	switch s {
	case "NONE":
		return FriendRequestStatus_NONE, nil
	case "AVAILABLE":
		return FriendRequestStatus_AVAILABLE, nil
	case "ALREADY_REQUESTED":
		return FriendRequestStatus_ALREADY_REQUESTED, nil
	case "UNAVAILABLE":
		return FriendRequestStatus_UNAVAILABLE, nil
	}
	return FriendRequestStatus(0), fmt.Errorf("not a valid FriendRequestStatus string")
}

func FriendRequestStatusPtr(v FriendRequestStatus) *FriendRequestStatus { return &v }

func (p FriendRequestStatus) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *FriendRequestStatus) UnmarshalText(text []byte) error {
	q, err := FriendRequestStatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *FriendRequestStatus) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = FriendRequestStatus(v)
	return nil
}

func (p *FriendRequestStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type Provider int64

const (
	Provider_UNKNOWN    Provider = 0
	Provider_LINE       Provider = 1
	Provider_NAVER_KR   Provider = 2
	Provider_LINE_PHONE Provider = 3
)

func (p Provider) String() string {
	switch p {
	case Provider_UNKNOWN:
		return "UNKNOWN"
	case Provider_LINE:
		return "LINE"
	case Provider_NAVER_KR:
		return "NAVER_KR"
	case Provider_LINE_PHONE:
		return "LINE_PHONE"
	}
	return "<UNSET>"
}

func ProviderFromString(s string) (Provider, error) {
	switch s {
	case "UNKNOWN":
		return Provider_UNKNOWN, nil
	case "LINE":
		return Provider_LINE, nil
	case "NAVER_KR":
		return Provider_NAVER_KR, nil
	case "LINE_PHONE":
		return Provider_LINE_PHONE, nil
	}
	return Provider(0), fmt.Errorf("not a valid Provider string")
}

func ProviderPtr(v Provider) *Provider { return &v }

func (p Provider) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *Provider) UnmarshalText(text []byte) error {
	q, err := ProviderFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *Provider) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = Provider(v)
	return nil
}

func (p *Provider) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ResponseType int64

const (
	ResponseType_UNKNOWN                   ResponseType = 0
	ResponseType_SUCCESS                   ResponseType = 1
	ResponseType_REQUIRE_SERVER_SIDE_EMAIL ResponseType = 2
	ResponseType_REQUIRE_CLIENT_SIDE_EMAIL ResponseType = 3
)

func (p ResponseType) String() string {
	switch p {
	case ResponseType_UNKNOWN:
		return "UNKNOWN"
	case ResponseType_SUCCESS:
		return "SUCCESS"
	case ResponseType_REQUIRE_SERVER_SIDE_EMAIL:
		return "REQUIRE_SERVER_SIDE_EMAIL"
	case ResponseType_REQUIRE_CLIENT_SIDE_EMAIL:
		return "REQUIRE_CLIENT_SIDE_EMAIL"
	}
	return "<UNSET>"
}

func ResponseTypeFromString(s string) (ResponseType, error) {
	switch s {
	case "UNKNOWN":
		return ResponseType_UNKNOWN, nil
	case "SUCCESS":
		return ResponseType_SUCCESS, nil
	case "REQUIRE_SERVER_SIDE_EMAIL":
		return ResponseType_REQUIRE_SERVER_SIDE_EMAIL, nil
	case "REQUIRE_CLIENT_SIDE_EMAIL":
		return ResponseType_REQUIRE_CLIENT_SIDE_EMAIL, nil
	}
	return ResponseType(0), fmt.Errorf("not a valid ResponseType string")
}

func ResponseTypePtr(v ResponseType) *ResponseType { return &v }

func (p ResponseType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ResponseType) UnmarshalText(text []byte) error {
	q, err := ResponseTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *ResponseType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = ResponseType(v)
	return nil
}

func (p *ResponseType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type SnSIdTyoe int64

const (
	SnSIdTyoe_FACEBOOK SnSIdTyoe = 1
	SnSIdTyoe_SINA     SnSIdTyoe = 2
	SnSIdTyoe_RENREN   SnSIdTyoe = 3
	SnSIdTyoe_FEIXIN   SnSIdTyoe = 4
	SnSIdTyoe_BBM      SnSIdTyoe = 5
	SnSIdTyoe_APPLE    SnSIdTyoe = 6
)

func (p SnSIdTyoe) String() string {
	switch p {
	case SnSIdTyoe_FACEBOOK:
		return "FACEBOOK"
	case SnSIdTyoe_SINA:
		return "SINA"
	case SnSIdTyoe_RENREN:
		return "RENREN"
	case SnSIdTyoe_FEIXIN:
		return "FEIXIN"
	case SnSIdTyoe_BBM:
		return "BBM"
	case SnSIdTyoe_APPLE:
		return "APPLE"
	}
	return "<UNSET>"
}

func SnSIdTyoeFromString(s string) (SnSIdTyoe, error) {
	switch s {
	case "FACEBOOK":
		return SnSIdTyoe_FACEBOOK, nil
	case "SINA":
		return SnSIdTyoe_SINA, nil
	case "RENREN":
		return SnSIdTyoe_RENREN, nil
	case "FEIXIN":
		return SnSIdTyoe_FEIXIN, nil
	case "BBM":
		return SnSIdTyoe_BBM, nil
	case "APPLE":
		return SnSIdTyoe_APPLE, nil
	}
	return SnSIdTyoe(0), fmt.Errorf("not a valid SnSIdTyoe string")
}

func SnSIdTyoePtr(v SnSIdTyoe) *SnSIdTyoe { return &v }

func (p SnSIdTyoe) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *SnSIdTyoe) UnmarshalText(text []byte) error {
	q, err := SnSIdTyoeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *SnSIdTyoe) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = SnSIdTyoe(v)
	return nil
}

func (p *SnSIdTyoe) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type AccountMigrationCheckType int64

const (
	AccountMigrationCheckType_SKIP            AccountMigrationCheckType = 0
	AccountMigrationCheckType_PINCODE         AccountMigrationCheckType = 1
	AccountMigrationCheckType_SECURITY_CENTER AccountMigrationCheckType = 2
)

func (p AccountMigrationCheckType) String() string {
	switch p {
	case AccountMigrationCheckType_SKIP:
		return "SKIP"
	case AccountMigrationCheckType_PINCODE:
		return "PINCODE"
	case AccountMigrationCheckType_SECURITY_CENTER:
		return "SECURITY_CENTER"
	}
	return "<UNSET>"
}

func AccountMigrationCheckTypeFromString(s string) (AccountMigrationCheckType, error) {
	switch s {
	case "SKIP":
		return AccountMigrationCheckType_SKIP, nil
	case "PINCODE":
		return AccountMigrationCheckType_PINCODE, nil
	case "SECURITY_CENTER":
		return AccountMigrationCheckType_SECURITY_CENTER, nil
	}
	return AccountMigrationCheckType(0), fmt.Errorf("not a valid AccountMigrationCheckType string")
}

func AccountMigrationCheckTypePtr(v AccountMigrationCheckType) *AccountMigrationCheckType { return &v }

func (p AccountMigrationCheckType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *AccountMigrationCheckType) UnmarshalText(text []byte) error {
	q, err := AccountMigrationCheckTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *AccountMigrationCheckType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = AccountMigrationCheckType(v)
	return nil
}

func (p *AccountMigrationCheckType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type DataTypes int64

const (
	DataTypes_UNKNOWN  DataTypes = 0
	DataTypes_LOCATION DataTypes = 1
)

func (p DataTypes) String() string {
	switch p {
	case DataTypes_UNKNOWN:
		return "UNKNOWN"
	case DataTypes_LOCATION:
		return "LOCATION"
	}
	return "<UNSET>"
}

func DataTypesFromString(s string) (DataTypes, error) {
	switch s {
	case "UNKNOWN":
		return DataTypes_UNKNOWN, nil
	case "LOCATION":
		return DataTypes_LOCATION, nil
	}
	return DataTypes(0), fmt.Errorf("not a valid DataTypes string")
}

func DataTypesPtr(v DataTypes) *DataTypes { return &v }

func (p DataTypes) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *DataTypes) UnmarshalText(text []byte) error {
	q, err := DataTypesFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *DataTypes) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = DataTypes(v)
	return nil
}

func (p *DataTypes) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type DisplayType int64

const (
	DisplayType_NOT_A_FRIEND DisplayType = 0
	DisplayType_ALWAYS       DisplayType = 1
)

func (p DisplayType) String() string {
	switch p {
	case DisplayType_NOT_A_FRIEND:
		return "NOT_A_FRIEND"
	case DisplayType_ALWAYS:
		return "ALWAYS"
	}
	return "<UNSET>"
}

func DisplayTypeFromString(s string) (DisplayType, error) {
	switch s {
	case "NOT_A_FRIEND":
		return DisplayType_NOT_A_FRIEND, nil
	case "ALWAYS":
		return DisplayType_ALWAYS, nil
	}
	return DisplayType(0), fmt.Errorf("not a valid DisplayType string")
}

func DisplayTypePtr(v DisplayType) *DisplayType { return &v }

func (p DisplayType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *DisplayType) UnmarshalText(text []byte) error {
	q, err := DisplayTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *DisplayType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = DisplayType(v)
	return nil
}

func (p *DisplayType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type HistorysType int64

const (
	HistorysType_OUT      HistorysType = 0
	HistorysType_IN       HistorysType = 1
	HistorysType_TOLLFREE HistorysType = 2
	HistorysType_RECORD   HistorysType = 3
	HistorysType_AD       HistorysType = 4
	HistorysType_CS       HistorysType = 5
	HistorysType_OA       HistorysType = 6
)

func (p HistorysType) String() string {
	switch p {
	case HistorysType_OUT:
		return "OUT"
	case HistorysType_IN:
		return "IN"
	case HistorysType_TOLLFREE:
		return "TOLLFREE"
	case HistorysType_RECORD:
		return "RECORD"
	case HistorysType_AD:
		return "AD"
	case HistorysType_CS:
		return "CS"
	case HistorysType_OA:
		return "OA"
	}
	return "<UNSET>"
}

func HistorysTypeFromString(s string) (HistorysType, error) {
	switch s {
	case "OUT":
		return HistorysType_OUT, nil
	case "IN":
		return HistorysType_IN, nil
	case "TOLLFREE":
		return HistorysType_TOLLFREE, nil
	case "RECORD":
		return HistorysType_RECORD, nil
	case "AD":
		return HistorysType_AD, nil
	case "CS":
		return HistorysType_CS, nil
	case "OA":
		return HistorysType_OA, nil
	}
	return HistorysType(0), fmt.Errorf("not a valid HistorysType string")
}

func HistorysTypePtr(v HistorysType) *HistorysType { return &v }

func (p HistorysType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *HistorysType) UnmarshalText(text []byte) error {
	q, err := HistorysTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *HistorysType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = HistorysType(v)
	return nil
}

func (p *HistorysType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type SyncReason int64

const (
	SyncReason_UNSPECIFIED    SyncReason = 0
	SyncReason_UNKNOWN        SyncReason = 1
	SyncReason_INITIALIZATION SyncReason = 2
	SyncReason_OPERATION      SyncReason = 3
	SyncReason_FULL_SYNC      SyncReason = 4
	SyncReason_AUTO_REPAIR    SyncReason = 5
	SyncReason_MANUAL_REPAIR  SyncReason = 6
	SyncReason_INTERNAL       SyncReason = 7
)

func (p SyncReason) String() string {
	switch p {
	case SyncReason_UNSPECIFIED:
		return "UNSPECIFIED"
	case SyncReason_UNKNOWN:
		return "UNKNOWN"
	case SyncReason_INITIALIZATION:
		return "INITIALIZATION"
	case SyncReason_OPERATION:
		return "OPERATION"
	case SyncReason_FULL_SYNC:
		return "FULL_SYNC"
	case SyncReason_AUTO_REPAIR:
		return "AUTO_REPAIR"
	case SyncReason_MANUAL_REPAIR:
		return "MANUAL_REPAIR"
	case SyncReason_INTERNAL:
		return "INTERNAL"
	}
	return "<UNSET>"
}

func SyncReasonFromString(s string) (SyncReason, error) {
	switch s {
	case "UNSPECIFIED":
		return SyncReason_UNSPECIFIED, nil
	case "UNKNOWN":
		return SyncReason_UNKNOWN, nil
	case "INITIALIZATION":
		return SyncReason_INITIALIZATION, nil
	case "OPERATION":
		return SyncReason_OPERATION, nil
	case "FULL_SYNC":
		return SyncReason_FULL_SYNC, nil
	case "AUTO_REPAIR":
		return SyncReason_AUTO_REPAIR, nil
	case "MANUAL_REPAIR":
		return SyncReason_MANUAL_REPAIR, nil
	case "INTERNAL":
		return SyncReason_INTERNAL, nil
	}
	return SyncReason(0), fmt.Errorf("not a valid SyncReason string")
}

func SyncReasonPtr(v SyncReason) *SyncReason { return &v }

func (p SyncReason) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *SyncReason) UnmarshalText(text []byte) error {
	q, err := SyncReasonFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *SyncReason) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = SyncReason(v)
	return nil
}

func (p *SyncReason) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type CountryGroup int64

const (
	CountryGroup_UNKNOWN                CountryGroup = 0
	CountryGroup_EUROPEAN_ECONOMIC_AREA CountryGroup = 1
)

func (p CountryGroup) String() string {
	switch p {
	case CountryGroup_UNKNOWN:
		return "UNKNOWN"
	case CountryGroup_EUROPEAN_ECONOMIC_AREA:
		return "EUROPEAN_ECONOMIC_AREA"
	}
	return "<UNSET>"
}

func CountryGroupFromString(s string) (CountryGroup, error) {
	switch s {
	case "UNKNOWN":
		return CountryGroup_UNKNOWN, nil
	case "EUROPEAN_ECONOMIC_AREA":
		return CountryGroup_EUROPEAN_ECONOMIC_AREA, nil
	}
	return CountryGroup(0), fmt.Errorf("not a valid CountryGroup string")
}

func CountryGroupPtr(v CountryGroup) *CountryGroup { return &v }

func (p CountryGroup) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *CountryGroup) UnmarshalText(text []byte) error {
	q, err := CountryGroupFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *CountryGroup) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = CountryGroup(v)
	return nil
}

func (p *CountryGroup) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ChatRoomAnnouncementType int64

const (
	ChatRoomAnnouncementType_MESSAGE ChatRoomAnnouncementType = 0
	ChatRoomAnnouncementType_NOTE    ChatRoomAnnouncementType = 1
	ChatRoomAnnouncementType_CHANNEL ChatRoomAnnouncementType = 2
)

func (p ChatRoomAnnouncementType) String() string {
	switch p {
	case ChatRoomAnnouncementType_MESSAGE:
		return "MESSAGE"
	case ChatRoomAnnouncementType_NOTE:
		return "NOTE"
	case ChatRoomAnnouncementType_CHANNEL:
		return "CHANNEL"
	}
	return "<UNSET>"
}

func ChatRoomAnnouncementTypeFromString(s string) (ChatRoomAnnouncementType, error) {
	switch s {
	case "MESSAGE":
		return ChatRoomAnnouncementType_MESSAGE, nil
	case "NOTE":
		return ChatRoomAnnouncementType_NOTE, nil
	case "CHANNEL":
		return ChatRoomAnnouncementType_CHANNEL, nil
	}
	return ChatRoomAnnouncementType(0), fmt.Errorf("not a valid ChatRoomAnnouncementType string")
}

func ChatRoomAnnouncementTypePtr(v ChatRoomAnnouncementType) *ChatRoomAnnouncementType { return &v }

func (p ChatRoomAnnouncementType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ChatRoomAnnouncementType) UnmarshalText(text []byte) error {
	q, err := ChatRoomAnnouncementTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *ChatRoomAnnouncementType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = ChatRoomAnnouncementType(v)
	return nil
}

func (p *ChatRoomAnnouncementType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type DeletePermission int64

const (
	DeletePermission_ANYONE_IN_CHAT DeletePermission = 0
	DeletePermission_CREATOR_ONLY   DeletePermission = 1
	DeletePermission_NO_ONE         DeletePermission = 2
)

func (p DeletePermission) String() string {
	switch p {
	case DeletePermission_ANYONE_IN_CHAT:
		return "ANYONE_IN_CHAT"
	case DeletePermission_CREATOR_ONLY:
		return "CREATOR_ONLY"
	case DeletePermission_NO_ONE:
		return "NO_ONE"
	}
	return "<UNSET>"
}

func DeletePermissionFromString(s string) (DeletePermission, error) {
	switch s {
	case "ANYONE_IN_CHAT":
		return DeletePermission_ANYONE_IN_CHAT, nil
	case "CREATOR_ONLY":
		return DeletePermission_CREATOR_ONLY, nil
	case "NO_ONE":
		return DeletePermission_NO_ONE, nil
	}
	return DeletePermission(0), fmt.Errorf("not a valid DeletePermission string")
}

func DeletePermissionPtr(v DeletePermission) *DeletePermission { return &v }

func (p DeletePermission) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *DeletePermission) UnmarshalText(text []byte) error {
	q, err := DeletePermissionFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *DeletePermission) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = DeletePermission(v)
	return nil
}

func (p *DeletePermission) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ReportCategory int64

const (
	ReportCategory_PROFILE      ReportCategory = 0
	ReportCategory_SETTINGS     ReportCategory = 1
	ReportCategory_OPS          ReportCategory = 2
	ReportCategory_CONTACT      ReportCategory = 3
	ReportCategory_RECOMMEND    ReportCategory = 4
	ReportCategory_BLOCK        ReportCategory = 5
	ReportCategory_GROUP        ReportCategory = 6
	ReportCategory_ROOM         ReportCategory = 7
	ReportCategory_NOTIFICATION ReportCategory = 8
	ReportCategory_ADDRESS_BOOK ReportCategory = 9
)

func (p ReportCategory) String() string {
	switch p {
	case ReportCategory_PROFILE:
		return "PROFILE"
	case ReportCategory_SETTINGS:
		return "SETTINGS"
	case ReportCategory_OPS:
		return "OPS"
	case ReportCategory_CONTACT:
		return "CONTACT"
	case ReportCategory_RECOMMEND:
		return "RECOMMEND"
	case ReportCategory_BLOCK:
		return "BLOCK"
	case ReportCategory_GROUP:
		return "GROUP"
	case ReportCategory_ROOM:
		return "ROOM"
	case ReportCategory_NOTIFICATION:
		return "NOTIFICATION"
	case ReportCategory_ADDRESS_BOOK:
		return "ADDRESS_BOOK"
	}
	return "<UNSET>"
}

func ReportCategoryFromString(s string) (ReportCategory, error) {
	switch s {
	case "PROFILE":
		return ReportCategory_PROFILE, nil
	case "SETTINGS":
		return ReportCategory_SETTINGS, nil
	case "OPS":
		return ReportCategory_OPS, nil
	case "CONTACT":
		return ReportCategory_CONTACT, nil
	case "RECOMMEND":
		return ReportCategory_RECOMMEND, nil
	case "BLOCK":
		return ReportCategory_BLOCK, nil
	case "GROUP":
		return ReportCategory_GROUP, nil
	case "ROOM":
		return ReportCategory_ROOM, nil
	case "NOTIFICATION":
		return ReportCategory_NOTIFICATION, nil
	case "ADDRESS_BOOK":
		return ReportCategory_ADDRESS_BOOK, nil
	}
	return ReportCategory(0), fmt.Errorf("not a valid ReportCategory string")
}

func ReportCategoryPtr(v ReportCategory) *ReportCategory { return &v }

func (p ReportCategory) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ReportCategory) UnmarshalText(text []byte) error {
	q, err := ReportCategoryFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *ReportCategory) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = ReportCategory(v)
	return nil
}

func (p *ReportCategory) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type RequestsSource int64

const (
	RequestsSource_NA                    RequestsSource = 0
	RequestsSource_FRIEND_VIEW           RequestsSource = 1
	RequestsSource_OFFICIAL_ACCOUNT_VIEW RequestsSource = 2
)

func (p RequestsSource) String() string {
	switch p {
	case RequestsSource_NA:
		return "NA"
	case RequestsSource_FRIEND_VIEW:
		return "FRIEND_VIEW"
	case RequestsSource_OFFICIAL_ACCOUNT_VIEW:
		return "OFFICIAL_ACCOUNT_VIEW"
	}
	return "<UNSET>"
}

func RequestsSourceFromString(s string) (RequestsSource, error) {
	switch s {
	case "NA":
		return RequestsSource_NA, nil
	case "FRIEND_VIEW":
		return RequestsSource_FRIEND_VIEW, nil
	case "OFFICIAL_ACCOUNT_VIEW":
		return RequestsSource_OFFICIAL_ACCOUNT_VIEW, nil
	}
	return RequestsSource(0), fmt.Errorf("not a valid RequestsSource string")
}

func RequestsSourcePtr(v RequestsSource) *RequestsSource { return &v }

func (p RequestsSource) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *RequestsSource) UnmarshalText(text []byte) error {
	q, err := RequestsSourceFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *RequestsSource) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = RequestsSource(v)
	return nil
}

func (p *RequestsSource) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type BotType int64

const (
	BotType_RESERVED  BotType = 0
	BotType_OFFICIAL  BotType = 1
	BotType_LINE_AT_0 BotType = 2
	BotType_LINE_AT   BotType = 3
)

func (p BotType) String() string {
	switch p {
	case BotType_RESERVED:
		return "RESERVED"
	case BotType_OFFICIAL:
		return "OFFICIAL"
	case BotType_LINE_AT_0:
		return "LINE_AT_0"
	case BotType_LINE_AT:
		return "LINE_AT"
	}
	return "<UNSET>"
}

func BotTypeFromString(s string) (BotType, error) {
	switch s {
	case "RESERVED":
		return BotType_RESERVED, nil
	case "OFFICIAL":
		return BotType_OFFICIAL, nil
	case "LINE_AT_0":
		return BotType_LINE_AT_0, nil
	case "LINE_AT":
		return BotType_LINE_AT, nil
	}
	return BotType(0), fmt.Errorf("not a valid BotType string")
}

func BotTypePtr(v BotType) *BotType { return &v }

func (p BotType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *BotType) UnmarshalText(text []byte) error {
	q, err := BotTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *BotType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = BotType(v)
	return nil
}

func (p *BotType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type Direction int64

const (
	Direction_INCOMING Direction = 1
	Direction_OUTGOING Direction = 2
)

func (p Direction) String() string {
	switch p {
	case Direction_INCOMING:
		return "INCOMING"
	case Direction_OUTGOING:
		return "OUTGOING"
	}
	return "<UNSET>"
}

func DirectionFromString(s string) (Direction, error) {
	switch s {
	case "INCOMING":
		return Direction_INCOMING, nil
	case "OUTGOING":
		return Direction_OUTGOING, nil
	}
	return Direction(0), fmt.Errorf("not a valid Direction string")
}

func DirectionPtr(v Direction) *Direction { return &v }

func (p Direction) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *Direction) UnmarshalText(text []byte) error {
	q, err := DirectionFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *Direction) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = Direction(v)
	return nil
}

func (p *Direction) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ApplicationType int64

const (
	ApplicationType_IOS                ApplicationType = 16
	ApplicationType_IOS_RC             ApplicationType = 17
	ApplicationType_IOS_BETA           ApplicationType = 18
	ApplicationType_IOS_ALPHA          ApplicationType = 19
	ApplicationType_ANDROID            ApplicationType = 32
	ApplicationType_ANDROID_RC         ApplicationType = 33
	ApplicationType_ANDROID_BETA       ApplicationType = 34
	ApplicationType_ANDROID_ALPHA      ApplicationType = 35
	ApplicationType_WAP                ApplicationType = 48
	ApplicationType_WAP_RC             ApplicationType = 49
	ApplicationType_WAP_BETA           ApplicationType = 50
	ApplicationType_WAP_ALPHA          ApplicationType = 51
	ApplicationType_BOT                ApplicationType = 64
	ApplicationType_BOT_RC             ApplicationType = 65
	ApplicationType_BOT_BETA           ApplicationType = 66
	ApplicationType_BOT_ALPHA          ApplicationType = 67
	ApplicationType_WEB                ApplicationType = 80
	ApplicationType_WEB_RC             ApplicationType = 81
	ApplicationType_WEB_BETA           ApplicationType = 82
	ApplicationType_WEB_ALPHA          ApplicationType = 83
	ApplicationType_DESKTOPWIN         ApplicationType = 96
	ApplicationType_DESKTOPWIN_RC      ApplicationType = 97
	ApplicationType_DESKTOPWIN_BETA    ApplicationType = 98
	ApplicationType_DESKTOPWIN_ALPHA   ApplicationType = 99
	ApplicationType_DESKTOPMAC         ApplicationType = 112
	ApplicationType_DESKTOPMAC_RC      ApplicationType = 113
	ApplicationType_DESKTOPMAC_BETA    ApplicationType = 114
	ApplicationType_DESKTOPMAC_ALPHA   ApplicationType = 115
	ApplicationType_CHANNELGW          ApplicationType = 128
	ApplicationType_CHANNELGW_RC       ApplicationType = 129
	ApplicationType_CHANNELGW_BETA     ApplicationType = 130
	ApplicationType_CHANNELGW_ALPHA    ApplicationType = 213
	ApplicationType_CHANNELCP          ApplicationType = 144
	ApplicationType_CHANNELCP_RC       ApplicationType = 145
	ApplicationType_CHANNELCP_BETA     ApplicationType = 146
	ApplicationType_CHANNELCP_ALPHA    ApplicationType = 147
	ApplicationType_WINPHONE           ApplicationType = 160
	ApplicationType_WINPHONE_RC        ApplicationType = 161
	ApplicationType_WINPHONE_BETA      ApplicationType = 162
	ApplicationType_WINPHONE_ALPHA     ApplicationType = 163
	ApplicationType_BLACKBERRY         ApplicationType = 176
	ApplicationType_BLACKBERRY_RC      ApplicationType = 177
	ApplicationType_BLACKBERRY_BETA    ApplicationType = 178
	ApplicationType_BLACKBERRY_ALPHA   ApplicationType = 179
	ApplicationType_WINMETRO           ApplicationType = 192
	ApplicationType_WINMETRO_RC        ApplicationType = 193
	ApplicationType_WINMETRO_BETA      ApplicationType = 194
	ApplicationType_WINMETRO_ALPHA     ApplicationType = 195
	ApplicationType_S40                ApplicationType = 208
	ApplicationType_S40_RC             ApplicationType = 209
	ApplicationType_S40_BETA           ApplicationType = 210
	ApplicationType_S40_ALPHA          ApplicationType = 211
	ApplicationType_CHRONO             ApplicationType = 224
	ApplicationType_CHRONO_RC          ApplicationType = 225
	ApplicationType_CHRONO_BETA        ApplicationType = 226
	ApplicationType_CHRONO_ALPHA       ApplicationType = 227
	ApplicationType_TIZEN              ApplicationType = 256
	ApplicationType_TIZEN_RC           ApplicationType = 257
	ApplicationType_TIZEN_BETA         ApplicationType = 258
	ApplicationType_TIZEN_ALPHA        ApplicationType = 259
	ApplicationType_VIRTUAL            ApplicationType = 272
	ApplicationType_FIREFOXOS          ApplicationType = 288
	ApplicationType_FIREFOXOS_RC       ApplicationType = 289
	ApplicationType_FIREFOXOS_BETA     ApplicationType = 290
	ApplicationType_FIREFOXOS_ALPHA    ApplicationType = 291
	ApplicationType_IOSIPAD            ApplicationType = 304
	ApplicationType_IOSIPAD_RC         ApplicationType = 305
	ApplicationType_IOSIPAD_BETA       ApplicationType = 306
	ApplicationType_IOSIPAD_ALPHA      ApplicationType = 307
	ApplicationType_BIZIOS             ApplicationType = 320
	ApplicationType_BIZIOS_RC          ApplicationType = 321
	ApplicationType_BIZIOS_BETA        ApplicationType = 322
	ApplicationType_BIZIOS_ALPHA       ApplicationType = 323
	ApplicationType_BIZANDROID         ApplicationType = 336
	ApplicationType_BIZANDROID_RC      ApplicationType = 337
	ApplicationType_BIZANDROID_BETA    ApplicationType = 338
	ApplicationType_BIZANDROID_ALPHA   ApplicationType = 339
	ApplicationType_BIZBOT             ApplicationType = 352
	ApplicationType_BIZBOT_RC          ApplicationType = 353
	ApplicationType_BIZBOT_BETA        ApplicationType = 354
	ApplicationType_BIZBOT_ALPHA       ApplicationType = 355
	ApplicationType_CHROMEOS           ApplicationType = 368
	ApplicationType_CHROMEOS_RC        ApplicationType = 369
	ApplicationType_CHROMEOS_BETA      ApplicationType = 370
	ApplicationType_CHROMEOS_ALPHA     ApplicationType = 371
	ApplicationType_ANDROIDLITE        ApplicationType = 384
	ApplicationType_ANDROIDLITE_RC     ApplicationType = 385
	ApplicationType_ANDROIDLITE_BETA   ApplicationType = 386
	ApplicationType_ANDROIDLITE_ALPHA  ApplicationType = 387
	ApplicationType_WIN10              ApplicationType = 400
	ApplicationType_WIN10_RC           ApplicationType = 401
	ApplicationType_WIN10_BETA         ApplicationType = 402
	ApplicationType_WIN10_ALPHA        ApplicationType = 403
	ApplicationType_BIZWEB             ApplicationType = 416
	ApplicationType_BIZWEB_RC          ApplicationType = 417
	ApplicationType_BIZWEB_BETA        ApplicationType = 418
	ApplicationType_BIZWEB_ALPHA       ApplicationType = 419
	ApplicationType_DUMMYPRIMARY       ApplicationType = 432
	ApplicationType_DUMMYPRIMARY_RC    ApplicationType = 433
	ApplicationType_DUMMYPRIMARY_BETA  ApplicationType = 434
	ApplicationType_DUMMYPRIMARY_ALPHA ApplicationType = 435
	ApplicationType_SQUARE             ApplicationType = 448
	ApplicationType_SQUARE_RC          ApplicationType = 449
	ApplicationType_SQUARE_BETA        ApplicationType = 450
	ApplicationType_SQUARE_ALPHA       ApplicationType = 451
	ApplicationType_INTERNAL           ApplicationType = 464
	ApplicationType_INTERNAL_RC        ApplicationType = 465
	ApplicationType_INTERNAL_BETA      ApplicationType = 466
	ApplicationType_INTERNAL_ALPHA     ApplicationType = 467
	ApplicationType_CLOVAFRIENDS       ApplicationType = 480
	ApplicationType_CLOVAFRIENDS_RC    ApplicationType = 481
	ApplicationType_CLOVAFRIENDS_BETA  ApplicationType = 482
	ApplicationType_CLOVAFRIENDS_ALPHA ApplicationType = 483
	ApplicationType_WATCHOS            ApplicationType = 496
	ApplicationType_WATCHOS_RC         ApplicationType = 497
	ApplicationType_WATCHOS_BETA       ApplicationType = 498
	ApplicationType_WATCHOS_ALPHA      ApplicationType = 499
)

func (p ApplicationType) String() string {
	switch p {
	case ApplicationType_IOS:
		return "IOS"
	case ApplicationType_IOS_RC:
		return "IOS_RC"
	case ApplicationType_IOS_BETA:
		return "IOS_BETA"
	case ApplicationType_IOS_ALPHA:
		return "IOS_ALPHA"
	case ApplicationType_ANDROID:
		return "ANDROID"
	case ApplicationType_ANDROID_RC:
		return "ANDROID_RC"
	case ApplicationType_ANDROID_BETA:
		return "ANDROID_BETA"
	case ApplicationType_ANDROID_ALPHA:
		return "ANDROID_ALPHA"
	case ApplicationType_WAP:
		return "WAP"
	case ApplicationType_WAP_RC:
		return "WAP_RC"
	case ApplicationType_WAP_BETA:
		return "WAP_BETA"
	case ApplicationType_WAP_ALPHA:
		return "WAP_ALPHA"
	case ApplicationType_BOT:
		return "BOT"
	case ApplicationType_BOT_RC:
		return "BOT_RC"
	case ApplicationType_BOT_BETA:
		return "BOT_BETA"
	case ApplicationType_BOT_ALPHA:
		return "BOT_ALPHA"
	case ApplicationType_WEB:
		return "WEB"
	case ApplicationType_WEB_RC:
		return "WEB_RC"
	case ApplicationType_WEB_BETA:
		return "WEB_BETA"
	case ApplicationType_WEB_ALPHA:
		return "WEB_ALPHA"
	case ApplicationType_DESKTOPWIN:
		return "DESKTOPWIN"
	case ApplicationType_DESKTOPWIN_RC:
		return "DESKTOPWIN_RC"
	case ApplicationType_DESKTOPWIN_BETA:
		return "DESKTOPWIN_BETA"
	case ApplicationType_DESKTOPWIN_ALPHA:
		return "DESKTOPWIN_ALPHA"
	case ApplicationType_DESKTOPMAC:
		return "DESKTOPMAC"
	case ApplicationType_DESKTOPMAC_RC:
		return "DESKTOPMAC_RC"
	case ApplicationType_DESKTOPMAC_BETA:
		return "DESKTOPMAC_BETA"
	case ApplicationType_DESKTOPMAC_ALPHA:
		return "DESKTOPMAC_ALPHA"
	case ApplicationType_CHANNELGW:
		return "CHANNELGW"
	case ApplicationType_CHANNELGW_RC:
		return "CHANNELGW_RC"
	case ApplicationType_CHANNELGW_BETA:
		return "CHANNELGW_BETA"
	case ApplicationType_CHANNELGW_ALPHA:
		return "CHANNELGW_ALPHA"
	case ApplicationType_CHANNELCP:
		return "CHANNELCP"
	case ApplicationType_CHANNELCP_RC:
		return "CHANNELCP_RC"
	case ApplicationType_CHANNELCP_BETA:
		return "CHANNELCP_BETA"
	case ApplicationType_CHANNELCP_ALPHA:
		return "CHANNELCP_ALPHA"
	case ApplicationType_WINPHONE:
		return "WINPHONE"
	case ApplicationType_WINPHONE_RC:
		return "WINPHONE_RC"
	case ApplicationType_WINPHONE_BETA:
		return "WINPHONE_BETA"
	case ApplicationType_WINPHONE_ALPHA:
		return "WINPHONE_ALPHA"
	case ApplicationType_BLACKBERRY:
		return "BLACKBERRY"
	case ApplicationType_BLACKBERRY_RC:
		return "BLACKBERRY_RC"
	case ApplicationType_BLACKBERRY_BETA:
		return "BLACKBERRY_BETA"
	case ApplicationType_BLACKBERRY_ALPHA:
		return "BLACKBERRY_ALPHA"
	case ApplicationType_WINMETRO:
		return "WINMETRO"
	case ApplicationType_WINMETRO_RC:
		return "WINMETRO_RC"
	case ApplicationType_WINMETRO_BETA:
		return "WINMETRO_BETA"
	case ApplicationType_WINMETRO_ALPHA:
		return "WINMETRO_ALPHA"
	case ApplicationType_S40:
		return "S40"
	case ApplicationType_S40_RC:
		return "S40_RC"
	case ApplicationType_S40_BETA:
		return "S40_BETA"
	case ApplicationType_S40_ALPHA:
		return "S40_ALPHA"
	case ApplicationType_CHRONO:
		return "CHRONO"
	case ApplicationType_CHRONO_RC:
		return "CHRONO_RC"
	case ApplicationType_CHRONO_BETA:
		return "CHRONO_BETA"
	case ApplicationType_CHRONO_ALPHA:
		return "CHRONO_ALPHA"
	case ApplicationType_TIZEN:
		return "TIZEN"
	case ApplicationType_TIZEN_RC:
		return "TIZEN_RC"
	case ApplicationType_TIZEN_BETA:
		return "TIZEN_BETA"
	case ApplicationType_TIZEN_ALPHA:
		return "TIZEN_ALPHA"
	case ApplicationType_VIRTUAL:
		return "VIRTUAL"
	case ApplicationType_FIREFOXOS:
		return "FIREFOXOS"
	case ApplicationType_FIREFOXOS_RC:
		return "FIREFOXOS_RC"
	case ApplicationType_FIREFOXOS_BETA:
		return "FIREFOXOS_BETA"
	case ApplicationType_FIREFOXOS_ALPHA:
		return "FIREFOXOS_ALPHA"
	case ApplicationType_IOSIPAD:
		return "IOSIPAD"
	case ApplicationType_IOSIPAD_RC:
		return "IOSIPAD_RC"
	case ApplicationType_IOSIPAD_BETA:
		return "IOSIPAD_BETA"
	case ApplicationType_IOSIPAD_ALPHA:
		return "IOSIPAD_ALPHA"
	case ApplicationType_BIZIOS:
		return "BIZIOS"
	case ApplicationType_BIZIOS_RC:
		return "BIZIOS_RC"
	case ApplicationType_BIZIOS_BETA:
		return "BIZIOS_BETA"
	case ApplicationType_BIZIOS_ALPHA:
		return "BIZIOS_ALPHA"
	case ApplicationType_BIZANDROID:
		return "BIZANDROID"
	case ApplicationType_BIZANDROID_RC:
		return "BIZANDROID_RC"
	case ApplicationType_BIZANDROID_BETA:
		return "BIZANDROID_BETA"
	case ApplicationType_BIZANDROID_ALPHA:
		return "BIZANDROID_ALPHA"
	case ApplicationType_BIZBOT:
		return "BIZBOT"
	case ApplicationType_BIZBOT_RC:
		return "BIZBOT_RC"
	case ApplicationType_BIZBOT_BETA:
		return "BIZBOT_BETA"
	case ApplicationType_BIZBOT_ALPHA:
		return "BIZBOT_ALPHA"
	case ApplicationType_CHROMEOS:
		return "CHROMEOS"
	case ApplicationType_CHROMEOS_RC:
		return "CHROMEOS_RC"
	case ApplicationType_CHROMEOS_BETA:
		return "CHROMEOS_BETA"
	case ApplicationType_CHROMEOS_ALPHA:
		return "CHROMEOS_ALPHA"
	case ApplicationType_ANDROIDLITE:
		return "ANDROIDLITE"
	case ApplicationType_ANDROIDLITE_RC:
		return "ANDROIDLITE_RC"
	case ApplicationType_ANDROIDLITE_BETA:
		return "ANDROIDLITE_BETA"
	case ApplicationType_ANDROIDLITE_ALPHA:
		return "ANDROIDLITE_ALPHA"
	case ApplicationType_WIN10:
		return "WIN10"
	case ApplicationType_WIN10_RC:
		return "WIN10_RC"
	case ApplicationType_WIN10_BETA:
		return "WIN10_BETA"
	case ApplicationType_WIN10_ALPHA:
		return "WIN10_ALPHA"
	case ApplicationType_BIZWEB:
		return "BIZWEB"
	case ApplicationType_BIZWEB_RC:
		return "BIZWEB_RC"
	case ApplicationType_BIZWEB_BETA:
		return "BIZWEB_BETA"
	case ApplicationType_BIZWEB_ALPHA:
		return "BIZWEB_ALPHA"
	case ApplicationType_DUMMYPRIMARY:
		return "DUMMYPRIMARY"
	case ApplicationType_DUMMYPRIMARY_RC:
		return "DUMMYPRIMARY_RC"
	case ApplicationType_DUMMYPRIMARY_BETA:
		return "DUMMYPRIMARY_BETA"
	case ApplicationType_DUMMYPRIMARY_ALPHA:
		return "DUMMYPRIMARY_ALPHA"
	case ApplicationType_SQUARE:
		return "SQUARE"
	case ApplicationType_SQUARE_RC:
		return "SQUARE_RC"
	case ApplicationType_SQUARE_BETA:
		return "SQUARE_BETA"
	case ApplicationType_SQUARE_ALPHA:
		return "SQUARE_ALPHA"
	case ApplicationType_INTERNAL:
		return "INTERNAL"
	case ApplicationType_INTERNAL_RC:
		return "INTERNAL_RC"
	case ApplicationType_INTERNAL_BETA:
		return "INTERNAL_BETA"
	case ApplicationType_INTERNAL_ALPHA:
		return "INTERNAL_ALPHA"
	case ApplicationType_CLOVAFRIENDS:
		return "CLOVAFRIENDS"
	case ApplicationType_CLOVAFRIENDS_RC:
		return "CLOVAFRIENDS_RC"
	case ApplicationType_CLOVAFRIENDS_BETA:
		return "CLOVAFRIENDS_BETA"
	case ApplicationType_CLOVAFRIENDS_ALPHA:
		return "CLOVAFRIENDS_ALPHA"
	case ApplicationType_WATCHOS:
		return "WATCHOS"
	case ApplicationType_WATCHOS_RC:
		return "WATCHOS_RC"
	case ApplicationType_WATCHOS_BETA:
		return "WATCHOS_BETA"
	case ApplicationType_WATCHOS_ALPHA:
		return "WATCHOS_ALPHA"
	}
	return "<UNSET>"
}

func ApplicationTypeFromString(s string) (ApplicationType, error) {
	switch s {
	case "IOS":
		return ApplicationType_IOS, nil
	case "IOS_RC":
		return ApplicationType_IOS_RC, nil
	case "IOS_BETA":
		return ApplicationType_IOS_BETA, nil
	case "IOS_ALPHA":
		return ApplicationType_IOS_ALPHA, nil
	case "ANDROID":
		return ApplicationType_ANDROID, nil
	case "ANDROID_RC":
		return ApplicationType_ANDROID_RC, nil
	case "ANDROID_BETA":
		return ApplicationType_ANDROID_BETA, nil
	case "ANDROID_ALPHA":
		return ApplicationType_ANDROID_ALPHA, nil
	case "WAP":
		return ApplicationType_WAP, nil
	case "WAP_RC":
		return ApplicationType_WAP_RC, nil
	case "WAP_BETA":
		return ApplicationType_WAP_BETA, nil
	case "WAP_ALPHA":
		return ApplicationType_WAP_ALPHA, nil
	case "BOT":
		return ApplicationType_BOT, nil
	case "BOT_RC":
		return ApplicationType_BOT_RC, nil
	case "BOT_BETA":
		return ApplicationType_BOT_BETA, nil
	case "BOT_ALPHA":
		return ApplicationType_BOT_ALPHA, nil
	case "WEB":
		return ApplicationType_WEB, nil
	case "WEB_RC":
		return ApplicationType_WEB_RC, nil
	case "WEB_BETA":
		return ApplicationType_WEB_BETA, nil
	case "WEB_ALPHA":
		return ApplicationType_WEB_ALPHA, nil
	case "DESKTOPWIN":
		return ApplicationType_DESKTOPWIN, nil
	case "DESKTOPWIN_RC":
		return ApplicationType_DESKTOPWIN_RC, nil
	case "DESKTOPWIN_BETA":
		return ApplicationType_DESKTOPWIN_BETA, nil
	case "DESKTOPWIN_ALPHA":
		return ApplicationType_DESKTOPWIN_ALPHA, nil
	case "DESKTOPMAC":
		return ApplicationType_DESKTOPMAC, nil
	case "DESKTOPMAC_RC":
		return ApplicationType_DESKTOPMAC_RC, nil
	case "DESKTOPMAC_BETA":
		return ApplicationType_DESKTOPMAC_BETA, nil
	case "DESKTOPMAC_ALPHA":
		return ApplicationType_DESKTOPMAC_ALPHA, nil
	case "CHANNELGW":
		return ApplicationType_CHANNELGW, nil
	case "CHANNELGW_RC":
		return ApplicationType_CHANNELGW_RC, nil
	case "CHANNELGW_BETA":
		return ApplicationType_CHANNELGW_BETA, nil
	case "CHANNELGW_ALPHA":
		return ApplicationType_CHANNELGW_ALPHA, nil
	case "CHANNELCP":
		return ApplicationType_CHANNELCP, nil
	case "CHANNELCP_RC":
		return ApplicationType_CHANNELCP_RC, nil
	case "CHANNELCP_BETA":
		return ApplicationType_CHANNELCP_BETA, nil
	case "CHANNELCP_ALPHA":
		return ApplicationType_CHANNELCP_ALPHA, nil
	case "WINPHONE":
		return ApplicationType_WINPHONE, nil
	case "WINPHONE_RC":
		return ApplicationType_WINPHONE_RC, nil
	case "WINPHONE_BETA":
		return ApplicationType_WINPHONE_BETA, nil
	case "WINPHONE_ALPHA":
		return ApplicationType_WINPHONE_ALPHA, nil
	case "BLACKBERRY":
		return ApplicationType_BLACKBERRY, nil
	case "BLACKBERRY_RC":
		return ApplicationType_BLACKBERRY_RC, nil
	case "BLACKBERRY_BETA":
		return ApplicationType_BLACKBERRY_BETA, nil
	case "BLACKBERRY_ALPHA":
		return ApplicationType_BLACKBERRY_ALPHA, nil
	case "WINMETRO":
		return ApplicationType_WINMETRO, nil
	case "WINMETRO_RC":
		return ApplicationType_WINMETRO_RC, nil
	case "WINMETRO_BETA":
		return ApplicationType_WINMETRO_BETA, nil
	case "WINMETRO_ALPHA":
		return ApplicationType_WINMETRO_ALPHA, nil
	case "S40":
		return ApplicationType_S40, nil
	case "S40_RC":
		return ApplicationType_S40_RC, nil
	case "S40_BETA":
		return ApplicationType_S40_BETA, nil
	case "S40_ALPHA":
		return ApplicationType_S40_ALPHA, nil
	case "CHRONO":
		return ApplicationType_CHRONO, nil
	case "CHRONO_RC":
		return ApplicationType_CHRONO_RC, nil
	case "CHRONO_BETA":
		return ApplicationType_CHRONO_BETA, nil
	case "CHRONO_ALPHA":
		return ApplicationType_CHRONO_ALPHA, nil
	case "TIZEN":
		return ApplicationType_TIZEN, nil
	case "TIZEN_RC":
		return ApplicationType_TIZEN_RC, nil
	case "TIZEN_BETA":
		return ApplicationType_TIZEN_BETA, nil
	case "TIZEN_ALPHA":
		return ApplicationType_TIZEN_ALPHA, nil
	case "VIRTUAL":
		return ApplicationType_VIRTUAL, nil
	case "FIREFOXOS":
		return ApplicationType_FIREFOXOS, nil
	case "FIREFOXOS_RC":
		return ApplicationType_FIREFOXOS_RC, nil
	case "FIREFOXOS_BETA":
		return ApplicationType_FIREFOXOS_BETA, nil
	case "FIREFOXOS_ALPHA":
		return ApplicationType_FIREFOXOS_ALPHA, nil
	case "IOSIPAD":
		return ApplicationType_IOSIPAD, nil
	case "IOSIPAD_RC":
		return ApplicationType_IOSIPAD_RC, nil
	case "IOSIPAD_BETA":
		return ApplicationType_IOSIPAD_BETA, nil
	case "IOSIPAD_ALPHA":
		return ApplicationType_IOSIPAD_ALPHA, nil
	case "BIZIOS":
		return ApplicationType_BIZIOS, nil
	case "BIZIOS_RC":
		return ApplicationType_BIZIOS_RC, nil
	case "BIZIOS_BETA":
		return ApplicationType_BIZIOS_BETA, nil
	case "BIZIOS_ALPHA":
		return ApplicationType_BIZIOS_ALPHA, nil
	case "BIZANDROID":
		return ApplicationType_BIZANDROID, nil
	case "BIZANDROID_RC":
		return ApplicationType_BIZANDROID_RC, nil
	case "BIZANDROID_BETA":
		return ApplicationType_BIZANDROID_BETA, nil
	case "BIZANDROID_ALPHA":
		return ApplicationType_BIZANDROID_ALPHA, nil
	case "BIZBOT":
		return ApplicationType_BIZBOT, nil
	case "BIZBOT_RC":
		return ApplicationType_BIZBOT_RC, nil
	case "BIZBOT_BETA":
		return ApplicationType_BIZBOT_BETA, nil
	case "BIZBOT_ALPHA":
		return ApplicationType_BIZBOT_ALPHA, nil
	case "CHROMEOS":
		return ApplicationType_CHROMEOS, nil
	case "CHROMEOS_RC":
		return ApplicationType_CHROMEOS_RC, nil
	case "CHROMEOS_BETA":
		return ApplicationType_CHROMEOS_BETA, nil
	case "CHROMEOS_ALPHA":
		return ApplicationType_CHROMEOS_ALPHA, nil
	case "ANDROIDLITE":
		return ApplicationType_ANDROIDLITE, nil
	case "ANDROIDLITE_RC":
		return ApplicationType_ANDROIDLITE_RC, nil
	case "ANDROIDLITE_BETA":
		return ApplicationType_ANDROIDLITE_BETA, nil
	case "ANDROIDLITE_ALPHA":
		return ApplicationType_ANDROIDLITE_ALPHA, nil
	case "WIN10":
		return ApplicationType_WIN10, nil
	case "WIN10_RC":
		return ApplicationType_WIN10_RC, nil
	case "WIN10_BETA":
		return ApplicationType_WIN10_BETA, nil
	case "WIN10_ALPHA":
		return ApplicationType_WIN10_ALPHA, nil
	case "BIZWEB":
		return ApplicationType_BIZWEB, nil
	case "BIZWEB_RC":
		return ApplicationType_BIZWEB_RC, nil
	case "BIZWEB_BETA":
		return ApplicationType_BIZWEB_BETA, nil
	case "BIZWEB_ALPHA":
		return ApplicationType_BIZWEB_ALPHA, nil
	case "DUMMYPRIMARY":
		return ApplicationType_DUMMYPRIMARY, nil
	case "DUMMYPRIMARY_RC":
		return ApplicationType_DUMMYPRIMARY_RC, nil
	case "DUMMYPRIMARY_BETA":
		return ApplicationType_DUMMYPRIMARY_BETA, nil
	case "DUMMYPRIMARY_ALPHA":
		return ApplicationType_DUMMYPRIMARY_ALPHA, nil
	case "SQUARE":
		return ApplicationType_SQUARE, nil
	case "SQUARE_RC":
		return ApplicationType_SQUARE_RC, nil
	case "SQUARE_BETA":
		return ApplicationType_SQUARE_BETA, nil
	case "SQUARE_ALPHA":
		return ApplicationType_SQUARE_ALPHA, nil
	case "INTERNAL":
		return ApplicationType_INTERNAL, nil
	case "INTERNAL_RC":
		return ApplicationType_INTERNAL_RC, nil
	case "INTERNAL_BETA":
		return ApplicationType_INTERNAL_BETA, nil
	case "INTERNAL_ALPHA":
		return ApplicationType_INTERNAL_ALPHA, nil
	case "CLOVAFRIENDS":
		return ApplicationType_CLOVAFRIENDS, nil
	case "CLOVAFRIENDS_RC":
		return ApplicationType_CLOVAFRIENDS_RC, nil
	case "CLOVAFRIENDS_BETA":
		return ApplicationType_CLOVAFRIENDS_BETA, nil
	case "CLOVAFRIENDS_ALPHA":
		return ApplicationType_CLOVAFRIENDS_ALPHA, nil
	case "WATCHOS":
		return ApplicationType_WATCHOS, nil
	case "WATCHOS_RC":
		return ApplicationType_WATCHOS_RC, nil
	case "WATCHOS_BETA":
		return ApplicationType_WATCHOS_BETA, nil
	case "WATCHOS_ALPHA":
		return ApplicationType_WATCHOS_ALPHA, nil
	}
	return ApplicationType(0), fmt.Errorf("not a valid ApplicationType string")
}

func ApplicationTypePtr(v ApplicationType) *ApplicationType { return &v }

func (p ApplicationType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ApplicationType) UnmarshalText(text []byte) error {
	q, err := ApplicationTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *ApplicationType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = ApplicationType(v)
	return nil
}

func (p *ApplicationType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type CarrierCode int64

const (
	CarrierCode_NOT_SPECIFIED    CarrierCode = 0
	CarrierCode_JP_DOCOMO        CarrierCode = 1
	CarrierCode_JP_AU            CarrierCode = 2
	CarrierCode_JP_SOFTBANK      CarrierCode = 3
	CarrierCode_KR_SKT           CarrierCode = 17
	CarrierCode_KR_KT            CarrierCode = 18
	CarrierCode_KR_LGT           CarrierCode = 19
	CarrierCode_JP_DOCOMO_LINE   CarrierCode = 4
	CarrierCode_JP_SOFTBANK_LINE CarrierCode = 5
	CarrierCode_JP_AU_LINE       CarrierCode = 6
)

func (p CarrierCode) String() string {
	switch p {
	case CarrierCode_NOT_SPECIFIED:
		return "NOT_SPECIFIED"
	case CarrierCode_JP_DOCOMO:
		return "JP_DOCOMO"
	case CarrierCode_JP_AU:
		return "JP_AU"
	case CarrierCode_JP_SOFTBANK:
		return "JP_SOFTBANK"
	case CarrierCode_KR_SKT:
		return "KR_SKT"
	case CarrierCode_KR_KT:
		return "KR_KT"
	case CarrierCode_KR_LGT:
		return "KR_LGT"
	case CarrierCode_JP_DOCOMO_LINE:
		return "JP_DOCOMO_LINE"
	case CarrierCode_JP_SOFTBANK_LINE:
		return "JP_SOFTBANK_LINE"
	case CarrierCode_JP_AU_LINE:
		return "JP_AU_LINE"
	}
	return "<UNSET>"
}

func CarrierCodeFromString(s string) (CarrierCode, error) {
	switch s {
	case "NOT_SPECIFIED":
		return CarrierCode_NOT_SPECIFIED, nil
	case "JP_DOCOMO":
		return CarrierCode_JP_DOCOMO, nil
	case "JP_AU":
		return CarrierCode_JP_AU, nil
	case "JP_SOFTBANK":
		return CarrierCode_JP_SOFTBANK, nil
	case "KR_SKT":
		return CarrierCode_KR_SKT, nil
	case "KR_KT":
		return CarrierCode_KR_KT, nil
	case "KR_LGT":
		return CarrierCode_KR_LGT, nil
	case "JP_DOCOMO_LINE":
		return CarrierCode_JP_DOCOMO_LINE, nil
	case "JP_SOFTBANK_LINE":
		return CarrierCode_JP_SOFTBANK_LINE, nil
	case "JP_AU_LINE":
		return CarrierCode_JP_AU_LINE, nil
	}
	return CarrierCode(0), fmt.Errorf("not a valid CarrierCode string")
}

func CarrierCodePtr(v CarrierCode) *CarrierCode { return &v }

func (p CarrierCode) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *CarrierCode) UnmarshalText(text []byte) error {
	q, err := CarrierCodeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *CarrierCode) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = CarrierCode(v)
	return nil
}

func (p *CarrierCode) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type MediaType int64

const (
	MediaType_AUDIO MediaType = 1
	MediaType_VIDEO MediaType = 2
	MediaType_LIVE  MediaType = 3
)

func (p MediaType) String() string {
	switch p {
	case MediaType_AUDIO:
		return "AUDIO"
	case MediaType_VIDEO:
		return "VIDEO"
	case MediaType_LIVE:
		return "LIVE"
	}
	return "<UNSET>"
}

func MediaTypeFromString(s string) (MediaType, error) {
	switch s {
	case "AUDIO":
		return MediaType_AUDIO, nil
	case "VIDEO":
		return MediaType_VIDEO, nil
	case "LIVE":
		return MediaType_LIVE, nil
	}
	return MediaType(0), fmt.Errorf("not a valid MediaType string")
}

func MediaTypePtr(v MediaType) *MediaType { return &v }

func (p MediaType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *MediaType) UnmarshalText(text []byte) error {
	q, err := MediaTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *MediaType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = MediaType(v)
	return nil
}

func (p *MediaType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ContentType int64

const (
	ContentType_NONE             ContentType = 0
	ContentType_IMAGE            ContentType = 1
	ContentType_VIDEO            ContentType = 2
	ContentType_AUDIO            ContentType = 3
	ContentType_HTML             ContentType = 4
	ContentType_PDF              ContentType = 5
	ContentType_CALL             ContentType = 6
	ContentType_STICKER          ContentType = 7
	ContentType_PRESENCE         ContentType = 8
	ContentType_GIFT             ContentType = 9
	ContentType_GROUPBOARD       ContentType = 10
	ContentType_APPLINK          ContentType = 11
	ContentType_LINK             ContentType = 12
	ContentType_CONTACT          ContentType = 13
	ContentType_FILE             ContentType = 14
	ContentType_LOCATION         ContentType = 15
	ContentType_POSTNOTIFICATION ContentType = 16
	ContentType_RICH             ContentType = 17
	ContentType_CHATEVENT        ContentType = 18
	ContentType_MUSIC            ContentType = 19
	ContentType_PAYMENT          ContentType = 20
	ContentType_EXTIMAGE         ContentType = 21
	ContentType_FLEX             ContentType = 22
)

func (p ContentType) String() string {
	switch p {
	case ContentType_NONE:
		return "NONE"
	case ContentType_IMAGE:
		return "IMAGE"
	case ContentType_VIDEO:
		return "VIDEO"
	case ContentType_AUDIO:
		return "AUDIO"
	case ContentType_HTML:
		return "HTML"
	case ContentType_PDF:
		return "PDF"
	case ContentType_CALL:
		return "CALL"
	case ContentType_STICKER:
		return "STICKER"
	case ContentType_PRESENCE:
		return "PRESENCE"
	case ContentType_GIFT:
		return "GIFT"
	case ContentType_GROUPBOARD:
		return "GROUPBOARD"
	case ContentType_APPLINK:
		return "APPLINK"
	case ContentType_LINK:
		return "LINK"
	case ContentType_CONTACT:
		return "CONTACT"
	case ContentType_FILE:
		return "FILE"
	case ContentType_LOCATION:
		return "LOCATION"
	case ContentType_POSTNOTIFICATION:
		return "POSTNOTIFICATION"
	case ContentType_RICH:
		return "RICH"
	case ContentType_CHATEVENT:
		return "CHATEVENT"
	case ContentType_MUSIC:
		return "MUSIC"
	case ContentType_PAYMENT:
		return "PAYMENT"
	case ContentType_EXTIMAGE:
		return "EXTIMAGE"
	case ContentType_FLEX:
		return "FLEX"
	}
	return "<UNSET>"
}

func ContentTypeFromString(s string) (ContentType, error) {
	switch s {
	case "NONE":
		return ContentType_NONE, nil
	case "IMAGE":
		return ContentType_IMAGE, nil
	case "VIDEO":
		return ContentType_VIDEO, nil
	case "AUDIO":
		return ContentType_AUDIO, nil
	case "HTML":
		return ContentType_HTML, nil
	case "PDF":
		return ContentType_PDF, nil
	case "CALL":
		return ContentType_CALL, nil
	case "STICKER":
		return ContentType_STICKER, nil
	case "PRESENCE":
		return ContentType_PRESENCE, nil
	case "GIFT":
		return ContentType_GIFT, nil
	case "GROUPBOARD":
		return ContentType_GROUPBOARD, nil
	case "APPLINK":
		return ContentType_APPLINK, nil
	case "LINK":
		return ContentType_LINK, nil
	case "CONTACT":
		return ContentType_CONTACT, nil
	case "FILE":
		return ContentType_FILE, nil
	case "LOCATION":
		return ContentType_LOCATION, nil
	case "POSTNOTIFICATION":
		return ContentType_POSTNOTIFICATION, nil
	case "RICH":
		return ContentType_RICH, nil
	case "CHATEVENT":
		return ContentType_CHATEVENT, nil
	case "MUSIC":
		return ContentType_MUSIC, nil
	case "PAYMENT":
		return ContentType_PAYMENT, nil
	case "EXTIMAGE":
		return ContentType_EXTIMAGE, nil
	case "FLEX":
		return ContentType_FLEX, nil
	}
	return ContentType(0), fmt.Errorf("not a valid ContentType string")
}

func ContentTypePtr(v ContentType) *ContentType { return &v }

func (p ContentType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ContentType) UnmarshalText(text []byte) error {
	q, err := ContentTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *ContentType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = ContentType(v)
	return nil
}

func (p *ContentType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type UpdateNotificationType int64

const (
	UpdateNotificationType_APPLE_APNS      UpdateNotificationType = 1
	UpdateNotificationType_GOOGLE_C2DM     UpdateNotificationType = 2
	UpdateNotificationType_NHN_NNI         UpdateNotificationType = 3
	UpdateNotificationType_SKT_AOM         UpdateNotificationType = 4
	UpdateNotificationType_MS_MPNS         UpdateNotificationType = 5
	UpdateNotificationType_RIM_BIS         UpdateNotificationType = 6
	UpdateNotificationType_GOOGLE_GCM      UpdateNotificationType = 7
	UpdateNotificationType_NOKIA_NNAPI     UpdateNotificationType = 8
	UpdateNotificationType_TIZEN           UpdateNotificationType = 9
	UpdateNotificationType_MOZILLA_SIMPLE  UpdateNotificationType = 10
	UpdateNotificationType_LINE_BOT        UpdateNotificationType = 17
	UpdateNotificationType_LINE_WAP        UpdateNotificationType = 18
	UpdateNotificationType_APPLE_APNS_VOIP UpdateNotificationType = 19
	UpdateNotificationType_MS_WNS          UpdateNotificationType = 20
	UpdateNotificationType_GOOGLE_FCM      UpdateNotificationType = 21
	UpdateNotificationType_CLOVA           UpdateNotificationType = 22
	UpdateNotificationType_CLOVA_VOIP      UpdateNotificationType = 23
	UpdateNotificationType_HUAWEI_HCM      UpdateNotificationType = 24
)

func (p UpdateNotificationType) String() string {
	switch p {
	case UpdateNotificationType_APPLE_APNS:
		return "APPLE_APNS"
	case UpdateNotificationType_GOOGLE_C2DM:
		return "GOOGLE_C2DM"
	case UpdateNotificationType_NHN_NNI:
		return "NHN_NNI"
	case UpdateNotificationType_SKT_AOM:
		return "SKT_AOM"
	case UpdateNotificationType_MS_MPNS:
		return "MS_MPNS"
	case UpdateNotificationType_RIM_BIS:
		return "RIM_BIS"
	case UpdateNotificationType_GOOGLE_GCM:
		return "GOOGLE_GCM"
	case UpdateNotificationType_NOKIA_NNAPI:
		return "NOKIA_NNAPI"
	case UpdateNotificationType_TIZEN:
		return "TIZEN"
	case UpdateNotificationType_MOZILLA_SIMPLE:
		return "MOZILLA_SIMPLE"
	case UpdateNotificationType_LINE_BOT:
		return "LINE_BOT"
	case UpdateNotificationType_LINE_WAP:
		return "LINE_WAP"
	case UpdateNotificationType_APPLE_APNS_VOIP:
		return "APPLE_APNS_VOIP"
	case UpdateNotificationType_MS_WNS:
		return "MS_WNS"
	case UpdateNotificationType_GOOGLE_FCM:
		return "GOOGLE_FCM"
	case UpdateNotificationType_CLOVA:
		return "CLOVA"
	case UpdateNotificationType_CLOVA_VOIP:
		return "CLOVA_VOIP"
	case UpdateNotificationType_HUAWEI_HCM:
		return "HUAWEI_HCM"
	}
	return "<UNSET>"
}

func UpdateNotificationTypeFromString(s string) (UpdateNotificationType, error) {
	switch s {
	case "APPLE_APNS":
		return UpdateNotificationType_APPLE_APNS, nil
	case "GOOGLE_C2DM":
		return UpdateNotificationType_GOOGLE_C2DM, nil
	case "NHN_NNI":
		return UpdateNotificationType_NHN_NNI, nil
	case "SKT_AOM":
		return UpdateNotificationType_SKT_AOM, nil
	case "MS_MPNS":
		return UpdateNotificationType_MS_MPNS, nil
	case "RIM_BIS":
		return UpdateNotificationType_RIM_BIS, nil
	case "GOOGLE_GCM":
		return UpdateNotificationType_GOOGLE_GCM, nil
	case "NOKIA_NNAPI":
		return UpdateNotificationType_NOKIA_NNAPI, nil
	case "TIZEN":
		return UpdateNotificationType_TIZEN, nil
	case "MOZILLA_SIMPLE":
		return UpdateNotificationType_MOZILLA_SIMPLE, nil
	case "LINE_BOT":
		return UpdateNotificationType_LINE_BOT, nil
	case "LINE_WAP":
		return UpdateNotificationType_LINE_WAP, nil
	case "APPLE_APNS_VOIP":
		return UpdateNotificationType_APPLE_APNS_VOIP, nil
	case "MS_WNS":
		return UpdateNotificationType_MS_WNS, nil
	case "GOOGLE_FCM":
		return UpdateNotificationType_GOOGLE_FCM, nil
	case "CLOVA":
		return UpdateNotificationType_CLOVA, nil
	case "CLOVA_VOIP":
		return UpdateNotificationType_CLOVA_VOIP, nil
	case "HUAWEI_HCM":
		return UpdateNotificationType_HUAWEI_HCM, nil
	}
	return UpdateNotificationType(0), fmt.Errorf("not a valid UpdateNotificationType string")
}

func UpdateNotificationTypePtr(v UpdateNotificationType) *UpdateNotificationType { return &v }

func (p UpdateNotificationType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *UpdateNotificationType) UnmarshalText(text []byte) error {
	q, err := UpdateNotificationTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *UpdateNotificationType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = UpdateNotificationType(v)
	return nil
}

func (p *UpdateNotificationType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type VerificationResult_ int64

const (
	VerificationResult__FAILED                            VerificationResult_ = 0
	VerificationResult__OK_NOT_REGISTERED_YET             VerificationResult_ = 1
	VerificationResult__OK_REGISTERED_WITH_SAME_DEVICE    VerificationResult_ = 2
	VerificationResult__OK_REGISTERED_WITH_ANOTHER_DEVICE VerificationResult_ = 3
)

func (p VerificationResult_) String() string {
	switch p {
	case VerificationResult__FAILED:
		return "FAILED"
	case VerificationResult__OK_NOT_REGISTERED_YET:
		return "OK_NOT_REGISTERED_YET"
	case VerificationResult__OK_REGISTERED_WITH_SAME_DEVICE:
		return "OK_REGISTERED_WITH_SAME_DEVICE"
	case VerificationResult__OK_REGISTERED_WITH_ANOTHER_DEVICE:
		return "OK_REGISTERED_WITH_ANOTHER_DEVICE"
	}
	return "<UNSET>"
}

func VerificationResult_FromString(s string) (VerificationResult_, error) {
	switch s {
	case "FAILED":
		return VerificationResult__FAILED, nil
	case "OK_NOT_REGISTERED_YET":
		return VerificationResult__OK_NOT_REGISTERED_YET, nil
	case "OK_REGISTERED_WITH_SAME_DEVICE":
		return VerificationResult__OK_REGISTERED_WITH_SAME_DEVICE, nil
	case "OK_REGISTERED_WITH_ANOTHER_DEVICE":
		return VerificationResult__OK_REGISTERED_WITH_ANOTHER_DEVICE, nil
	}
	return VerificationResult_(0), fmt.Errorf("not a valid VerificationResult_ string")
}

func VerificationResult_Ptr(v VerificationResult_) *VerificationResult_ { return &v }

func (p VerificationResult_) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *VerificationResult_) UnmarshalText(text []byte) error {
	q, err := VerificationResult_FromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *VerificationResult_) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = VerificationResult_(v)
	return nil
}

func (p *VerificationResult_) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ToType int64

const (
	ToType_USER          ToType = 0
	ToType_ROOM          ToType = 1
	ToType_GROUP         ToType = 2
	ToType_SQUARE        ToType = 3
	ToType_SQUARE_CHAT   ToType = 4
	ToType_SQUARE_MEMBER ToType = 5
	ToType_BOT           ToType = 6
)

func (p ToType) String() string {
	switch p {
	case ToType_USER:
		return "USER"
	case ToType_ROOM:
		return "ROOM"
	case ToType_GROUP:
		return "GROUP"
	case ToType_SQUARE:
		return "SQUARE"
	case ToType_SQUARE_CHAT:
		return "SQUARE_CHAT"
	case ToType_SQUARE_MEMBER:
		return "SQUARE_MEMBER"
	case ToType_BOT:
		return "BOT"
	}
	return "<UNSET>"
}

func ToTypeFromString(s string) (ToType, error) {
	switch s {
	case "USER":
		return ToType_USER, nil
	case "ROOM":
		return ToType_ROOM, nil
	case "GROUP":
		return ToType_GROUP, nil
	case "SQUARE":
		return ToType_SQUARE, nil
	case "SQUARE_CHAT":
		return ToType_SQUARE_CHAT, nil
	case "SQUARE_MEMBER":
		return ToType_SQUARE_MEMBER, nil
	case "BOT":
		return ToType_BOT, nil
	}
	return ToType(0), fmt.Errorf("not a valid ToType string")
}

func ToTypePtr(v ToType) *ToType { return &v }

func (p ToType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ToType) UnmarshalText(text []byte) error {
	q, err := ToTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *ToType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = ToType(v)
	return nil
}

func (p *ToType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type LocationProvider int64

const (
	LocationProvider_GOOGLE     LocationProvider = 0
	LocationProvider_BAIDU      LocationProvider = 1
	LocationProvider_FOURSQUARE LocationProvider = 2
)

func (p LocationProvider) String() string {
	switch p {
	case LocationProvider_GOOGLE:
		return "GOOGLE"
	case LocationProvider_BAIDU:
		return "BAIDU"
	case LocationProvider_FOURSQUARE:
		return "FOURSQUARE"
	}
	return "<UNSET>"
}

func LocationProviderFromString(s string) (LocationProvider, error) {
	switch s {
	case "GOOGLE":
		return LocationProvider_GOOGLE, nil
	case "BAIDU":
		return LocationProvider_BAIDU, nil
	case "FOURSQUARE":
		return LocationProvider_FOURSQUARE, nil
	}
	return LocationProvider(0), fmt.Errorf("not a valid LocationProvider string")
}

func LocationProviderPtr(v LocationProvider) *LocationProvider { return &v }

func (p LocationProvider) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *LocationProvider) UnmarshalText(text []byte) error {
	q, err := LocationProviderFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *LocationProvider) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = LocationProvider(v)
	return nil
}

func (p *LocationProvider) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type MessageRelationType int64

const (
	MessageRelationType_FORWARD     MessageRelationType = 0
	MessageRelationType_AUTO_REPLY  MessageRelationType = 1
	MessageRelationType_SUBORDINATE MessageRelationType = 2
	MessageRelationType_REPLY       MessageRelationType = 3
)

func (p MessageRelationType) String() string {
	switch p {
	case MessageRelationType_FORWARD:
		return "FORWARD"
	case MessageRelationType_AUTO_REPLY:
		return "AUTO_REPLY"
	case MessageRelationType_SUBORDINATE:
		return "SUBORDINATE"
	case MessageRelationType_REPLY:
		return "REPLY"
	}
	return "<UNSET>"
}

func MessageRelationTypeFromString(s string) (MessageRelationType, error) {
	switch s {
	case "FORWARD":
		return MessageRelationType_FORWARD, nil
	case "AUTO_REPLY":
		return MessageRelationType_AUTO_REPLY, nil
	case "SUBORDINATE":
		return MessageRelationType_SUBORDINATE, nil
	case "REPLY":
		return MessageRelationType_REPLY, nil
	}
	return MessageRelationType(0), fmt.Errorf("not a valid MessageRelationType string")
}

func MessageRelationTypePtr(v MessageRelationType) *MessageRelationType { return &v }

func (p MessageRelationType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *MessageRelationType) UnmarshalText(text []byte) error {
	q, err := MessageRelationTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *MessageRelationType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = MessageRelationType(v)
	return nil
}

func (p *MessageRelationType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type RelatedMessageServiceCode int64

const (
	RelatedMessageServiceCode_UNKNOWN RelatedMessageServiceCode = 0
	RelatedMessageServiceCode_TALK    RelatedMessageServiceCode = 1
	RelatedMessageServiceCode_SQUARE  RelatedMessageServiceCode = 2
)

func (p RelatedMessageServiceCode) String() string {
	switch p {
	case RelatedMessageServiceCode_UNKNOWN:
		return "UNKNOWN"
	case RelatedMessageServiceCode_TALK:
		return "TALK"
	case RelatedMessageServiceCode_SQUARE:
		return "SQUARE"
	}
	return "<UNSET>"
}

func RelatedMessageServiceCodeFromString(s string) (RelatedMessageServiceCode, error) {
	switch s {
	case "UNKNOWN":
		return RelatedMessageServiceCode_UNKNOWN, nil
	case "TALK":
		return RelatedMessageServiceCode_TALK, nil
	case "SQUARE":
		return RelatedMessageServiceCode_SQUARE, nil
	}
	return RelatedMessageServiceCode(0), fmt.Errorf("not a valid RelatedMessageServiceCode string")
}

func RelatedMessageServiceCodePtr(v RelatedMessageServiceCode) *RelatedMessageServiceCode { return &v }

func (p RelatedMessageServiceCode) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *RelatedMessageServiceCode) UnmarshalText(text []byte) error {
	q, err := RelatedMessageServiceCodeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *RelatedMessageServiceCode) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = RelatedMessageServiceCode(v)
	return nil
}

func (p *RelatedMessageServiceCode) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type AppExtensionType int64

const (
	AppExtensionType_SIRI             AppExtensionType = 1
	AppExtensionType_GOOGLE_ASSISTANT AppExtensionType = 2
)

func (p AppExtensionType) String() string {
	switch p {
	case AppExtensionType_SIRI:
		return "SIRI"
	case AppExtensionType_GOOGLE_ASSISTANT:
		return "GOOGLE_ASSISTANT"
	}
	return "<UNSET>"
}

func AppExtensionTypeFromString(s string) (AppExtensionType, error) {
	switch s {
	case "SIRI":
		return AppExtensionType_SIRI, nil
	case "GOOGLE_ASSISTANT":
		return AppExtensionType_GOOGLE_ASSISTANT, nil
	}
	return AppExtensionType(0), fmt.Errorf("not a valid AppExtensionType string")
}

func AppExtensionTypePtr(v AppExtensionType) *AppExtensionType { return &v }

func (p AppExtensionType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *AppExtensionType) UnmarshalText(text []byte) error {
	q, err := AppExtensionTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *AppExtensionType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = AppExtensionType(v)
	return nil
}

func (p *AppExtensionType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ProtoCall int64

const (
	ProtoCall_STANDARD  ProtoCall = 1
	ProtoCall_CONSTELLA ProtoCall = 2
)

func (p ProtoCall) String() string {
	switch p {
	case ProtoCall_STANDARD:
		return "STANDARD"
	case ProtoCall_CONSTELLA:
		return "CONSTELLA"
	}
	return "<UNSET>"
}

func ProtoCallFromString(s string) (ProtoCall, error) {
	switch s {
	case "STANDARD":
		return ProtoCall_STANDARD, nil
	case "CONSTELLA":
		return ProtoCall_CONSTELLA, nil
	}
	return ProtoCall(0), fmt.Errorf("not a valid ProtoCall string")
}

func ProtoCallPtr(v ProtoCall) *ProtoCall { return &v }

func (p ProtoCall) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ProtoCall) UnmarshalText(text []byte) error {
	q, err := ProtoCallFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *ProtoCall) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = ProtoCall(v)
	return nil
}

func (p *ProtoCall) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type Attr int64

const (
	Attr_ALL                    Attr = 511
	Attr_EMAIL                  Attr = 1
	Attr_DISPLAY_NAME           Attr = 2
	Attr_PHONETIC_NAME          Attr = 4
	Attr_PICTURE                Attr = 8
	Attr_STATUS_MESSAGE         Attr = 16
	Attr_ALLOW_SEARCH_BY_USERID Attr = 32
	Attr_ALLOW_SEARCH_BY_EMAIL  Attr = 64
	Attr_BUDDY_STATUS           Attr = 128
	Attr_MUSIC_PROFILE          Attr = 256
	Attr_AVATAR_PROFILE         Attr = 512
)

func (p Attr) String() string {
	switch p {
	case Attr_ALL:
		return "ALL"
	case Attr_EMAIL:
		return "EMAIL"
	case Attr_DISPLAY_NAME:
		return "DISPLAY_NAME"
	case Attr_PHONETIC_NAME:
		return "PHONETIC_NAME"
	case Attr_PICTURE:
		return "PICTURE"
	case Attr_STATUS_MESSAGE:
		return "STATUS_MESSAGE"
	case Attr_ALLOW_SEARCH_BY_USERID:
		return "ALLOW_SEARCH_BY_USERID"
	case Attr_ALLOW_SEARCH_BY_EMAIL:
		return "ALLOW_SEARCH_BY_EMAIL"
	case Attr_BUDDY_STATUS:
		return "BUDDY_STATUS"
	case Attr_MUSIC_PROFILE:
		return "MUSIC_PROFILE"
	case Attr_AVATAR_PROFILE:
		return "AVATAR_PROFILE"
	}
	return "<UNSET>"
}

func AttrFromString(s string) (Attr, error) {
	switch s {
	case "ALL":
		return Attr_ALL, nil
	case "EMAIL":
		return Attr_EMAIL, nil
	case "DISPLAY_NAME":
		return Attr_DISPLAY_NAME, nil
	case "PHONETIC_NAME":
		return Attr_PHONETIC_NAME, nil
	case "PICTURE":
		return Attr_PICTURE, nil
	case "STATUS_MESSAGE":
		return Attr_STATUS_MESSAGE, nil
	case "ALLOW_SEARCH_BY_USERID":
		return Attr_ALLOW_SEARCH_BY_USERID, nil
	case "ALLOW_SEARCH_BY_EMAIL":
		return Attr_ALLOW_SEARCH_BY_EMAIL, nil
	case "BUDDY_STATUS":
		return Attr_BUDDY_STATUS, nil
	case "MUSIC_PROFILE":
		return Attr_MUSIC_PROFILE, nil
	case "AVATAR_PROFILE":
		return Attr_AVATAR_PROFILE, nil
	}
	return Attr(0), fmt.Errorf("not a valid Attr string")
}

func AttrPtr(v Attr) *Attr { return &v }

func (p Attr) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *Attr) UnmarshalText(text []byte) error {
	q, err := AttrFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *Attr) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = Attr(v)
	return nil
}

func (p *Attr) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type FeatureType int64

const (
	FeatureType_OBS_VIDEO         FeatureType = 1
	FeatureType_OBS_GENERAL       FeatureType = 2
	FeatureType_OBS_RINGBACK_TONE FeatureType = 3
)

func (p FeatureType) String() string {
	switch p {
	case FeatureType_OBS_VIDEO:
		return "OBS_VIDEO"
	case FeatureType_OBS_GENERAL:
		return "OBS_GENERAL"
	case FeatureType_OBS_RINGBACK_TONE:
		return "OBS_RINGBACK_TONE"
	}
	return "<UNSET>"
}

func FeatureTypeFromString(s string) (FeatureType, error) {
	switch s {
	case "OBS_VIDEO":
		return FeatureType_OBS_VIDEO, nil
	case "OBS_GENERAL":
		return FeatureType_OBS_GENERAL, nil
	case "OBS_RINGBACK_TONE":
		return FeatureType_OBS_RINGBACK_TONE, nil
	}
	return FeatureType(0), fmt.Errorf("not a valid FeatureType string")
}

func FeatureTypePtr(v FeatureType) *FeatureType { return &v }

func (p FeatureType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *FeatureType) UnmarshalText(text []byte) error {
	q, err := FeatureTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *FeatureType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = FeatureType(v)
	return nil
}

func (p *FeatureType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type OpType int64

const (
	OpType_END_OF_OPERATION                  OpType = 0
	OpType_UPDATE_PROFILE                    OpType = 1
	OpType_UPDATE_SETTINGS                   OpType = 36
	OpType_NOTIFIED_UPDATE_PROFILE           OpType = 2
	OpType_REGISTER_USERID                   OpType = 3
	OpType_ADD_CONTACT                       OpType = 4
	OpType_NOTIFIED_ADD_CONTACT              OpType = 5
	OpType_BLOCK_CONTACT                     OpType = 6
	OpType_UNBLOCK_CONTACT                   OpType = 7
	OpType_NOTIFIED_RECOMMEND_CONTACT        OpType = 8
	OpType_CREATE_GROUP                      OpType = 9
	OpType_UPDATE_GROUP                      OpType = 10
	OpType_NOTIFIED_UPDATE_GROUP             OpType = 11
	OpType_INVITE_INTO_GROUP                 OpType = 12
	OpType_NOTIFIED_INVITE_INTO_GROUP        OpType = 13
	OpType_CANCEL_INVITATION_GROUP           OpType = 31
	OpType_NOTIFIED_CANCEL_INVITATION_GROUP  OpType = 32
	OpType_LEAVE_GROUP                       OpType = 14
	OpType_NOTIFIED_LEAVE_GROUP              OpType = 15
	OpType_ACCEPT_GROUP_INVITATION           OpType = 16
	OpType_NOTIFIED_ACCEPT_GROUP_INVITATION  OpType = 17
	OpType_REJECT_GROUP_INVITATION           OpType = 34
	OpType_NOTIFIED_REJECT_GROUP_INVITATION  OpType = 35
	OpType_KICKOUT__fromGROUP                OpType = 18
	OpType_NOTIFIED_KICKOUT__fromGROUP       OpType = 19
	OpType_CREATE_ROOM                       OpType = 20
	OpType_INVITE_INTO_ROOM                  OpType = 21
	OpType_NOTIFIED_INVITE_INTO_ROOM         OpType = 22
	OpType_LEAVE_ROOM                        OpType = 23
	OpType_NOTIFIED_LEAVE_ROOM               OpType = 24
	OpType_SEND_MESSAGE                      OpType = 25
	OpType_RECEIVE_MESSAGE                   OpType = 26
	OpType_SEND_MESSAGE_RECEIPT              OpType = 27
	OpType_RECEIVE_MESSAGE_RECEIPT           OpType = 28
	OpType_SEND_CONTENT_RECEIPT              OpType = 29
	OpType_SEND_CHAT_CHECKED                 OpType = 40
	OpType_SEND_CHAT_REMOVED                 OpType = 41
	OpType_RECEIVE_ANNOUNCEMENT              OpType = 30
	OpType_INVITE_VIA_EMAIL                  OpType = 38
	OpType_NOTIFIED_REGISTER_USER            OpType = 37
	OpType_NOTIFIED_UNREGISTER_USER          OpType = 33
	OpType_NOTIFIED_REQUEST_RECOVERY         OpType = 39
	OpType_NOTIFIED_FORCE_SYNC               OpType = 42
	OpType_SEND_CONTENT                      OpType = 43
	OpType_SEND_MESSAGE_MYHOME               OpType = 44
	OpType_NOTIFIED_UPDATE_CONTENT_PREVIEW   OpType = 45
	OpType_REMOVE_ALL_MESSAGES               OpType = 46
	OpType_NOTIFIED_UPDATE_PURCHASES         OpType = 47
	OpType_DUMMY                             OpType = 48
	OpType_UPDATE_CONTACT                    OpType = 49
	OpType_NOTIFIED_RECEIVED_CALL            OpType = 50
	OpType_CANCEL_CALL                       OpType = 51
	OpType_NOTIFIED_REDIRECT                 OpType = 52
	OpType_NOTIFIED_CHANNEL_SYNC             OpType = 53
	OpType_FAILED_SEND_MESSAGE               OpType = 54
	OpType_NOTIFIED_READ_MESSAGE             OpType = 55
	OpType_FAILED_EMAIL_CONFIRMATION         OpType = 56
	OpType_NOTIFIED_PUSH_NOTICENTER_ITEM     OpType = 59
	OpType_NOTIFIED_CHAT_CONTENT             OpType = 58
	OpType_NOTIFIED_JOIN_CHAT                OpType = 60
	OpType_NOTIFIED_LEAVE_CHAT               OpType = 61
	OpType_NOTIFIED_TYPING                   OpType = 62
	OpType_FRIEND_REQUEST_ACCEPTED           OpType = 63
	OpType_DESTROY_MESSAGE                   OpType = 64
	OpType_NOTIFIED_DESTROY_MESSAGE          OpType = 65
	OpType_UPDATE_PUBLICKEYCHAIN             OpType = 66
	OpType_NOTIFIED_UPDATE_PUBLICKEYCHAIN    OpType = 67
	OpType_NOTIFIED_BLOCK_CONTACT            OpType = 68
	OpType_NOTIFIED_UNBLOCK_CONTACT          OpType = 69
	OpType_UPDATE_GROUPPREFERENCE            OpType = 70
	OpType_NOTIFIED_PAYMENT_EVENT            OpType = 71
	OpType_REGISTER_E2EE_PUBLICKEY           OpType = 72
	OpType_NOTIFIED_E2EE_KEY_EXCHANGE_REQ    OpType = 73
	OpType_NOTIFIED_E2EE_KEY_EXCHANGE_RESP   OpType = 74
	OpType_NOTIFIED_E2EE_MESSAGE_RESEND_REQ  OpType = 75
	OpType_NOTIFIED_E2EE_MESSAGE_RESEND_RESP OpType = 76
	OpType_NOTIFIED_E2EE_KEY_UPDATE          OpType = 77
	OpType_NOTIFIED_BUDDY_UPDATE_PROFILE     OpType = 78
	OpType_NOTIFIED_UPDATE_LINEAT_TABS       OpType = 79
	OpType_UPDATE_ROOM                       OpType = 80
	OpType_NOTIFIED_BEACON_DETECTED          OpType = 81
	OpType_UPDATE_EXTENDED_PROFILE           OpType = 82
	OpType_ADD_FOLLOW                        OpType = 83
	OpType_NOTIFIED_ADD_FOLLOW               OpType = 84
	OpType_DELETE_FOLLOW                     OpType = 85
	OpType_NOTIFIED_DELETE_FOLLOW            OpType = 86
	OpType_UPDATE_TIMELINE_SETTINGS          OpType = 87
	OpType_NOTIFIED_FRIEND_REQUEST           OpType = 88
	OpType_UPDATE_RINGBACK_TONE              OpType = 89
	OpType_NOTIFIED_POSTBACK                 OpType = 90
	OpType_RECEIVE_READ_WATERMARK            OpType = 91
	OpType_NOTIFIED_MESSAGE_DELIVERED        OpType = 92
	OpType_NOTIFIED_UPDATE_CHAT_BAR          OpType = 93
	OpType_NOTIFIED_CHATAPP_INSTALLED        OpType = 94
	OpType_NOTIFIED_CHATAPP_UPDATED          OpType = 95
	OpType_NOTIFIED_CHATAPP_NEW_MARK         OpType = 96
	OpType_NOTIFIED_CHATAPP_DELETED          OpType = 97
	OpType_NOTIFIED_CHATAPP_SYNC             OpType = 98
	OpType_NOTIFIED_UPDATE_MESSAGE           OpType = 99
	OpType_UPDATE_CHATROOMBGM                OpType = 100
	OpType_NOTIFIED_UPDATE_CHATROOMBGM       OpType = 101
	OpType_UPDATE_RINGTONE                   OpType = 102
	OpType_UPDATE_USER_SETTINGS              OpType = 118
	OpType_NOTIFIED_UPDATE_STATUS_BAR        OpType = 119
	OpType_CREATE_CHAT                       OpType = 120
	OpType_UPDATE_CHAT                       OpType = 121
	OpType_NOTIFIED_UPDATE_CHAT              OpType = 122
	OpType_INVITE_INTO_CHAT                  OpType = 123
	OpType_NOTIFIED_INVITE_INTO_CHAT         OpType = 124
	OpType_CANCEL_CHAT_INVITATION            OpType = 125
	OpType_NOTIFIED_CANCEL_CHAT_INVITATION   OpType = 126
	OpType_DELETE_SELF__fromCHAT             OpType = 127
	OpType_NOTIFIED_DELETE_SELF__fromCHAT    OpType = 128
	OpType_ACCEPT_CHAT_INVITATION            OpType = 129
	OpType_NOTIFIED_ACCEPT_CHAT_INVITATION   OpType = 130
	OpType_REJECT_CHAT_INVITATION            OpType = 131
	OpType_DELETE_OTHER__fromCHAT            OpType = 132
	OpType_NOTIFIED_DELETE_OTHER__fromCHAT   OpType = 133
)

func (p OpType) String() string {
	switch p {
	case OpType_END_OF_OPERATION:
		return "END_OF_OPERATION"
	case OpType_UPDATE_PROFILE:
		return "UPDATE_PROFILE"
	case OpType_UPDATE_SETTINGS:
		return "UPDATE_SETTINGS"
	case OpType_NOTIFIED_UPDATE_PROFILE:
		return "NOTIFIED_UPDATE_PROFILE"
	case OpType_REGISTER_USERID:
		return "REGISTER_USERID"
	case OpType_ADD_CONTACT:
		return "ADD_CONTACT"
	case OpType_NOTIFIED_ADD_CONTACT:
		return "NOTIFIED_ADD_CONTACT"
	case OpType_BLOCK_CONTACT:
		return "BLOCK_CONTACT"
	case OpType_UNBLOCK_CONTACT:
		return "UNBLOCK_CONTACT"
	case OpType_NOTIFIED_RECOMMEND_CONTACT:
		return "NOTIFIED_RECOMMEND_CONTACT"
	case OpType_CREATE_GROUP:
		return "CREATE_GROUP"
	case OpType_UPDATE_GROUP:
		return "UPDATE_GROUP"
	case OpType_NOTIFIED_UPDATE_GROUP:
		return "NOTIFIED_UPDATE_GROUP"
	case OpType_INVITE_INTO_GROUP:
		return "INVITE_INTO_GROUP"
	case OpType_NOTIFIED_INVITE_INTO_GROUP:
		return "NOTIFIED_INVITE_INTO_GROUP"
	case OpType_CANCEL_INVITATION_GROUP:
		return "CANCEL_INVITATION_GROUP"
	case OpType_NOTIFIED_CANCEL_INVITATION_GROUP:
		return "NOTIFIED_CANCEL_INVITATION_GROUP"
	case OpType_LEAVE_GROUP:
		return "LEAVE_GROUP"
	case OpType_NOTIFIED_LEAVE_GROUP:
		return "NOTIFIED_LEAVE_GROUP"
	case OpType_ACCEPT_GROUP_INVITATION:
		return "ACCEPT_GROUP_INVITATION"
	case OpType_NOTIFIED_ACCEPT_GROUP_INVITATION:
		return "NOTIFIED_ACCEPT_GROUP_INVITATION"
	case OpType_REJECT_GROUP_INVITATION:
		return "REJECT_GROUP_INVITATION"
	case OpType_NOTIFIED_REJECT_GROUP_INVITATION:
		return "NOTIFIED_REJECT_GROUP_INVITATION"
	case OpType_KICKOUT__fromGROUP:
		return "KICKOUT__fromGROUP"
	case OpType_NOTIFIED_KICKOUT__fromGROUP:
		return "NOTIFIED_KICKOUT__fromGROUP"
	case OpType_CREATE_ROOM:
		return "CREATE_ROOM"
	case OpType_INVITE_INTO_ROOM:
		return "INVITE_INTO_ROOM"
	case OpType_NOTIFIED_INVITE_INTO_ROOM:
		return "NOTIFIED_INVITE_INTO_ROOM"
	case OpType_LEAVE_ROOM:
		return "LEAVE_ROOM"
	case OpType_NOTIFIED_LEAVE_ROOM:
		return "NOTIFIED_LEAVE_ROOM"
	case OpType_SEND_MESSAGE:
		return "SEND_MESSAGE"
	case OpType_RECEIVE_MESSAGE:
		return "RECEIVE_MESSAGE"
	case OpType_SEND_MESSAGE_RECEIPT:
		return "SEND_MESSAGE_RECEIPT"
	case OpType_RECEIVE_MESSAGE_RECEIPT:
		return "RECEIVE_MESSAGE_RECEIPT"
	case OpType_SEND_CONTENT_RECEIPT:
		return "SEND_CONTENT_RECEIPT"
	case OpType_SEND_CHAT_CHECKED:
		return "SEND_CHAT_CHECKED"
	case OpType_SEND_CHAT_REMOVED:
		return "SEND_CHAT_REMOVED"
	case OpType_RECEIVE_ANNOUNCEMENT:
		return "RECEIVE_ANNOUNCEMENT"
	case OpType_INVITE_VIA_EMAIL:
		return "INVITE_VIA_EMAIL"
	case OpType_NOTIFIED_REGISTER_USER:
		return "NOTIFIED_REGISTER_USER"
	case OpType_NOTIFIED_UNREGISTER_USER:
		return "NOTIFIED_UNREGISTER_USER"
	case OpType_NOTIFIED_REQUEST_RECOVERY:
		return "NOTIFIED_REQUEST_RECOVERY"
	case OpType_NOTIFIED_FORCE_SYNC:
		return "NOTIFIED_FORCE_SYNC"
	case OpType_SEND_CONTENT:
		return "SEND_CONTENT"
	case OpType_SEND_MESSAGE_MYHOME:
		return "SEND_MESSAGE_MYHOME"
	case OpType_NOTIFIED_UPDATE_CONTENT_PREVIEW:
		return "NOTIFIED_UPDATE_CONTENT_PREVIEW"
	case OpType_REMOVE_ALL_MESSAGES:
		return "REMOVE_ALL_MESSAGES"
	case OpType_NOTIFIED_UPDATE_PURCHASES:
		return "NOTIFIED_UPDATE_PURCHASES"
	case OpType_DUMMY:
		return "DUMMY"
	case OpType_UPDATE_CONTACT:
		return "UPDATE_CONTACT"
	case OpType_NOTIFIED_RECEIVED_CALL:
		return "NOTIFIED_RECEIVED_CALL"
	case OpType_CANCEL_CALL:
		return "CANCEL_CALL"
	case OpType_NOTIFIED_REDIRECT:
		return "NOTIFIED_REDIRECT"
	case OpType_NOTIFIED_CHANNEL_SYNC:
		return "NOTIFIED_CHANNEL_SYNC"
	case OpType_FAILED_SEND_MESSAGE:
		return "FAILED_SEND_MESSAGE"
	case OpType_NOTIFIED_READ_MESSAGE:
		return "NOTIFIED_READ_MESSAGE"
	case OpType_FAILED_EMAIL_CONFIRMATION:
		return "FAILED_EMAIL_CONFIRMATION"
	case OpType_NOTIFIED_PUSH_NOTICENTER_ITEM:
		return "NOTIFIED_PUSH_NOTICENTER_ITEM"
	case OpType_NOTIFIED_CHAT_CONTENT:
		return "NOTIFIED_CHAT_CONTENT"
	case OpType_NOTIFIED_JOIN_CHAT:
		return "NOTIFIED_JOIN_CHAT"
	case OpType_NOTIFIED_LEAVE_CHAT:
		return "NOTIFIED_LEAVE_CHAT"
	case OpType_NOTIFIED_TYPING:
		return "NOTIFIED_TYPING"
	case OpType_FRIEND_REQUEST_ACCEPTED:
		return "FRIEND_REQUEST_ACCEPTED"
	case OpType_DESTROY_MESSAGE:
		return "DESTROY_MESSAGE"
	case OpType_NOTIFIED_DESTROY_MESSAGE:
		return "NOTIFIED_DESTROY_MESSAGE"
	case OpType_UPDATE_PUBLICKEYCHAIN:
		return "UPDATE_PUBLICKEYCHAIN"
	case OpType_NOTIFIED_UPDATE_PUBLICKEYCHAIN:
		return "NOTIFIED_UPDATE_PUBLICKEYCHAIN"
	case OpType_NOTIFIED_BLOCK_CONTACT:
		return "NOTIFIED_BLOCK_CONTACT"
	case OpType_NOTIFIED_UNBLOCK_CONTACT:
		return "NOTIFIED_UNBLOCK_CONTACT"
	case OpType_UPDATE_GROUPPREFERENCE:
		return "UPDATE_GROUPPREFERENCE"
	case OpType_NOTIFIED_PAYMENT_EVENT:
		return "NOTIFIED_PAYMENT_EVENT"
	case OpType_REGISTER_E2EE_PUBLICKEY:
		return "REGISTER_E2EE_PUBLICKEY"
	case OpType_NOTIFIED_E2EE_KEY_EXCHANGE_REQ:
		return "NOTIFIED_E2EE_KEY_EXCHANGE_REQ"
	case OpType_NOTIFIED_E2EE_KEY_EXCHANGE_RESP:
		return "NOTIFIED_E2EE_KEY_EXCHANGE_RESP"
	case OpType_NOTIFIED_E2EE_MESSAGE_RESEND_REQ:
		return "NOTIFIED_E2EE_MESSAGE_RESEND_REQ"
	case OpType_NOTIFIED_E2EE_MESSAGE_RESEND_RESP:
		return "NOTIFIED_E2EE_MESSAGE_RESEND_RESP"
	case OpType_NOTIFIED_E2EE_KEY_UPDATE:
		return "NOTIFIED_E2EE_KEY_UPDATE"
	case OpType_NOTIFIED_BUDDY_UPDATE_PROFILE:
		return "NOTIFIED_BUDDY_UPDATE_PROFILE"
	case OpType_NOTIFIED_UPDATE_LINEAT_TABS:
		return "NOTIFIED_UPDATE_LINEAT_TABS"
	case OpType_UPDATE_ROOM:
		return "UPDATE_ROOM"
	case OpType_NOTIFIED_BEACON_DETECTED:
		return "NOTIFIED_BEACON_DETECTED"
	case OpType_UPDATE_EXTENDED_PROFILE:
		return "UPDATE_EXTENDED_PROFILE"
	case OpType_ADD_FOLLOW:
		return "ADD_FOLLOW"
	case OpType_NOTIFIED_ADD_FOLLOW:
		return "NOTIFIED_ADD_FOLLOW"
	case OpType_DELETE_FOLLOW:
		return "DELETE_FOLLOW"
	case OpType_NOTIFIED_DELETE_FOLLOW:
		return "NOTIFIED_DELETE_FOLLOW"
	case OpType_UPDATE_TIMELINE_SETTINGS:
		return "UPDATE_TIMELINE_SETTINGS"
	case OpType_NOTIFIED_FRIEND_REQUEST:
		return "NOTIFIED_FRIEND_REQUEST"
	case OpType_UPDATE_RINGBACK_TONE:
		return "UPDATE_RINGBACK_TONE"
	case OpType_NOTIFIED_POSTBACK:
		return "NOTIFIED_POSTBACK"
	case OpType_RECEIVE_READ_WATERMARK:
		return "RECEIVE_READ_WATERMARK"
	case OpType_NOTIFIED_MESSAGE_DELIVERED:
		return "NOTIFIED_MESSAGE_DELIVERED"
	case OpType_NOTIFIED_UPDATE_CHAT_BAR:
		return "NOTIFIED_UPDATE_CHAT_BAR"
	case OpType_NOTIFIED_CHATAPP_INSTALLED:
		return "NOTIFIED_CHATAPP_INSTALLED"
	case OpType_NOTIFIED_CHATAPP_UPDATED:
		return "NOTIFIED_CHATAPP_UPDATED"
	case OpType_NOTIFIED_CHATAPP_NEW_MARK:
		return "NOTIFIED_CHATAPP_NEW_MARK"
	case OpType_NOTIFIED_CHATAPP_DELETED:
		return "NOTIFIED_CHATAPP_DELETED"
	case OpType_NOTIFIED_CHATAPP_SYNC:
		return "NOTIFIED_CHATAPP_SYNC"
	case OpType_NOTIFIED_UPDATE_MESSAGE:
		return "NOTIFIED_UPDATE_MESSAGE"
	case OpType_UPDATE_CHATROOMBGM:
		return "UPDATE_CHATROOMBGM"
	case OpType_NOTIFIED_UPDATE_CHATROOMBGM:
		return "NOTIFIED_UPDATE_CHATROOMBGM"
	case OpType_UPDATE_RINGTONE:
		return "UPDATE_RINGTONE"
	case OpType_UPDATE_USER_SETTINGS:
		return "UPDATE_USER_SETTINGS"
	case OpType_NOTIFIED_UPDATE_STATUS_BAR:
		return "NOTIFIED_UPDATE_STATUS_BAR"
	case OpType_CREATE_CHAT:
		return "CREATE_CHAT"
	case OpType_UPDATE_CHAT:
		return "UPDATE_CHAT"
	case OpType_NOTIFIED_UPDATE_CHAT:
		return "NOTIFIED_UPDATE_CHAT"
	case OpType_INVITE_INTO_CHAT:
		return "INVITE_INTO_CHAT"
	case OpType_NOTIFIED_INVITE_INTO_CHAT:
		return "NOTIFIED_INVITE_INTO_CHAT"
	case OpType_CANCEL_CHAT_INVITATION:
		return "CANCEL_CHAT_INVITATION"
	case OpType_NOTIFIED_CANCEL_CHAT_INVITATION:
		return "NOTIFIED_CANCEL_CHAT_INVITATION"
	case OpType_DELETE_SELF__fromCHAT:
		return "DELETE_SELF__fromCHAT"
	case OpType_NOTIFIED_DELETE_SELF__fromCHAT:
		return "NOTIFIED_DELETE_SELF__fromCHAT"
	case OpType_ACCEPT_CHAT_INVITATION:
		return "ACCEPT_CHAT_INVITATION"
	case OpType_NOTIFIED_ACCEPT_CHAT_INVITATION:
		return "NOTIFIED_ACCEPT_CHAT_INVITATION"
	case OpType_REJECT_CHAT_INVITATION:
		return "REJECT_CHAT_INVITATION"
	case OpType_DELETE_OTHER__fromCHAT:
		return "DELETE_OTHER__fromCHAT"
	case OpType_NOTIFIED_DELETE_OTHER__fromCHAT:
		return "NOTIFIED_DELETE_OTHER__fromCHAT"
	}
	return "<UNSET>"
}

func OpTypeFromString(s string) (OpType, error) {
	switch s {
	case "END_OF_OPERATION":
		return OpType_END_OF_OPERATION, nil
	case "UPDATE_PROFILE":
		return OpType_UPDATE_PROFILE, nil
	case "UPDATE_SETTINGS":
		return OpType_UPDATE_SETTINGS, nil
	case "NOTIFIED_UPDATE_PROFILE":
		return OpType_NOTIFIED_UPDATE_PROFILE, nil
	case "REGISTER_USERID":
		return OpType_REGISTER_USERID, nil
	case "ADD_CONTACT":
		return OpType_ADD_CONTACT, nil
	case "NOTIFIED_ADD_CONTACT":
		return OpType_NOTIFIED_ADD_CONTACT, nil
	case "BLOCK_CONTACT":
		return OpType_BLOCK_CONTACT, nil
	case "UNBLOCK_CONTACT":
		return OpType_UNBLOCK_CONTACT, nil
	case "NOTIFIED_RECOMMEND_CONTACT":
		return OpType_NOTIFIED_RECOMMEND_CONTACT, nil
	case "CREATE_GROUP":
		return OpType_CREATE_GROUP, nil
	case "UPDATE_GROUP":
		return OpType_UPDATE_GROUP, nil
	case "NOTIFIED_UPDATE_GROUP":
		return OpType_NOTIFIED_UPDATE_GROUP, nil
	case "INVITE_INTO_GROUP":
		return OpType_INVITE_INTO_GROUP, nil
	case "NOTIFIED_INVITE_INTO_GROUP":
		return OpType_NOTIFIED_INVITE_INTO_GROUP, nil
	case "CANCEL_INVITATION_GROUP":
		return OpType_CANCEL_INVITATION_GROUP, nil
	case "NOTIFIED_CANCEL_INVITATION_GROUP":
		return OpType_NOTIFIED_CANCEL_INVITATION_GROUP, nil
	case "LEAVE_GROUP":
		return OpType_LEAVE_GROUP, nil
	case "NOTIFIED_LEAVE_GROUP":
		return OpType_NOTIFIED_LEAVE_GROUP, nil
	case "ACCEPT_GROUP_INVITATION":
		return OpType_ACCEPT_GROUP_INVITATION, nil
	case "NOTIFIED_ACCEPT_GROUP_INVITATION":
		return OpType_NOTIFIED_ACCEPT_GROUP_INVITATION, nil
	case "REJECT_GROUP_INVITATION":
		return OpType_REJECT_GROUP_INVITATION, nil
	case "NOTIFIED_REJECT_GROUP_INVITATION":
		return OpType_NOTIFIED_REJECT_GROUP_INVITATION, nil
	case "KICKOUT__fromGROUP":
		return OpType_KICKOUT__fromGROUP, nil
	case "NOTIFIED_KICKOUT__fromGROUP":
		return OpType_NOTIFIED_KICKOUT__fromGROUP, nil
	case "CREATE_ROOM":
		return OpType_CREATE_ROOM, nil
	case "INVITE_INTO_ROOM":
		return OpType_INVITE_INTO_ROOM, nil
	case "NOTIFIED_INVITE_INTO_ROOM":
		return OpType_NOTIFIED_INVITE_INTO_ROOM, nil
	case "LEAVE_ROOM":
		return OpType_LEAVE_ROOM, nil
	case "NOTIFIED_LEAVE_ROOM":
		return OpType_NOTIFIED_LEAVE_ROOM, nil
	case "SEND_MESSAGE":
		return OpType_SEND_MESSAGE, nil
	case "RECEIVE_MESSAGE":
		return OpType_RECEIVE_MESSAGE, nil
	case "SEND_MESSAGE_RECEIPT":
		return OpType_SEND_MESSAGE_RECEIPT, nil
	case "RECEIVE_MESSAGE_RECEIPT":
		return OpType_RECEIVE_MESSAGE_RECEIPT, nil
	case "SEND_CONTENT_RECEIPT":
		return OpType_SEND_CONTENT_RECEIPT, nil
	case "SEND_CHAT_CHECKED":
		return OpType_SEND_CHAT_CHECKED, nil
	case "SEND_CHAT_REMOVED":
		return OpType_SEND_CHAT_REMOVED, nil
	case "RECEIVE_ANNOUNCEMENT":
		return OpType_RECEIVE_ANNOUNCEMENT, nil
	case "INVITE_VIA_EMAIL":
		return OpType_INVITE_VIA_EMAIL, nil
	case "NOTIFIED_REGISTER_USER":
		return OpType_NOTIFIED_REGISTER_USER, nil
	case "NOTIFIED_UNREGISTER_USER":
		return OpType_NOTIFIED_UNREGISTER_USER, nil
	case "NOTIFIED_REQUEST_RECOVERY":
		return OpType_NOTIFIED_REQUEST_RECOVERY, nil
	case "NOTIFIED_FORCE_SYNC":
		return OpType_NOTIFIED_FORCE_SYNC, nil
	case "SEND_CONTENT":
		return OpType_SEND_CONTENT, nil
	case "SEND_MESSAGE_MYHOME":
		return OpType_SEND_MESSAGE_MYHOME, nil
	case "NOTIFIED_UPDATE_CONTENT_PREVIEW":
		return OpType_NOTIFIED_UPDATE_CONTENT_PREVIEW, nil
	case "REMOVE_ALL_MESSAGES":
		return OpType_REMOVE_ALL_MESSAGES, nil
	case "NOTIFIED_UPDATE_PURCHASES":
		return OpType_NOTIFIED_UPDATE_PURCHASES, nil
	case "DUMMY":
		return OpType_DUMMY, nil
	case "UPDATE_CONTACT":
		return OpType_UPDATE_CONTACT, nil
	case "NOTIFIED_RECEIVED_CALL":
		return OpType_NOTIFIED_RECEIVED_CALL, nil
	case "CANCEL_CALL":
		return OpType_CANCEL_CALL, nil
	case "NOTIFIED_REDIRECT":
		return OpType_NOTIFIED_REDIRECT, nil
	case "NOTIFIED_CHANNEL_SYNC":
		return OpType_NOTIFIED_CHANNEL_SYNC, nil
	case "FAILED_SEND_MESSAGE":
		return OpType_FAILED_SEND_MESSAGE, nil
	case "NOTIFIED_READ_MESSAGE":
		return OpType_NOTIFIED_READ_MESSAGE, nil
	case "FAILED_EMAIL_CONFIRMATION":
		return OpType_FAILED_EMAIL_CONFIRMATION, nil
	case "NOTIFIED_PUSH_NOTICENTER_ITEM":
		return OpType_NOTIFIED_PUSH_NOTICENTER_ITEM, nil
	case "NOTIFIED_CHAT_CONTENT":
		return OpType_NOTIFIED_CHAT_CONTENT, nil
	case "NOTIFIED_JOIN_CHAT":
		return OpType_NOTIFIED_JOIN_CHAT, nil
	case "NOTIFIED_LEAVE_CHAT":
		return OpType_NOTIFIED_LEAVE_CHAT, nil
	case "NOTIFIED_TYPING":
		return OpType_NOTIFIED_TYPING, nil
	case "FRIEND_REQUEST_ACCEPTED":
		return OpType_FRIEND_REQUEST_ACCEPTED, nil
	case "DESTROY_MESSAGE":
		return OpType_DESTROY_MESSAGE, nil
	case "NOTIFIED_DESTROY_MESSAGE":
		return OpType_NOTIFIED_DESTROY_MESSAGE, nil
	case "UPDATE_PUBLICKEYCHAIN":
		return OpType_UPDATE_PUBLICKEYCHAIN, nil
	case "NOTIFIED_UPDATE_PUBLICKEYCHAIN":
		return OpType_NOTIFIED_UPDATE_PUBLICKEYCHAIN, nil
	case "NOTIFIED_BLOCK_CONTACT":
		return OpType_NOTIFIED_BLOCK_CONTACT, nil
	case "NOTIFIED_UNBLOCK_CONTACT":
		return OpType_NOTIFIED_UNBLOCK_CONTACT, nil
	case "UPDATE_GROUPPREFERENCE":
		return OpType_UPDATE_GROUPPREFERENCE, nil
	case "NOTIFIED_PAYMENT_EVENT":
		return OpType_NOTIFIED_PAYMENT_EVENT, nil
	case "REGISTER_E2EE_PUBLICKEY":
		return OpType_REGISTER_E2EE_PUBLICKEY, nil
	case "NOTIFIED_E2EE_KEY_EXCHANGE_REQ":
		return OpType_NOTIFIED_E2EE_KEY_EXCHANGE_REQ, nil
	case "NOTIFIED_E2EE_KEY_EXCHANGE_RESP":
		return OpType_NOTIFIED_E2EE_KEY_EXCHANGE_RESP, nil
	case "NOTIFIED_E2EE_MESSAGE_RESEND_REQ":
		return OpType_NOTIFIED_E2EE_MESSAGE_RESEND_REQ, nil
	case "NOTIFIED_E2EE_MESSAGE_RESEND_RESP":
		return OpType_NOTIFIED_E2EE_MESSAGE_RESEND_RESP, nil
	case "NOTIFIED_E2EE_KEY_UPDATE":
		return OpType_NOTIFIED_E2EE_KEY_UPDATE, nil
	case "NOTIFIED_BUDDY_UPDATE_PROFILE":
		return OpType_NOTIFIED_BUDDY_UPDATE_PROFILE, nil
	case "NOTIFIED_UPDATE_LINEAT_TABS":
		return OpType_NOTIFIED_UPDATE_LINEAT_TABS, nil
	case "UPDATE_ROOM":
		return OpType_UPDATE_ROOM, nil
	case "NOTIFIED_BEACON_DETECTED":
		return OpType_NOTIFIED_BEACON_DETECTED, nil
	case "UPDATE_EXTENDED_PROFILE":
		return OpType_UPDATE_EXTENDED_PROFILE, nil
	case "ADD_FOLLOW":
		return OpType_ADD_FOLLOW, nil
	case "NOTIFIED_ADD_FOLLOW":
		return OpType_NOTIFIED_ADD_FOLLOW, nil
	case "DELETE_FOLLOW":
		return OpType_DELETE_FOLLOW, nil
	case "NOTIFIED_DELETE_FOLLOW":
		return OpType_NOTIFIED_DELETE_FOLLOW, nil
	case "UPDATE_TIMELINE_SETTINGS":
		return OpType_UPDATE_TIMELINE_SETTINGS, nil
	case "NOTIFIED_FRIEND_REQUEST":
		return OpType_NOTIFIED_FRIEND_REQUEST, nil
	case "UPDATE_RINGBACK_TONE":
		return OpType_UPDATE_RINGBACK_TONE, nil
	case "NOTIFIED_POSTBACK":
		return OpType_NOTIFIED_POSTBACK, nil
	case "RECEIVE_READ_WATERMARK":
		return OpType_RECEIVE_READ_WATERMARK, nil
	case "NOTIFIED_MESSAGE_DELIVERED":
		return OpType_NOTIFIED_MESSAGE_DELIVERED, nil
	case "NOTIFIED_UPDATE_CHAT_BAR":
		return OpType_NOTIFIED_UPDATE_CHAT_BAR, nil
	case "NOTIFIED_CHATAPP_INSTALLED":
		return OpType_NOTIFIED_CHATAPP_INSTALLED, nil
	case "NOTIFIED_CHATAPP_UPDATED":
		return OpType_NOTIFIED_CHATAPP_UPDATED, nil
	case "NOTIFIED_CHATAPP_NEW_MARK":
		return OpType_NOTIFIED_CHATAPP_NEW_MARK, nil
	case "NOTIFIED_CHATAPP_DELETED":
		return OpType_NOTIFIED_CHATAPP_DELETED, nil
	case "NOTIFIED_CHATAPP_SYNC":
		return OpType_NOTIFIED_CHATAPP_SYNC, nil
	case "NOTIFIED_UPDATE_MESSAGE":
		return OpType_NOTIFIED_UPDATE_MESSAGE, nil
	case "UPDATE_CHATROOMBGM":
		return OpType_UPDATE_CHATROOMBGM, nil
	case "NOTIFIED_UPDATE_CHATROOMBGM":
		return OpType_NOTIFIED_UPDATE_CHATROOMBGM, nil
	case "UPDATE_RINGTONE":
		return OpType_UPDATE_RINGTONE, nil
	case "UPDATE_USER_SETTINGS":
		return OpType_UPDATE_USER_SETTINGS, nil
	case "NOTIFIED_UPDATE_STATUS_BAR":
		return OpType_NOTIFIED_UPDATE_STATUS_BAR, nil
	case "CREATE_CHAT":
		return OpType_CREATE_CHAT, nil
	case "UPDATE_CHAT":
		return OpType_UPDATE_CHAT, nil
	case "NOTIFIED_UPDATE_CHAT":
		return OpType_NOTIFIED_UPDATE_CHAT, nil
	case "INVITE_INTO_CHAT":
		return OpType_INVITE_INTO_CHAT, nil
	case "NOTIFIED_INVITE_INTO_CHAT":
		return OpType_NOTIFIED_INVITE_INTO_CHAT, nil
	case "CANCEL_CHAT_INVITATION":
		return OpType_CANCEL_CHAT_INVITATION, nil
	case "NOTIFIED_CANCEL_CHAT_INVITATION":
		return OpType_NOTIFIED_CANCEL_CHAT_INVITATION, nil
	case "DELETE_SELF__fromCHAT":
		return OpType_DELETE_SELF__fromCHAT, nil
	case "NOTIFIED_DELETE_SELF__fromCHAT":
		return OpType_NOTIFIED_DELETE_SELF__fromCHAT, nil
	case "ACCEPT_CHAT_INVITATION":
		return OpType_ACCEPT_CHAT_INVITATION, nil
	case "NOTIFIED_ACCEPT_CHAT_INVITATION":
		return OpType_NOTIFIED_ACCEPT_CHAT_INVITATION, nil
	case "REJECT_CHAT_INVITATION":
		return OpType_REJECT_CHAT_INVITATION, nil
	case "DELETE_OTHER__fromCHAT":
		return OpType_DELETE_OTHER__fromCHAT, nil
	case "NOTIFIED_DELETE_OTHER__fromCHAT":
		return OpType_NOTIFIED_DELETE_OTHER__fromCHAT, nil
	}
	return OpType(0), fmt.Errorf("not a valid OpType string")
}

func OpTypePtr(v OpType) *OpType { return &v }

func (p OpType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *OpType) UnmarshalText(text []byte) error {
	q, err := OpTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *OpType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = OpType(v)
	return nil
}

func (p *OpType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type OpStatus int64

const (
	OpStatus_NORMAL         OpStatus = 0
	OpStatus_ALERT_DISABLED OpStatus = 1
	OpStatus_ALWAYS         OpStatus = 2
)

func (p OpStatus) String() string {
	switch p {
	case OpStatus_NORMAL:
		return "NORMAL"
	case OpStatus_ALERT_DISABLED:
		return "ALERT_DISABLED"
	case OpStatus_ALWAYS:
		return "ALWAYS"
	}
	return "<UNSET>"
}

func OpStatusFromString(s string) (OpStatus, error) {
	switch s {
	case "NORMAL":
		return OpStatus_NORMAL, nil
	case "ALERT_DISABLED":
		return OpStatus_ALERT_DISABLED, nil
	case "ALWAYS":
		return OpStatus_ALWAYS, nil
	}
	return OpStatus(0), fmt.Errorf("not a valid OpStatus string")
}

func OpStatusPtr(v OpStatus) *OpStatus { return &v }

func (p OpStatus) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *OpStatus) UnmarshalText(text []byte) error {
	q, err := OpStatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *OpStatus) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = OpStatus(v)
	return nil
}

func (p *OpStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ContactFlag int64

const (
	ContactFlag_CONTACT_SETTING_NOTIFICATION_DISABLE  ContactFlag = 1
	ContactFlag_CONTACT_SETTING_DISPLAY_NAME_OVERRIDE ContactFlag = 2
	ContactFlag_CONTACT_SETTING_CONTACT_HIDE          ContactFlag = 4
	ContactFlag_CONTACT_SETTING_FAVORITE              ContactFlag = 8
	ContactFlag_CONTACT_SETTING_DELETE                ContactFlag = 16
)

func (p ContactFlag) String() string {
	switch p {
	case ContactFlag_CONTACT_SETTING_NOTIFICATION_DISABLE:
		return "CONTACT_SETTING_NOTIFICATION_DISABLE"
	case ContactFlag_CONTACT_SETTING_DISPLAY_NAME_OVERRIDE:
		return "CONTACT_SETTING_DISPLAY_NAME_OVERRIDE"
	case ContactFlag_CONTACT_SETTING_CONTACT_HIDE:
		return "CONTACT_SETTING_CONTACT_HIDE"
	case ContactFlag_CONTACT_SETTING_FAVORITE:
		return "CONTACT_SETTING_FAVORITE"
	case ContactFlag_CONTACT_SETTING_DELETE:
		return "CONTACT_SETTING_DELETE"
	}
	return "<UNSET>"
}

func ContactFlagFromString(s string) (ContactFlag, error) {
	switch s {
	case "CONTACT_SETTING_NOTIFICATION_DISABLE":
		return ContactFlag_CONTACT_SETTING_NOTIFICATION_DISABLE, nil
	case "CONTACT_SETTING_DISPLAY_NAME_OVERRIDE":
		return ContactFlag_CONTACT_SETTING_DISPLAY_NAME_OVERRIDE, nil
	case "CONTACT_SETTING_CONTACT_HIDE":
		return ContactFlag_CONTACT_SETTING_CONTACT_HIDE, nil
	case "CONTACT_SETTING_FAVORITE":
		return ContactFlag_CONTACT_SETTING_FAVORITE, nil
	case "CONTACT_SETTING_DELETE":
		return ContactFlag_CONTACT_SETTING_DELETE, nil
	}
	return ContactFlag(0), fmt.Errorf("not a valid ContactFlag string")
}

func ContactFlagPtr(v ContactFlag) *ContactFlag { return &v }

func (p ContactFlag) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ContactFlag) UnmarshalText(text []byte) error {
	q, err := ContactFlagFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *ContactFlag) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = ContactFlag(v)
	return nil
}

func (p *ContactFlag) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type IdentityProvider int64

const (
	IdentityProvider_UNKNOWN    IdentityProvider = 0
	IdentityProvider_LINE       IdentityProvider = 1
	IdentityProvider_NAVER_KR   IdentityProvider = 2
	IdentityProvider_LINE_PHONE IdentityProvider = 3
)

func (p IdentityProvider) String() string {
	switch p {
	case IdentityProvider_UNKNOWN:
		return "UNKNOWN"
	case IdentityProvider_LINE:
		return "LINE"
	case IdentityProvider_NAVER_KR:
		return "NAVER_KR"
	case IdentityProvider_LINE_PHONE:
		return "LINE_PHONE"
	}
	return "<UNSET>"
}

func IdentityProviderFromString(s string) (IdentityProvider, error) {
	switch s {
	case "UNKNOWN":
		return IdentityProvider_UNKNOWN, nil
	case "LINE":
		return IdentityProvider_LINE, nil
	case "NAVER_KR":
		return IdentityProvider_NAVER_KR, nil
	case "LINE_PHONE":
		return IdentityProvider_LINE_PHONE, nil
	}
	return IdentityProvider(0), fmt.Errorf("not a valid IdentityProvider string")
}

func IdentityProviderPtr(v IdentityProvider) *IdentityProvider { return &v }

func (p IdentityProvider) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *IdentityProvider) UnmarshalText(text []byte) error {
	q, err := IdentityProviderFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *IdentityProvider) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = IdentityProvider(v)
	return nil
}

func (p *IdentityProvider) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type SnsType int64

const (
	SnsType_FACEBOOK SnsType = 1
	SnsType_SINA     SnsType = 2
	SnsType_RENREN   SnsType = 3
	SnsType_FEIXIN   SnsType = 4
	SnsType_BBM      SnsType = 5
	SnsType_APPLE    SnsType = 6
)

func (p SnsType) String() string {
	switch p {
	case SnsType_FACEBOOK:
		return "FACEBOOK"
	case SnsType_SINA:
		return "SINA"
	case SnsType_RENREN:
		return "RENREN"
	case SnsType_FEIXIN:
		return "FEIXIN"
	case SnsType_BBM:
		return "BBM"
	case SnsType_APPLE:
		return "APPLE"
	}
	return "<UNSET>"
}

func SnsTypeFromString(s string) (SnsType, error) {
	switch s {
	case "FACEBOOK":
		return SnsType_FACEBOOK, nil
	case "SINA":
		return SnsType_SINA, nil
	case "RENREN":
		return SnsType_RENREN, nil
	case "FEIXIN":
		return SnsType_FEIXIN, nil
	case "BBM":
		return SnsType_BBM, nil
	case "APPLE":
		return SnsType_APPLE, nil
	}
	return SnsType(0), fmt.Errorf("not a valid SnsType string")
}

func SnsTypePtr(v SnsType) *SnsType { return &v }

func (p SnsType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *SnsType) UnmarshalText(text []byte) error {
	q, err := SnsTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *SnsType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = SnsType(v)
	return nil
}

func (p *SnsType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type EmailConfirmationStatus int64

const (
	EmailConfirmationStatus_NOT_SPECIFIED       EmailConfirmationStatus = 0
	EmailConfirmationStatus_NOT_YET             EmailConfirmationStatus = 1
	EmailConfirmationStatus_DONE                EmailConfirmationStatus = 2
	EmailConfirmationStatus_NEED_ENFORCED_INPUT EmailConfirmationStatus = 3
)

func (p EmailConfirmationStatus) String() string {
	switch p {
	case EmailConfirmationStatus_NOT_SPECIFIED:
		return "NOT_SPECIFIED"
	case EmailConfirmationStatus_NOT_YET:
		return "NOT_YET"
	case EmailConfirmationStatus_DONE:
		return "DONE"
	case EmailConfirmationStatus_NEED_ENFORCED_INPUT:
		return "NEED_ENFORCED_INPUT"
	}
	return "<UNSET>"
}

func EmailConfirmationStatusFromString(s string) (EmailConfirmationStatus, error) {
	switch s {
	case "NOT_SPECIFIED":
		return EmailConfirmationStatus_NOT_SPECIFIED, nil
	case "NOT_YET":
		return EmailConfirmationStatus_NOT_YET, nil
	case "DONE":
		return EmailConfirmationStatus_DONE, nil
	case "NEED_ENFORCED_INPUT":
		return EmailConfirmationStatus_NEED_ENFORCED_INPUT, nil
	}
	return EmailConfirmationStatus(0), fmt.Errorf("not a valid EmailConfirmationStatus string")
}

func EmailConfirmationStatusPtr(v EmailConfirmationStatus) *EmailConfirmationStatus { return &v }

func (p EmailConfirmationStatus) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *EmailConfirmationStatus) UnmarshalText(text []byte) error {
	q, err := EmailConfirmationStatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *EmailConfirmationStatus) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = EmailConfirmationStatus(v)
	return nil
}

func (p *EmailConfirmationStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type AccountMigrationPincodeType int64

const (
	AccountMigrationPincodeType_NOT_AUTHENTICATED  AccountMigrationPincodeType = 0
	AccountMigrationPincodeType_NOT_SET            AccountMigrationPincodeType = 1
	AccountMigrationPincodeType_SET                AccountMigrationPincodeType = 2
	AccountMigrationPincodeType_NEED_ENFORCED_INPU AccountMigrationPincodeType = 3
)

func (p AccountMigrationPincodeType) String() string {
	switch p {
	case AccountMigrationPincodeType_NOT_AUTHENTICATED:
		return "NOT_AUTHENTICATED"
	case AccountMigrationPincodeType_NOT_SET:
		return "NOT_SET"
	case AccountMigrationPincodeType_SET:
		return "SET"
	case AccountMigrationPincodeType_NEED_ENFORCED_INPU:
		return "NEED_ENFORCED_INPU"
	}
	return "<UNSET>"
}

func AccountMigrationPincodeTypeFromString(s string) (AccountMigrationPincodeType, error) {
	switch s {
	case "NOT_AUTHENTICATED":
		return AccountMigrationPincodeType_NOT_AUTHENTICATED, nil
	case "NOT_SET":
		return AccountMigrationPincodeType_NOT_SET, nil
	case "SET":
		return AccountMigrationPincodeType_SET, nil
	case "NEED_ENFORCED_INPU":
		return AccountMigrationPincodeType_NEED_ENFORCED_INPU, nil
	}
	return AccountMigrationPincodeType(0), fmt.Errorf("not a valid AccountMigrationPincodeType string")
}

func AccountMigrationPincodeTypePtr(v AccountMigrationPincodeType) *AccountMigrationPincodeType {
	return &v
}

func (p AccountMigrationPincodeType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *AccountMigrationPincodeType) UnmarshalText(text []byte) error {
	q, err := AccountMigrationPincodeTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *AccountMigrationPincodeType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = AccountMigrationPincodeType(v)
	return nil
}

func (p *AccountMigrationPincodeType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type SecurityCenterSettingsType int64

const (
	SecurityCenterSettingsType_NOT_AUTHENTICATED   SecurityCenterSettingsType = 0
	SecurityCenterSettingsType_NOT_SET             SecurityCenterSettingsType = 1
	SecurityCenterSettingsType_SET                 SecurityCenterSettingsType = 2
	SecurityCenterSettingsType_NEED_ENFORCED_INPUT SecurityCenterSettingsType = 3
)

func (p SecurityCenterSettingsType) String() string {
	switch p {
	case SecurityCenterSettingsType_NOT_AUTHENTICATED:
		return "NOT_AUTHENTICATED"
	case SecurityCenterSettingsType_NOT_SET:
		return "NOT_SET"
	case SecurityCenterSettingsType_SET:
		return "SET"
	case SecurityCenterSettingsType_NEED_ENFORCED_INPUT:
		return "NEED_ENFORCED_INPUT"
	}
	return "<UNSET>"
}

func SecurityCenterSettingsTypeFromString(s string) (SecurityCenterSettingsType, error) {
	switch s {
	case "NOT_AUTHENTICATED":
		return SecurityCenterSettingsType_NOT_AUTHENTICATED, nil
	case "NOT_SET":
		return SecurityCenterSettingsType_NOT_SET, nil
	case "SET":
		return SecurityCenterSettingsType_SET, nil
	case "NEED_ENFORCED_INPUT":
		return SecurityCenterSettingsType_NEED_ENFORCED_INPUT, nil
	}
	return SecurityCenterSettingsType(0), fmt.Errorf("not a valid SecurityCenterSettingsType string")
}

func SecurityCenterSettingsTypePtr(v SecurityCenterSettingsType) *SecurityCenterSettingsType {
	return &v
}

func (p SecurityCenterSettingsType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *SecurityCenterSettingsType) UnmarshalText(text []byte) error {
	q, err := SecurityCenterSettingsTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *SecurityCenterSettingsType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = SecurityCenterSettingsType(v)
	return nil
}

func (p *SecurityCenterSettingsType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type CustomMode int64

const (
	CustomMode_PROMOTION_FRIENDS_INVITE            CustomMode = 1
	CustomMode_CAPABILITY_SERVER_SIDE_SMS          CustomMode = 2
	CustomMode_LINE_CLIENT_ANALYTICS_CONFIGURATION CustomMode = 3
)

func (p CustomMode) String() string {
	switch p {
	case CustomMode_PROMOTION_FRIENDS_INVITE:
		return "PROMOTION_FRIENDS_INVITE"
	case CustomMode_CAPABILITY_SERVER_SIDE_SMS:
		return "CAPABILITY_SERVER_SIDE_SMS"
	case CustomMode_LINE_CLIENT_ANALYTICS_CONFIGURATION:
		return "LINE_CLIENT_ANALYTICS_CONFIGURATION"
	}
	return "<UNSET>"
}

func CustomModeFromString(s string) (CustomMode, error) {
	switch s {
	case "PROMOTION_FRIENDS_INVITE":
		return CustomMode_PROMOTION_FRIENDS_INVITE, nil
	case "CAPABILITY_SERVER_SIDE_SMS":
		return CustomMode_CAPABILITY_SERVER_SIDE_SMS, nil
	case "LINE_CLIENT_ANALYTICS_CONFIGURATION":
		return CustomMode_LINE_CLIENT_ANALYTICS_CONFIGURATION, nil
	}
	return CustomMode(0), fmt.Errorf("not a valid CustomMode string")
}

func CustomModePtr(v CustomMode) *CustomMode { return &v }

func (p CustomMode) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *CustomMode) UnmarshalText(text []byte) error {
	q, err := CustomModeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *CustomMode) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = CustomMode(v)
	return nil
}

func (p *CustomMode) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type SettingsAttributes int64

const (
	SettingsAttributes_NOTIFICATION_ENABLE                        SettingsAttributes = 0
	SettingsAttributes_NOTIFICATION_MUTE_EXPIRATION               SettingsAttributes = 1
	SettingsAttributes_NOTIFICATION_NEW_MESSAGE                   SettingsAttributes = 2
	SettingsAttributes_NOTIFICATION_GROUP_INVITATION              SettingsAttributes = 3
	SettingsAttributes_NOTIFICATION_SHOW_MESSAGE                  SettingsAttributes = 4
	SettingsAttributes_NOTIFICATION_INCOMING_CALL                 SettingsAttributes = 5
	SettingsAttributes_NOTIFICATION_SOUND_MESSAGE                 SettingsAttributes = 8
	SettingsAttributes_NOTIFICATION_SOUND_GROUP                   SettingsAttributes = 9
	SettingsAttributes_NOTIFICATION_DISABLED_WITH_SUB             SettingsAttributes = 16
	SettingsAttributes_NOTIFICATION_PAYMENT                       SettingsAttributes = 17
	SettingsAttributes_NOTIFICATION_MENTION                       SettingsAttributes = 40
	SettingsAttributes_NOTIFICATION_THUMBNAIL                     SettingsAttributes = 45
	SettingsAttributes_PRIVACY_SYNC_CONTACTS                      SettingsAttributes = 6
	SettingsAttributes_PRIVACY_SEARCH_BY_PHONE_NUMBER             SettingsAttributes = 7
	SettingsAttributes_PRIVACY_SEARCH_BY_USERID                   SettingsAttributes = 13
	SettingsAttributes_PRIVACY_SEARCH_BY_EMAIL                    SettingsAttributes = 14
	SettingsAttributes_PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS     SettingsAttributes = 51
	SettingsAttributes_PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN       SettingsAttributes = 21
	SettingsAttributes_PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME       SettingsAttributes = 23
	SettingsAttributes_PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME       SettingsAttributes = 35
	SettingsAttributes_PRIVACY_PROFILE_HISTORY                    SettingsAttributes = 57
	SettingsAttributes_PRIVACY_STATUS_MESSAGE_HISTORY             SettingsAttributes = 54
	SettingsAttributes_PRIVACY_ALLOW_FRIEND_REQUEST               SettingsAttributes = 30
	SettingsAttributes_PRIVACY_RECV_MESSAGES__fromNOT_FRIEND      SettingsAttributes = 25
	SettingsAttributes_PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL     SettingsAttributes = 26
	SettingsAttributes_PRIVACY_AGREE_USE_PAIDCALL                 SettingsAttributes = 27
	SettingsAttributes_PRIVACY_AGE_RESULT                         SettingsAttributes = 60
	SettingsAttributes_PRIVACY_AGE_RESULT_RECEIVED                SettingsAttributes = 61
	SettingsAttributes_PRIVACY_ALLOW_FOLLOW                       SettingsAttributes = 63
	SettingsAttributes_PRIVACY_SHOW_FOLLOW_LIST                   SettingsAttributes = 64
	SettingsAttributes_CONTACT_MY_TICKET                          SettingsAttributes = 10
	SettingsAttributes_IDENTITY_PROVIDER                          SettingsAttributes = 11
	SettingsAttributes_IDENTITY_IDENTIFIER                        SettingsAttributes = 12
	SettingsAttributes_SNS_ACCOUNT                                SettingsAttributes = 19
	SettingsAttributes_PHONE_REGISTRATION                         SettingsAttributes = 20
	SettingsAttributes_PREFERENCE_LOCALE                          SettingsAttributes = 15
	SettingsAttributes_CUSTOM_MODE                                SettingsAttributes = 22
	SettingsAttributes_EMAIL_CONFIRMATION_STATUS                  SettingsAttributes = 24
	SettingsAttributes_ACCOUNT_MIGRATION_PINCODE                  SettingsAttributes = 28
	SettingsAttributes_ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE   SettingsAttributes = 29
	SettingsAttributes_SECURITY_CENTER_SETTINGS                   SettingsAttributes = 18
	SettingsAttributes_E2EE_ENABLE                                SettingsAttributes = 33
	SettingsAttributes_HITOKOTO_BACKUP_REQUESTED                  SettingsAttributes = 34
	SettingsAttributes_CONTACT_ALLOW_FOLLOWING                    SettingsAttributes = 36
	SettingsAttributes_PRIVACY_ALLOW_NEARBY                       SettingsAttributes = 37
	SettingsAttributes_AGREEMENT_NEARBY                           SettingsAttributes = 38
	SettingsAttributes_AGREEMENT_SQUARE                           SettingsAttributes = 39
	SettingsAttributes_ALLOW_UNREGISTRATION_SECONDARY_DEVICE      SettingsAttributes = 41
	SettingsAttributes_AGREEMENT_BOT_USE                          SettingsAttributes = 42
	SettingsAttributes_AGREEMENT_SHAKE_FUNCTION                   SettingsAttributes = 43
	SettingsAttributes_AGREEMENT_MOBILE_CONTACT_NAME              SettingsAttributes = 44
	SettingsAttributes_AGREEMENT_SOUND_TO_TEXT                    SettingsAttributes = 46
	SettingsAttributes_AGREEMENT_PRIVACY_POLICY_VERSION           SettingsAttributes = 47
	SettingsAttributes_AGREEMENT_AD_BY_WEB_ACCESS                 SettingsAttributes = 48
	SettingsAttributes_AGREEMENT_PHONE_NUMBER_MATCHING            SettingsAttributes = 49
	SettingsAttributes_AGREEMENT_COMMUNICATION_INFO               SettingsAttributes = 50
	SettingsAttributes_AGREEMENT_THINGS_WIRELESS_COMMUNICATION    SettingsAttributes = 52
	SettingsAttributes_AGREEMENT_GDPR                             SettingsAttributes = 53
	SettingsAttributes_AGREEMENT_PROVIDE_LOCATION                 SettingsAttributes = 55
	SettingsAttributes_AGREEMENT_BEACON                           SettingsAttributes = 56
	SettingsAttributes_AGREEMENT_CONTENTS_SUGGEST                 SettingsAttributes = 58
	SettingsAttributes_AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION SettingsAttributes = 59
	SettingsAttributes_AGREEMENT_OCR_IMAGE_COLLECTION             SettingsAttributes = 62
)

func (p SettingsAttributes) String() string {
	switch p {
	case SettingsAttributes_NOTIFICATION_ENABLE:
		return "NOTIFICATION_ENABLE"
	case SettingsAttributes_NOTIFICATION_MUTE_EXPIRATION:
		return "NOTIFICATION_MUTE_EXPIRATION"
	case SettingsAttributes_NOTIFICATION_NEW_MESSAGE:
		return "NOTIFICATION_NEW_MESSAGE"
	case SettingsAttributes_NOTIFICATION_GROUP_INVITATION:
		return "NOTIFICATION_GROUP_INVITATION"
	case SettingsAttributes_NOTIFICATION_SHOW_MESSAGE:
		return "NOTIFICATION_SHOW_MESSAGE"
	case SettingsAttributes_NOTIFICATION_INCOMING_CALL:
		return "NOTIFICATION_INCOMING_CALL"
	case SettingsAttributes_NOTIFICATION_SOUND_MESSAGE:
		return "NOTIFICATION_SOUND_MESSAGE"
	case SettingsAttributes_NOTIFICATION_SOUND_GROUP:
		return "NOTIFICATION_SOUND_GROUP"
	case SettingsAttributes_NOTIFICATION_DISABLED_WITH_SUB:
		return "NOTIFICATION_DISABLED_WITH_SUB"
	case SettingsAttributes_NOTIFICATION_PAYMENT:
		return "NOTIFICATION_PAYMENT"
	case SettingsAttributes_NOTIFICATION_MENTION:
		return "NOTIFICATION_MENTION"
	case SettingsAttributes_NOTIFICATION_THUMBNAIL:
		return "NOTIFICATION_THUMBNAIL"
	case SettingsAttributes_PRIVACY_SYNC_CONTACTS:
		return "PRIVACY_SYNC_CONTACTS"
	case SettingsAttributes_PRIVACY_SEARCH_BY_PHONE_NUMBER:
		return "PRIVACY_SEARCH_BY_PHONE_NUMBER"
	case SettingsAttributes_PRIVACY_SEARCH_BY_USERID:
		return "PRIVACY_SEARCH_BY_USERID"
	case SettingsAttributes_PRIVACY_SEARCH_BY_EMAIL:
		return "PRIVACY_SEARCH_BY_EMAIL"
	case SettingsAttributes_PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS:
		return "PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS"
	case SettingsAttributes_PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN:
		return "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN"
	case SettingsAttributes_PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME:
		return "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME"
	case SettingsAttributes_PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME:
		return "PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME"
	case SettingsAttributes_PRIVACY_PROFILE_HISTORY:
		return "PRIVACY_PROFILE_HISTORY"
	case SettingsAttributes_PRIVACY_STATUS_MESSAGE_HISTORY:
		return "PRIVACY_STATUS_MESSAGE_HISTORY"
	case SettingsAttributes_PRIVACY_ALLOW_FRIEND_REQUEST:
		return "PRIVACY_ALLOW_FRIEND_REQUEST"
	case SettingsAttributes_PRIVACY_RECV_MESSAGES__fromNOT_FRIEND:
		return "PRIVACY_RECV_MESSAGES__fromNOT_FRIEND"
	case SettingsAttributes_PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL:
		return "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL"
	case SettingsAttributes_PRIVACY_AGREE_USE_PAIDCALL:
		return "PRIVACY_AGREE_USE_PAIDCALL"
	case SettingsAttributes_PRIVACY_AGE_RESULT:
		return "PRIVACY_AGE_RESULT"
	case SettingsAttributes_PRIVACY_AGE_RESULT_RECEIVED:
		return "PRIVACY_AGE_RESULT_RECEIVED"
	case SettingsAttributes_PRIVACY_ALLOW_FOLLOW:
		return "PRIVACY_ALLOW_FOLLOW"
	case SettingsAttributes_PRIVACY_SHOW_FOLLOW_LIST:
		return "PRIVACY_SHOW_FOLLOW_LIST"
	case SettingsAttributes_CONTACT_MY_TICKET:
		return "CONTACT_MY_TICKET"
	case SettingsAttributes_IDENTITY_PROVIDER:
		return "IDENTITY_PROVIDER"
	case SettingsAttributes_IDENTITY_IDENTIFIER:
		return "IDENTITY_IDENTIFIER"
	case SettingsAttributes_SNS_ACCOUNT:
		return "SNS_ACCOUNT"
	case SettingsAttributes_PHONE_REGISTRATION:
		return "PHONE_REGISTRATION"
	case SettingsAttributes_PREFERENCE_LOCALE:
		return "PREFERENCE_LOCALE"
	case SettingsAttributes_CUSTOM_MODE:
		return "CUSTOM_MODE"
	case SettingsAttributes_EMAIL_CONFIRMATION_STATUS:
		return "EMAIL_CONFIRMATION_STATUS"
	case SettingsAttributes_ACCOUNT_MIGRATION_PINCODE:
		return "ACCOUNT_MIGRATION_PINCODE"
	case SettingsAttributes_ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE:
		return "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE"
	case SettingsAttributes_SECURITY_CENTER_SETTINGS:
		return "SECURITY_CENTER_SETTINGS"
	case SettingsAttributes_E2EE_ENABLE:
		return "E2EE_ENABLE"
	case SettingsAttributes_HITOKOTO_BACKUP_REQUESTED:
		return "HITOKOTO_BACKUP_REQUESTED"
	case SettingsAttributes_CONTACT_ALLOW_FOLLOWING:
		return "CONTACT_ALLOW_FOLLOWING"
	case SettingsAttributes_PRIVACY_ALLOW_NEARBY:
		return "PRIVACY_ALLOW_NEARBY"
	case SettingsAttributes_AGREEMENT_NEARBY:
		return "AGREEMENT_NEARBY"
	case SettingsAttributes_AGREEMENT_SQUARE:
		return "AGREEMENT_SQUARE"
	case SettingsAttributes_ALLOW_UNREGISTRATION_SECONDARY_DEVICE:
		return "ALLOW_UNREGISTRATION_SECONDARY_DEVICE"
	case SettingsAttributes_AGREEMENT_BOT_USE:
		return "AGREEMENT_BOT_USE"
	case SettingsAttributes_AGREEMENT_SHAKE_FUNCTION:
		return "AGREEMENT_SHAKE_FUNCTION"
	case SettingsAttributes_AGREEMENT_MOBILE_CONTACT_NAME:
		return "AGREEMENT_MOBILE_CONTACT_NAME"
	case SettingsAttributes_AGREEMENT_SOUND_TO_TEXT:
		return "AGREEMENT_SOUND_TO_TEXT"
	case SettingsAttributes_AGREEMENT_PRIVACY_POLICY_VERSION:
		return "AGREEMENT_PRIVACY_POLICY_VERSION"
	case SettingsAttributes_AGREEMENT_AD_BY_WEB_ACCESS:
		return "AGREEMENT_AD_BY_WEB_ACCESS"
	case SettingsAttributes_AGREEMENT_PHONE_NUMBER_MATCHING:
		return "AGREEMENT_PHONE_NUMBER_MATCHING"
	case SettingsAttributes_AGREEMENT_COMMUNICATION_INFO:
		return "AGREEMENT_COMMUNICATION_INFO"
	case SettingsAttributes_AGREEMENT_THINGS_WIRELESS_COMMUNICATION:
		return "AGREEMENT_THINGS_WIRELESS_COMMUNICATION"
	case SettingsAttributes_AGREEMENT_GDPR:
		return "AGREEMENT_GDPR"
	case SettingsAttributes_AGREEMENT_PROVIDE_LOCATION:
		return "AGREEMENT_PROVIDE_LOCATION"
	case SettingsAttributes_AGREEMENT_BEACON:
		return "AGREEMENT_BEACON"
	case SettingsAttributes_AGREEMENT_CONTENTS_SUGGEST:
		return "AGREEMENT_CONTENTS_SUGGEST"
	case SettingsAttributes_AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION:
		return "AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION"
	case SettingsAttributes_AGREEMENT_OCR_IMAGE_COLLECTION:
		return "AGREEMENT_OCR_IMAGE_COLLECTION"
	}
	return "<UNSET>"
}

func SettingsAttributesFromString(s string) (SettingsAttributes, error) {
	switch s {
	case "NOTIFICATION_ENABLE":
		return SettingsAttributes_NOTIFICATION_ENABLE, nil
	case "NOTIFICATION_MUTE_EXPIRATION":
		return SettingsAttributes_NOTIFICATION_MUTE_EXPIRATION, nil
	case "NOTIFICATION_NEW_MESSAGE":
		return SettingsAttributes_NOTIFICATION_NEW_MESSAGE, nil
	case "NOTIFICATION_GROUP_INVITATION":
		return SettingsAttributes_NOTIFICATION_GROUP_INVITATION, nil
	case "NOTIFICATION_SHOW_MESSAGE":
		return SettingsAttributes_NOTIFICATION_SHOW_MESSAGE, nil
	case "NOTIFICATION_INCOMING_CALL":
		return SettingsAttributes_NOTIFICATION_INCOMING_CALL, nil
	case "NOTIFICATION_SOUND_MESSAGE":
		return SettingsAttributes_NOTIFICATION_SOUND_MESSAGE, nil
	case "NOTIFICATION_SOUND_GROUP":
		return SettingsAttributes_NOTIFICATION_SOUND_GROUP, nil
	case "NOTIFICATION_DISABLED_WITH_SUB":
		return SettingsAttributes_NOTIFICATION_DISABLED_WITH_SUB, nil
	case "NOTIFICATION_PAYMENT":
		return SettingsAttributes_NOTIFICATION_PAYMENT, nil
	case "NOTIFICATION_MENTION":
		return SettingsAttributes_NOTIFICATION_MENTION, nil
	case "NOTIFICATION_THUMBNAIL":
		return SettingsAttributes_NOTIFICATION_THUMBNAIL, nil
	case "PRIVACY_SYNC_CONTACTS":
		return SettingsAttributes_PRIVACY_SYNC_CONTACTS, nil
	case "PRIVACY_SEARCH_BY_PHONE_NUMBER":
		return SettingsAttributes_PRIVACY_SEARCH_BY_PHONE_NUMBER, nil
	case "PRIVACY_SEARCH_BY_USERID":
		return SettingsAttributes_PRIVACY_SEARCH_BY_USERID, nil
	case "PRIVACY_SEARCH_BY_EMAIL":
		return SettingsAttributes_PRIVACY_SEARCH_BY_EMAIL, nil
	case "PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS":
		return SettingsAttributes_PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS, nil
	case "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN":
		return SettingsAttributes_PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN, nil
	case "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME":
		return SettingsAttributes_PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME, nil
	case "PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME":
		return SettingsAttributes_PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME, nil
	case "PRIVACY_PROFILE_HISTORY":
		return SettingsAttributes_PRIVACY_PROFILE_HISTORY, nil
	case "PRIVACY_STATUS_MESSAGE_HISTORY":
		return SettingsAttributes_PRIVACY_STATUS_MESSAGE_HISTORY, nil
	case "PRIVACY_ALLOW_FRIEND_REQUEST":
		return SettingsAttributes_PRIVACY_ALLOW_FRIEND_REQUEST, nil
	case "PRIVACY_RECV_MESSAGES__fromNOT_FRIEND":
		return SettingsAttributes_PRIVACY_RECV_MESSAGES__fromNOT_FRIEND, nil
	case "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL":
		return SettingsAttributes_PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL, nil
	case "PRIVACY_AGREE_USE_PAIDCALL":
		return SettingsAttributes_PRIVACY_AGREE_USE_PAIDCALL, nil
	case "PRIVACY_AGE_RESULT":
		return SettingsAttributes_PRIVACY_AGE_RESULT, nil
	case "PRIVACY_AGE_RESULT_RECEIVED":
		return SettingsAttributes_PRIVACY_AGE_RESULT_RECEIVED, nil
	case "PRIVACY_ALLOW_FOLLOW":
		return SettingsAttributes_PRIVACY_ALLOW_FOLLOW, nil
	case "PRIVACY_SHOW_FOLLOW_LIST":
		return SettingsAttributes_PRIVACY_SHOW_FOLLOW_LIST, nil
	case "CONTACT_MY_TICKET":
		return SettingsAttributes_CONTACT_MY_TICKET, nil
	case "IDENTITY_PROVIDER":
		return SettingsAttributes_IDENTITY_PROVIDER, nil
	case "IDENTITY_IDENTIFIER":
		return SettingsAttributes_IDENTITY_IDENTIFIER, nil
	case "SNS_ACCOUNT":
		return SettingsAttributes_SNS_ACCOUNT, nil
	case "PHONE_REGISTRATION":
		return SettingsAttributes_PHONE_REGISTRATION, nil
	case "PREFERENCE_LOCALE":
		return SettingsAttributes_PREFERENCE_LOCALE, nil
	case "CUSTOM_MODE":
		return SettingsAttributes_CUSTOM_MODE, nil
	case "EMAIL_CONFIRMATION_STATUS":
		return SettingsAttributes_EMAIL_CONFIRMATION_STATUS, nil
	case "ACCOUNT_MIGRATION_PINCODE":
		return SettingsAttributes_ACCOUNT_MIGRATION_PINCODE, nil
	case "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE":
		return SettingsAttributes_ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE, nil
	case "SECURITY_CENTER_SETTINGS":
		return SettingsAttributes_SECURITY_CENTER_SETTINGS, nil
	case "E2EE_ENABLE":
		return SettingsAttributes_E2EE_ENABLE, nil
	case "HITOKOTO_BACKUP_REQUESTED":
		return SettingsAttributes_HITOKOTO_BACKUP_REQUESTED, nil
	case "CONTACT_ALLOW_FOLLOWING":
		return SettingsAttributes_CONTACT_ALLOW_FOLLOWING, nil
	case "PRIVACY_ALLOW_NEARBY":
		return SettingsAttributes_PRIVACY_ALLOW_NEARBY, nil
	case "AGREEMENT_NEARBY":
		return SettingsAttributes_AGREEMENT_NEARBY, nil
	case "AGREEMENT_SQUARE":
		return SettingsAttributes_AGREEMENT_SQUARE, nil
	case "ALLOW_UNREGISTRATION_SECONDARY_DEVICE":
		return SettingsAttributes_ALLOW_UNREGISTRATION_SECONDARY_DEVICE, nil
	case "AGREEMENT_BOT_USE":
		return SettingsAttributes_AGREEMENT_BOT_USE, nil
	case "AGREEMENT_SHAKE_FUNCTION":
		return SettingsAttributes_AGREEMENT_SHAKE_FUNCTION, nil
	case "AGREEMENT_MOBILE_CONTACT_NAME":
		return SettingsAttributes_AGREEMENT_MOBILE_CONTACT_NAME, nil
	case "AGREEMENT_SOUND_TO_TEXT":
		return SettingsAttributes_AGREEMENT_SOUND_TO_TEXT, nil
	case "AGREEMENT_PRIVACY_POLICY_VERSION":
		return SettingsAttributes_AGREEMENT_PRIVACY_POLICY_VERSION, nil
	case "AGREEMENT_AD_BY_WEB_ACCESS":
		return SettingsAttributes_AGREEMENT_AD_BY_WEB_ACCESS, nil
	case "AGREEMENT_PHONE_NUMBER_MATCHING":
		return SettingsAttributes_AGREEMENT_PHONE_NUMBER_MATCHING, nil
	case "AGREEMENT_COMMUNICATION_INFO":
		return SettingsAttributes_AGREEMENT_COMMUNICATION_INFO, nil
	case "AGREEMENT_THINGS_WIRELESS_COMMUNICATION":
		return SettingsAttributes_AGREEMENT_THINGS_WIRELESS_COMMUNICATION, nil
	case "AGREEMENT_GDPR":
		return SettingsAttributes_AGREEMENT_GDPR, nil
	case "AGREEMENT_PROVIDE_LOCATION":
		return SettingsAttributes_AGREEMENT_PROVIDE_LOCATION, nil
	case "AGREEMENT_BEACON":
		return SettingsAttributes_AGREEMENT_BEACON, nil
	case "AGREEMENT_CONTENTS_SUGGEST":
		return SettingsAttributes_AGREEMENT_CONTENTS_SUGGEST, nil
	case "AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION":
		return SettingsAttributes_AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION, nil
	case "AGREEMENT_OCR_IMAGE_COLLECTION":
		return SettingsAttributes_AGREEMENT_OCR_IMAGE_COLLECTION, nil
	}
	return SettingsAttributes(0), fmt.Errorf("not a valid SettingsAttributes string")
}

func SettingsAttributesPtr(v SettingsAttributes) *SettingsAttributes { return &v }

func (p SettingsAttributes) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *SettingsAttributes) UnmarshalText(text []byte) error {
	q, err := SettingsAttributesFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *SettingsAttributes) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = SettingsAttributes(v)
	return nil
}

func (p *SettingsAttributes) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ChatAttribute int64

const (
	ChatAttribute_NAME                     ChatAttribute = 1
	ChatAttribute_PICTURE_STATUS           ChatAttribute = 2
	ChatAttribute_PREVENTED_JOIN_BY_TICKET ChatAttribute = 4
	ChatAttribute_NOTIFICATION_SETTING     ChatAttribute = 8
	ChatAttribute_INVITATION_TICKET        ChatAttribute = 16
	ChatAttribute_FAVORITE_TIMESTAMP       ChatAttribute = 32
	ChatAttribute_CHAT_TYPE                ChatAttribute = 64
)

func (p ChatAttribute) String() string {
	switch p {
	case ChatAttribute_NAME:
		return "NAME"
	case ChatAttribute_PICTURE_STATUS:
		return "PICTURE_STATUS"
	case ChatAttribute_PREVENTED_JOIN_BY_TICKET:
		return "PREVENTED_JOIN_BY_TICKET"
	case ChatAttribute_NOTIFICATION_SETTING:
		return "NOTIFICATION_SETTING"
	case ChatAttribute_INVITATION_TICKET:
		return "INVITATION_TICKET"
	case ChatAttribute_FAVORITE_TIMESTAMP:
		return "FAVORITE_TIMESTAMP"
	case ChatAttribute_CHAT_TYPE:
		return "CHAT_TYPE"
	}
	return "<UNSET>"
}

func ChatAttributeFromString(s string) (ChatAttribute, error) {
	switch s {
	case "NAME":
		return ChatAttribute_NAME, nil
	case "PICTURE_STATUS":
		return ChatAttribute_PICTURE_STATUS, nil
	case "PREVENTED_JOIN_BY_TICKET":
		return ChatAttribute_PREVENTED_JOIN_BY_TICKET, nil
	case "NOTIFICATION_SETTING":
		return ChatAttribute_NOTIFICATION_SETTING, nil
	case "INVITATION_TICKET":
		return ChatAttribute_INVITATION_TICKET, nil
	case "FAVORITE_TIMESTAMP":
		return ChatAttribute_FAVORITE_TIMESTAMP, nil
	case "CHAT_TYPE":
		return ChatAttribute_CHAT_TYPE, nil
	}
	return ChatAttribute(0), fmt.Errorf("not a valid ChatAttribute string")
}

func ChatAttributePtr(v ChatAttribute) *ChatAttribute { return &v }

func (p ChatAttribute) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ChatAttribute) UnmarshalText(text []byte) error {
	q, err := ChatAttributeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *ChatAttribute) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = ChatAttribute(v)
	return nil
}

func (p *ChatAttribute) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Attributes:
//  - Code
//  - Reason
//  - ParameterMap
type TalkException struct {
	Code         ErrorCode         `thrift:"code,1" db:"code" json:"code"`
	Reason       string            `thrift:"reason,2" db:"reason" json:"reason"`
	ParameterMap map[string]string `thrift:"parameterMap,3" db:"parameterMap" json:"parameterMap"`
}

func NewTalkException() *TalkException {
	return &TalkException{}
}

func (p *TalkException) GetCode() ErrorCode {
	return p.Code
}

func (p *TalkException) GetReason() string {
	return p.Reason
}

func (p *TalkException) GetParameterMap() map[string]string {
	return p.ParameterMap
}
func (p *TalkException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := ErrorCode(v)
		p.Code = temp
	}
	return nil
}

func (p *TalkException) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Reason = v
	}
	return nil
}

func (p *TalkException) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.ParameterMap = tMap
	for i := 0; i < size; i++ {
		var _key0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key0 = v
		}
		var _val1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val1 = v
		}
		p.ParameterMap[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TalkException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TalkException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
	}
	return err
}

func (p *TalkException) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reason", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reason: ", p), err)
	}
	if err := oprot.WriteString(string(p.Reason)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reason (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reason: ", p), err)
	}
	return err
}

func (p *TalkException) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parameterMap", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parameterMap: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ParameterMap)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.ParameterMap {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parameterMap: ", p), err)
	}
	return err
}

func (p *TalkException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkException(%+v)", *p)
}

func (p *TalkException) Error() string {
	return p.String()
}

// Attributes:
//  - Year
//  - YearPrivacyLevelType
//  - YearEnabled
//  - Day
//  - DayPrivacyLevelType
//  - DayEnabled
type ExtendedProfileBirthday struct {
	Year                 string           `thrift:"year,1" db:"year" json:"year"`
	YearPrivacyLevelType PrivacyLevelType `thrift:"yearPrivacyLevelType,2" db:"yearPrivacyLevelType" json:"yearPrivacyLevelType"`
	YearEnabled          bool             `thrift:"yearEnabled,3" db:"yearEnabled" json:"yearEnabled"`
	// unused field # 4
	Day                 string           `thrift:"day,5" db:"day" json:"day"`
	DayPrivacyLevelType PrivacyLevelType `thrift:"dayPrivacyLevelType,6" db:"dayPrivacyLevelType" json:"dayPrivacyLevelType"`
	DayEnabled          bool             `thrift:"dayEnabled,7" db:"dayEnabled" json:"dayEnabled"`
}

func NewExtendedProfileBirthday() *ExtendedProfileBirthday {
	return &ExtendedProfileBirthday{}
}

func (p *ExtendedProfileBirthday) GetYear() string {
	return p.Year
}

func (p *ExtendedProfileBirthday) GetYearPrivacyLevelType() PrivacyLevelType {
	return p.YearPrivacyLevelType
}

func (p *ExtendedProfileBirthday) GetYearEnabled() bool {
	return p.YearEnabled
}

func (p *ExtendedProfileBirthday) GetDay() string {
	return p.Day
}

func (p *ExtendedProfileBirthday) GetDayPrivacyLevelType() PrivacyLevelType {
	return p.DayPrivacyLevelType
}

func (p *ExtendedProfileBirthday) GetDayEnabled() bool {
	return p.DayEnabled
}
func (p *ExtendedProfileBirthday) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ExtendedProfileBirthday) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Year = v
	}
	return nil
}

func (p *ExtendedProfileBirthday) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := PrivacyLevelType(v)
		p.YearPrivacyLevelType = temp
	}
	return nil
}

func (p *ExtendedProfileBirthday) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.YearEnabled = v
	}
	return nil
}

func (p *ExtendedProfileBirthday) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Day = v
	}
	return nil
}

func (p *ExtendedProfileBirthday) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := PrivacyLevelType(v)
		p.DayPrivacyLevelType = temp
	}
	return nil
}

func (p *ExtendedProfileBirthday) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.DayEnabled = v
	}
	return nil
}

func (p *ExtendedProfileBirthday) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ExtendedProfileBirthday"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ExtendedProfileBirthday) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("year", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:year: ", p), err)
	}
	if err := oprot.WriteString(string(p.Year)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.year (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:year: ", p), err)
	}
	return err
}

func (p *ExtendedProfileBirthday) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("yearPrivacyLevelType", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:yearPrivacyLevelType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.YearPrivacyLevelType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.yearPrivacyLevelType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:yearPrivacyLevelType: ", p), err)
	}
	return err
}

func (p *ExtendedProfileBirthday) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("yearEnabled", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:yearEnabled: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.YearEnabled)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.yearEnabled (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:yearEnabled: ", p), err)
	}
	return err
}

func (p *ExtendedProfileBirthday) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("day", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:day: ", p), err)
	}
	if err := oprot.WriteString(string(p.Day)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.day (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:day: ", p), err)
	}
	return err
}

func (p *ExtendedProfileBirthday) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dayPrivacyLevelType", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:dayPrivacyLevelType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DayPrivacyLevelType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dayPrivacyLevelType (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:dayPrivacyLevelType: ", p), err)
	}
	return err
}

func (p *ExtendedProfileBirthday) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dayEnabled", thrift.BOOL, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:dayEnabled: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.DayEnabled)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dayEnabled (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:dayEnabled: ", p), err)
	}
	return err
}

func (p *ExtendedProfileBirthday) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExtendedProfileBirthday(%+v)", *p)
}

// Attributes:
//  - Birthday
type ExtendedProfile struct {
	Birthday *ExtendedProfileBirthday `thrift:"birthday,1" db:"birthday" json:"birthday"`
}

func NewExtendedProfile() *ExtendedProfile {
	return &ExtendedProfile{}
}

var ExtendedProfile_Birthday_DEFAULT *ExtendedProfileBirthday

func (p *ExtendedProfile) GetBirthday() *ExtendedProfileBirthday {
	if !p.IsSetBirthday() {
		return ExtendedProfile_Birthday_DEFAULT
	}
	return p.Birthday
}
func (p *ExtendedProfile) IsSetBirthday() bool {
	return p.Birthday != nil
}

func (p *ExtendedProfile) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ExtendedProfile) ReadField1(iprot thrift.TProtocol) error {
	p.Birthday = &ExtendedProfileBirthday{}
	if err := p.Birthday.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Birthday), err)
	}
	return nil
}

func (p *ExtendedProfile) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ExtendedProfile"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ExtendedProfile) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("birthday", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:birthday: ", p), err)
	}
	if err := p.Birthday.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Birthday), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:birthday: ", p), err)
	}
	return err
}

func (p *ExtendedProfile) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExtendedProfile(%+v)", *p)
}

// Attributes:
//  - RadiusMeters
//  - RadiusConfidence
type GeolocationAccurac struct {
	RadiusMeters     float64 `thrift:"radiusMeters,1" db:"radiusMeters" json:"radiusMeters"`
	RadiusConfidence float64 `thrift:"radiusConfidence,2" db:"radiusConfidence" json:"radiusConfidence"`
}

func NewGeolocationAccurac() *GeolocationAccurac {
	return &GeolocationAccurac{}
}

func (p *GeolocationAccurac) GetRadiusMeters() float64 {
	return p.RadiusMeters
}

func (p *GeolocationAccurac) GetRadiusConfidence() float64 {
	return p.RadiusConfidence
}
func (p *GeolocationAccurac) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeolocationAccurac) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.RadiusMeters = v
	}
	return nil
}

func (p *GeolocationAccurac) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RadiusConfidence = v
	}
	return nil
}

func (p *GeolocationAccurac) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GeolocationAccurac"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeolocationAccurac) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("radiusMeters", thrift.DOUBLE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:radiusMeters: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.RadiusMeters)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.radiusMeters (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:radiusMeters: ", p), err)
	}
	return err
}

func (p *GeolocationAccurac) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("radiusConfidence", thrift.DOUBLE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:radiusConfidence: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.RadiusConfidence)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.radiusConfidence (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:radiusConfidence: ", p), err)
	}
	return err
}

func (p *GeolocationAccurac) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeolocationAccurac(%+v)", *p)
}

// Attributes:
//  - RadiusMeters
//  - RadiusConfidence
type GeolocationAccuracy struct {
	RadiusMeters     float64 `thrift:"radiusMeters,1" db:"radiusMeters" json:"radiusMeters"`
	RadiusConfidence float64 `thrift:"radiusConfidence,2" db:"radiusConfidence" json:"radiusConfidence"`
}

func NewGeolocationAccuracy() *GeolocationAccuracy {
	return &GeolocationAccuracy{}
}

func (p *GeolocationAccuracy) GetRadiusMeters() float64 {
	return p.RadiusMeters
}

func (p *GeolocationAccuracy) GetRadiusConfidence() float64 {
	return p.RadiusConfidence
}
func (p *GeolocationAccuracy) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeolocationAccuracy) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.RadiusMeters = v
	}
	return nil
}

func (p *GeolocationAccuracy) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RadiusConfidence = v
	}
	return nil
}

func (p *GeolocationAccuracy) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GeolocationAccuracy"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeolocationAccuracy) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("radiusMeters", thrift.DOUBLE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:radiusMeters: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.RadiusMeters)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.radiusMeters (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:radiusMeters: ", p), err)
	}
	return err
}

func (p *GeolocationAccuracy) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("radiusConfidence", thrift.DOUBLE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:radiusConfidence: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.RadiusConfidence)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.radiusConfidence (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:radiusConfidence: ", p), err)
	}
	return err
}

func (p *GeolocationAccuracy) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeolocationAccuracy(%+v)", *p)
}

// Attributes:
//  - Longitude
//  - Latitude
//  - Accuracy
type Geolocation struct {
	Longitude float64              `thrift:"longitude,1" db:"longitude" json:"longitude"`
	Latitude  float64              `thrift:"latitude,2" db:"latitude" json:"latitude"`
	Accuracy  *GeolocationAccuracy `thrift:"accuracy,3" db:"accuracy" json:"accuracy"`
}

func NewGeolocation() *Geolocation {
	return &Geolocation{}
}

func (p *Geolocation) GetLongitude() float64 {
	return p.Longitude
}

func (p *Geolocation) GetLatitude() float64 {
	return p.Latitude
}

var Geolocation_Accuracy_DEFAULT *GeolocationAccuracy

func (p *Geolocation) GetAccuracy() *GeolocationAccuracy {
	if !p.IsSetAccuracy() {
		return Geolocation_Accuracy_DEFAULT
	}
	return p.Accuracy
}
func (p *Geolocation) IsSetAccuracy() bool {
	return p.Accuracy != nil
}

func (p *Geolocation) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Geolocation) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Longitude = v
	}
	return nil
}

func (p *Geolocation) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Latitude = v
	}
	return nil
}

func (p *Geolocation) ReadField3(iprot thrift.TProtocol) error {
	p.Accuracy = &GeolocationAccuracy{}
	if err := p.Accuracy.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Accuracy), err)
	}
	return nil
}

func (p *Geolocation) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Geolocation"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Geolocation) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("longitude", thrift.DOUBLE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:longitude: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Longitude)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.longitude (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:longitude: ", p), err)
	}
	return err
}

func (p *Geolocation) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("latitude", thrift.DOUBLE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:latitude: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Latitude)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.latitude (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:latitude: ", p), err)
	}
	return err
}

func (p *Geolocation) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("accuracy", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:accuracy: ", p), err)
	}
	if err := p.Accuracy.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Accuracy), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:accuracy: ", p), err)
	}
	return err
}

func (p *Geolocation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Geolocation(%+v)", *p)
}

// Attributes:
//  - NetworkType
type ClientNetworkStatus struct {
	NetworkType NetworkType `thrift:"networkType,1" db:"networkType" json:"networkType"`
}

func NewClientNetworkStatus() *ClientNetworkStatus {
	return &ClientNetworkStatus{}
}

func (p *ClientNetworkStatus) GetNetworkType() NetworkType {
	return p.NetworkType
}
func (p *ClientNetworkStatus) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ClientNetworkStatus) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := NetworkType(v)
		p.NetworkType = temp
	}
	return nil
}

func (p *ClientNetworkStatus) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ClientNetworkStatus"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ClientNetworkStatus) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("networkType", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:networkType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.NetworkType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.networkType (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:networkType: ", p), err)
	}
	return err
}

func (p *ClientNetworkStatus) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClientNetworkStatus(%+v)", *p)
}

// Attributes:
//  - ProductType
//  - ProductName
//  - Unit
//  - LimitedPaidBalance
//  - LimitedFreeBalance
//  - UnlimitedPaidBalance
//  - UnlimitedFreeBalance
//  - StartTime
//  - EndTime
//  - AutopayEnabled
type PaidCallBalance struct {
	ProductType          ProductType `thrift:"productType,1" db:"productType" json:"productType"`
	ProductName          string      `thrift:"productName,2" db:"productName" json:"productName"`
	Unit                 string      `thrift:"unit,3" db:"unit" json:"unit"`
	LimitedPaidBalance   int32       `thrift:"limitedPaidBalance,4" db:"limitedPaidBalance" json:"limitedPaidBalance"`
	LimitedFreeBalance   int32       `thrift:"limitedFreeBalance,5" db:"limitedFreeBalance" json:"limitedFreeBalance"`
	UnlimitedPaidBalance int32       `thrift:"unlimitedPaidBalance,6" db:"unlimitedPaidBalance" json:"unlimitedPaidBalance"`
	UnlimitedFreeBalance int32       `thrift:"unlimitedFreeBalance,7" db:"unlimitedFreeBalance" json:"unlimitedFreeBalance"`
	StartTime            int64       `thrift:"startTime,8" db:"startTime" json:"startTime"`
	EndTime              int64       `thrift:"endTime,9" db:"endTime" json:"endTime"`
	AutopayEnabled       bool        `thrift:"autopayEnabled,10" db:"autopayEnabled" json:"autopayEnabled"`
}

func NewPaidCallBalance() *PaidCallBalance {
	return &PaidCallBalance{}
}

func (p *PaidCallBalance) GetProductType() ProductType {
	return p.ProductType
}

func (p *PaidCallBalance) GetProductName() string {
	return p.ProductName
}

func (p *PaidCallBalance) GetUnit() string {
	return p.Unit
}

func (p *PaidCallBalance) GetLimitedPaidBalance() int32 {
	return p.LimitedPaidBalance
}

func (p *PaidCallBalance) GetLimitedFreeBalance() int32 {
	return p.LimitedFreeBalance
}

func (p *PaidCallBalance) GetUnlimitedPaidBalance() int32 {
	return p.UnlimitedPaidBalance
}

func (p *PaidCallBalance) GetUnlimitedFreeBalance() int32 {
	return p.UnlimitedFreeBalance
}

func (p *PaidCallBalance) GetStartTime() int64 {
	return p.StartTime
}

func (p *PaidCallBalance) GetEndTime() int64 {
	return p.EndTime
}

func (p *PaidCallBalance) GetAutopayEnabled() bool {
	return p.AutopayEnabled
}
func (p *PaidCallBalance) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PaidCallBalance) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := ProductType(v)
		p.ProductType = temp
	}
	return nil
}

func (p *PaidCallBalance) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ProductName = v
	}
	return nil
}

func (p *PaidCallBalance) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Unit = v
	}
	return nil
}

func (p *PaidCallBalance) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.LimitedPaidBalance = v
	}
	return nil
}

func (p *PaidCallBalance) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.LimitedFreeBalance = v
	}
	return nil
}

func (p *PaidCallBalance) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.UnlimitedPaidBalance = v
	}
	return nil
}

func (p *PaidCallBalance) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.UnlimitedFreeBalance = v
	}
	return nil
}

func (p *PaidCallBalance) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.StartTime = v
	}
	return nil
}

func (p *PaidCallBalance) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.EndTime = v
	}
	return nil
}

func (p *PaidCallBalance) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.AutopayEnabled = v
	}
	return nil
}

func (p *PaidCallBalance) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PaidCallBalance"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PaidCallBalance) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("productType", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:productType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProductType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.productType (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:productType: ", p), err)
	}
	return err
}

func (p *PaidCallBalance) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("productName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:productName: ", p), err)
	}
	if err := oprot.WriteString(string(p.ProductName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.productName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:productName: ", p), err)
	}
	return err
}

func (p *PaidCallBalance) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("unit", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:unit: ", p), err)
	}
	if err := oprot.WriteString(string(p.Unit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.unit (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:unit: ", p), err)
	}
	return err
}

func (p *PaidCallBalance) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limitedPaidBalance", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:limitedPaidBalance: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.LimitedPaidBalance)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.limitedPaidBalance (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:limitedPaidBalance: ", p), err)
	}
	return err
}

func (p *PaidCallBalance) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limitedFreeBalance", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:limitedFreeBalance: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.LimitedFreeBalance)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.limitedFreeBalance (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:limitedFreeBalance: ", p), err)
	}
	return err
}

func (p *PaidCallBalance) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("unlimitedPaidBalance", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:unlimitedPaidBalance: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UnlimitedPaidBalance)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.unlimitedPaidBalance (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:unlimitedPaidBalance: ", p), err)
	}
	return err
}

func (p *PaidCallBalance) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("unlimitedFreeBalance", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:unlimitedFreeBalance: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UnlimitedFreeBalance)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.unlimitedFreeBalance (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:unlimitedFreeBalance: ", p), err)
	}
	return err
}

func (p *PaidCallBalance) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startTime", thrift.I64, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:startTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startTime (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:startTime: ", p), err)
	}
	return err
}

func (p *PaidCallBalance) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endTime", thrift.I64, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:endTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.EndTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.endTime (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:endTime: ", p), err)
	}
	return err
}

func (p *PaidCallBalance) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("autopayEnabled", thrift.BOOL, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:autopayEnabled: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.AutopayEnabled)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.autopayEnabled (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:autopayEnabled: ", p), err)
	}
	return err
}

func (p *PaidCallBalance) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaidCallBalance(%+v)", *p)
}

// Attributes:
//  - Creator
//  - PreventedJoinByTicket
//  - InvitationTicket
//  - MemberMids
//  - InviteeMids
type GroupExtra struct {
	Creator               string           `thrift:"creator,1" db:"creator" json:"creator"`
	PreventedJoinByTicket bool             `thrift:"preventedJoinByTicket,2" db:"preventedJoinByTicket" json:"preventedJoinByTicket"`
	InvitationTicket      string           `thrift:"invitationTicket,3" db:"invitationTicket" json:"invitationTicket"`
	MemberMids            map[string]int64 `thrift:"memberMids,4" db:"memberMids" json:"memberMids"`
	InviteeMids           map[string]int64 `thrift:"inviteeMids,5" db:"inviteeMids" json:"inviteeMids"`
}

func NewGroupExtra() *GroupExtra {
	return &GroupExtra{}
}

func (p *GroupExtra) GetCreator() string {
	return p.Creator
}

func (p *GroupExtra) GetPreventedJoinByTicket() bool {
	return p.PreventedJoinByTicket
}

func (p *GroupExtra) GetInvitationTicket() string {
	return p.InvitationTicket
}

func (p *GroupExtra) GetMemberMids() map[string]int64 {
	return p.MemberMids
}

func (p *GroupExtra) GetInviteeMids() map[string]int64 {
	return p.InviteeMids
}
func (p *GroupExtra) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GroupExtra) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Creator = v
	}
	return nil
}

func (p *GroupExtra) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PreventedJoinByTicket = v
	}
	return nil
}

func (p *GroupExtra) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.InvitationTicket = v
	}
	return nil
}

func (p *GroupExtra) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]int64, size)
	p.MemberMids = tMap
	for i := 0; i < size; i++ {
		var _key2 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key2 = v
		}
		var _val3 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val3 = v
		}
		p.MemberMids[_key2] = _val3
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *GroupExtra) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]int64, size)
	p.InviteeMids = tMap
	for i := 0; i < size; i++ {
		var _key4 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key4 = v
		}
		var _val5 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val5 = v
		}
		p.InviteeMids[_key4] = _val5
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *GroupExtra) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupExtra"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GroupExtra) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("creator", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:creator: ", p), err)
	}
	if err := oprot.WriteString(string(p.Creator)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.creator (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:creator: ", p), err)
	}
	return err
}

func (p *GroupExtra) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("preventedJoinByTicket", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:preventedJoinByTicket: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PreventedJoinByTicket)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.preventedJoinByTicket (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:preventedJoinByTicket: ", p), err)
	}
	return err
}

func (p *GroupExtra) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("invitationTicket", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:invitationTicket: ", p), err)
	}
	if err := oprot.WriteString(string(p.InvitationTicket)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.invitationTicket (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:invitationTicket: ", p), err)
	}
	return err
}

func (p *GroupExtra) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberMids", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:memberMids: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.MemberMids)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.MemberMids {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:memberMids: ", p), err)
	}
	return err
}

func (p *GroupExtra) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("inviteeMids", thrift.MAP, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:inviteeMids: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.InviteeMids)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.InviteeMids {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:inviteeMids: ", p), err)
	}
	return err
}

func (p *GroupExtra) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupExtra(%+v)", *p)
}

type PeerExtra struct {
}

func NewPeerExtra() *PeerExtra {
	return &PeerExtra{}
}

func (p *PeerExtra) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PeerExtra) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PeerExtra"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PeerExtra) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PeerExtra(%+v)", *p)
}

// Attributes:
//  - GroupExtra
//  - PeerExtra
type Extra struct {
	GroupExtra *GroupExtra `thrift:"groupExtra,1" db:"groupExtra" json:"groupExtra"`
	PeerExtra  *PeerExtra  `thrift:"peerExtra,2" db:"peerExtra" json:"peerExtra"`
}

func NewExtra() *Extra {
	return &Extra{}
}

var Extra_GroupExtra_DEFAULT *GroupExtra

func (p *Extra) GetGroupExtra() *GroupExtra {
	if !p.IsSetGroupExtra() {
		return Extra_GroupExtra_DEFAULT
	}
	return p.GroupExtra
}

var Extra_PeerExtra_DEFAULT *PeerExtra

func (p *Extra) GetPeerExtra() *PeerExtra {
	if !p.IsSetPeerExtra() {
		return Extra_PeerExtra_DEFAULT
	}
	return p.PeerExtra
}
func (p *Extra) IsSetGroupExtra() bool {
	return p.GroupExtra != nil
}

func (p *Extra) IsSetPeerExtra() bool {
	return p.PeerExtra != nil
}

func (p *Extra) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Extra) ReadField1(iprot thrift.TProtocol) error {
	p.GroupExtra = &GroupExtra{}
	if err := p.GroupExtra.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GroupExtra), err)
	}
	return nil
}

func (p *Extra) ReadField2(iprot thrift.TProtocol) error {
	p.PeerExtra = &PeerExtra{}
	if err := p.PeerExtra.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PeerExtra), err)
	}
	return nil
}

func (p *Extra) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Extra"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Extra) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupExtra", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:groupExtra: ", p), err)
	}
	if err := p.GroupExtra.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GroupExtra), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:groupExtra: ", p), err)
	}
	return err
}

func (p *Extra) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("peerExtra", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:peerExtra: ", p), err)
	}
	if err := p.PeerExtra.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PeerExtra), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:peerExtra: ", p), err)
	}
	return err
}

func (p *Extra) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Extra(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Type
//  - Name
//  - TargetUserMids
//  - PicturePath
type CreateChatRequest struct {
	ReqSeq         int32    `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	Type           ChatType `thrift:"type,2" db:"type" json:"type"`
	Name           string   `thrift:"name,3" db:"name" json:"name"`
	TargetUserMids []string `thrift:"targetUserMids,4" db:"targetUserMids" json:"targetUserMids"`
	PicturePath    string   `thrift:"picturePath,5" db:"picturePath" json:"picturePath"`
}

func NewCreateChatRequest() *CreateChatRequest {
	return &CreateChatRequest{}
}

func (p *CreateChatRequest) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *CreateChatRequest) GetType() ChatType {
	return p.Type
}

func (p *CreateChatRequest) GetName() string {
	return p.Name
}

func (p *CreateChatRequest) GetTargetUserMids() []string {
	return p.TargetUserMids
}

func (p *CreateChatRequest) GetPicturePath() string {
	return p.PicturePath
}
func (p *CreateChatRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CreateChatRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *CreateChatRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := ChatType(v)
		p.Type = temp
	}
	return nil
}

func (p *CreateChatRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *CreateChatRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]string, 0, size)
	p.TargetUserMids = tSet
	for i := 0; i < size; i++ {
		var _elem6 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem6 = v
		}
		p.TargetUserMids = append(p.TargetUserMids, _elem6)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *CreateChatRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.PicturePath = v
	}
	return nil
}

func (p *CreateChatRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateChatRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CreateChatRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *CreateChatRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *CreateChatRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err)
	}
	return err
}

func (p *CreateChatRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("targetUserMids", thrift.SET, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:targetUserMids: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.TargetUserMids)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for i := 0; i < len(p.TargetUserMids); i++ {
		for j := i + 1; j < len(p.TargetUserMids); j++ {
			if reflect.DeepEqual(p.TargetUserMids[i], p.TargetUserMids[j]) {
				return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.TargetUserMids[i]))
			}
		}
	}
	for _, v := range p.TargetUserMids {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:targetUserMids: ", p), err)
	}
	return err
}

func (p *CreateChatRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("picturePath", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:picturePath: ", p), err)
	}
	if err := oprot.WriteString(string(p.PicturePath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.picturePath (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:picturePath: ", p), err)
	}
	return err
}

func (p *CreateChatRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateChatRequest(%+v)", *p)
}

// Attributes:
//  - Type
//  - ChatMid
//  - CreatedTime
//  - NotificationDisabled
//  - FavoriteTimestamp
//  - ChatName
//  - PicturePath
//  - Extra
type Chat struct {
	Type                 ChatType `thrift:"type,1" db:"type" json:"type"`
	ChatMid              string   `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
	CreatedTime          int64    `thrift:"createdTime,3" db:"createdTime" json:"createdTime"`
	NotificationDisabled bool     `thrift:"notificationDisabled,4" db:"notificationDisabled" json:"notificationDisabled"`
	FavoriteTimestamp    int64    `thrift:"favoriteTimestamp,5" db:"favoriteTimestamp" json:"favoriteTimestamp"`
	ChatName             string   `thrift:"chatName,6" db:"chatName" json:"chatName"`
	PicturePath          string   `thrift:"picturePath,7" db:"picturePath" json:"picturePath"`
	Extra                *Extra   `thrift:"extra,8" db:"extra" json:"extra"`
}

func NewChat() *Chat {
	return &Chat{}
}

func (p *Chat) GetType() ChatType {
	return p.Type
}

func (p *Chat) GetChatMid() string {
	return p.ChatMid
}

func (p *Chat) GetCreatedTime() int64 {
	return p.CreatedTime
}

func (p *Chat) GetNotificationDisabled() bool {
	return p.NotificationDisabled
}

func (p *Chat) GetFavoriteTimestamp() int64 {
	return p.FavoriteTimestamp
}

func (p *Chat) GetChatName() string {
	return p.ChatName
}

func (p *Chat) GetPicturePath() string {
	return p.PicturePath
}

var Chat_Extra_DEFAULT *Extra

func (p *Chat) GetExtra() *Extra {
	if !p.IsSetExtra() {
		return Chat_Extra_DEFAULT
	}
	return p.Extra
}
func (p *Chat) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *Chat) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Chat) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := ChatType(v)
		p.Type = temp
	}
	return nil
}

func (p *Chat) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChatMid = v
	}
	return nil
}

func (p *Chat) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.CreatedTime = v
	}
	return nil
}

func (p *Chat) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.NotificationDisabled = v
	}
	return nil
}

func (p *Chat) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.FavoriteTimestamp = v
	}
	return nil
}

func (p *Chat) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ChatName = v
	}
	return nil
}

func (p *Chat) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.PicturePath = v
	}
	return nil
}

func (p *Chat) ReadField8(iprot thrift.TProtocol) error {
	p.Extra = &Extra{}
	if err := p.Extra.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Extra), err)
	}
	return nil
}

func (p *Chat) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Chat"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Chat) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *Chat) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChatMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err)
	}
	return err
}

func (p *Chat) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:createdTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.createdTime (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:createdTime: ", p), err)
	}
	return err
}

func (p *Chat) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationDisabled", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:notificationDisabled: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.NotificationDisabled)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notificationDisabled (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:notificationDisabled: ", p), err)
	}
	return err
}

func (p *Chat) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("favoriteTimestamp", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:favoriteTimestamp: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.FavoriteTimestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.favoriteTimestamp (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:favoriteTimestamp: ", p), err)
	}
	return err
}

func (p *Chat) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatName", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:chatName: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChatName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatName (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:chatName: ", p), err)
	}
	return err
}

func (p *Chat) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("picturePath", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:picturePath: ", p), err)
	}
	if err := oprot.WriteString(string(p.PicturePath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.picturePath (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:picturePath: ", p), err)
	}
	return err
}

func (p *Chat) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extra", thrift.STRUCT, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:extra: ", p), err)
	}
	if err := p.Extra.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Extra), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:extra: ", p), err)
	}
	return err
}

func (p *Chat) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Chat(%+v)", *p)
}

// Attributes:
//  - Chat
type CreateChatResponse struct {
	Chat *Chat `thrift:"chat,1" db:"chat" json:"chat"`
}

func NewCreateChatResponse() *CreateChatResponse {
	return &CreateChatResponse{}
}

var CreateChatResponse_Chat_DEFAULT *Chat

func (p *CreateChatResponse) GetChat() *Chat {
	if !p.IsSetChat() {
		return CreateChatResponse_Chat_DEFAULT
	}
	return p.Chat
}
func (p *CreateChatResponse) IsSetChat() bool {
	return p.Chat != nil
}

func (p *CreateChatResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CreateChatResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Chat = &Chat{}
	if err := p.Chat.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Chat), err)
	}
	return nil
}

func (p *CreateChatResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateChatResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CreateChatResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chat", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chat: ", p), err)
	}
	if err := p.Chat.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Chat), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chat: ", p), err)
	}
	return err
}

func (p *CreateChatResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateChatResponse(%+v)", *p)
}

// Attributes:
//  - Version
//  - UpdatedMillis
//  - Thumbnail
type AvatarProfile struct {
	Version       string `thrift:"version,1" db:"version" json:"version"`
	UpdatedMillis int64  `thrift:"updatedMillis,2" db:"updatedMillis" json:"updatedMillis"`
	Thumbnail     string `thrift:"thumbnail,3" db:"thumbnail" json:"thumbnail"`
}

func NewAvatarProfile() *AvatarProfile {
	return &AvatarProfile{}
}

func (p *AvatarProfile) GetVersion() string {
	return p.Version
}

func (p *AvatarProfile) GetUpdatedMillis() int64 {
	return p.UpdatedMillis
}

func (p *AvatarProfile) GetThumbnail() string {
	return p.Thumbnail
}
func (p *AvatarProfile) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AvatarProfile) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *AvatarProfile) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UpdatedMillis = v
	}
	return nil
}

func (p *AvatarProfile) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Thumbnail = v
	}
	return nil
}

func (p *AvatarProfile) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AvatarProfile"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AvatarProfile) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version: ", p), err)
	}
	if err := oprot.WriteString(string(p.Version)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version: ", p), err)
	}
	return err
}

func (p *AvatarProfile) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updatedMillis", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:updatedMillis: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UpdatedMillis)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.updatedMillis (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:updatedMillis: ", p), err)
	}
	return err
}

func (p *AvatarProfile) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thumbnail", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:thumbnail: ", p), err)
	}
	if err := oprot.WriteString(string(p.Thumbnail)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.thumbnail (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:thumbnail: ", p), err)
	}
	return err
}

func (p *AvatarProfile) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AvatarProfile(%+v)", *p)
}

// Attributes:
//  - Mid
//  - CreatedTime
//  - Type
//  - Status
//  - Relation
//  - DisplayName
//  - PhoneticName
//  - PictureStatus
//  - ThumbnailUrl
//  - StatusMessage
//  - DisplayNameOverridden
//  - FavoriteTime
//  - CapableVoiceCall
//  - CapableVideoCall
//  - CapableMyhome
//  - CapableBuddy
//  - Attributes
//  - Settings
//  - PicturePath
//  - RecommendParams
//  - FriendRequestStatus
//  - MusicProfile
//  - SvideoProfile
//  - StatusMessageContentMetadata
//  - AvatarProfile
type Contact struct {
	Mid         string `thrift:"mid,1" db:"mid" json:"mid"`
	CreatedTime int64  `thrift:"createdTime,2" db:"createdTime" json:"createdTime"`
	// unused fields # 3 to 9
	Type   MIDType       `thrift:"type,10" db:"type" json:"type"`
	Status ContactStatus `thrift:"status,11" db:"status" json:"status"`
	// unused fields # 12 to 20
	Relation              ContactRelation `thrift:"relation,21" db:"relation" json:"relation"`
	DisplayName           string          `thrift:"displayName,22" db:"displayName" json:"displayName"`
	PhoneticName          string          `thrift:"phoneticName,23" db:"phoneticName" json:"phoneticName"`
	PictureStatus         string          `thrift:"pictureStatus,24" db:"pictureStatus" json:"pictureStatus"`
	ThumbnailUrl          string          `thrift:"thumbnailUrl,25" db:"thumbnailUrl" json:"thumbnailUrl"`
	StatusMessage         string          `thrift:"statusMessage,26" db:"statusMessage" json:"statusMessage"`
	DisplayNameOverridden string          `thrift:"displayNameOverridden,27" db:"displayNameOverridden" json:"displayNameOverridden"`
	FavoriteTime          int64           `thrift:"favoriteTime,28" db:"favoriteTime" json:"favoriteTime"`
	// unused fields # 29 to 30
	CapableVoiceCall    bool                `thrift:"capableVoiceCall,31" db:"capableVoiceCall" json:"capableVoiceCall"`
	CapableVideoCall    bool                `thrift:"capableVideoCall,32" db:"capableVideoCall" json:"capableVideoCall"`
	CapableMyhome       bool                `thrift:"capableMyhome,33" db:"capableMyhome" json:"capableMyhome"`
	CapableBuddy        bool                `thrift:"capableBuddy,34" db:"capableBuddy" json:"capableBuddy"`
	Attributes          int32               `thrift:"attributes,35" db:"attributes" json:"attributes"`
	Settings            int64               `thrift:"settings,36" db:"settings" json:"settings"`
	PicturePath         string              `thrift:"picturePath,37" db:"picturePath" json:"picturePath"`
	RecommendParams     string              `thrift:"recommendParams,38" db:"recommendParams" json:"recommendParams"`
	FriendRequestStatus FriendRequestStatus `thrift:"friendRequestStatus,39" db:"friendRequestStatus" json:"friendRequestStatus"`
	MusicProfile        string              `thrift:"musicProfile,40" db:"musicProfile" json:"musicProfile"`
	// unused field # 41
	SvideoProfile                string            `thrift:"svideoProfile,42" db:"svideoProfile" json:"svideoProfile"`
	StatusMessageContentMetadata map[string]string `thrift:"statusMessageContentMetadata,43" db:"statusMessageContentMetadata" json:"statusMessageContentMetadata"`
	AvatarProfile                *AvatarProfile    `thrift:"avatarProfile,44" db:"avatarProfile" json:"avatarProfile"`
}

func NewContact() *Contact {
	return &Contact{}
}

func (p *Contact) GetMid() string {
	return p.Mid
}

func (p *Contact) GetCreatedTime() int64 {
	return p.CreatedTime
}

func (p *Contact) GetType() MIDType {
	return p.Type
}

func (p *Contact) GetStatus() ContactStatus {
	return p.Status
}

func (p *Contact) GetRelation() ContactRelation {
	return p.Relation
}

func (p *Contact) GetDisplayName() string {
	return p.DisplayName
}

func (p *Contact) GetPhoneticName() string {
	return p.PhoneticName
}

func (p *Contact) GetPictureStatus() string {
	return p.PictureStatus
}

func (p *Contact) GetThumbnailUrl() string {
	return p.ThumbnailUrl
}

func (p *Contact) GetStatusMessage() string {
	return p.StatusMessage
}

func (p *Contact) GetDisplayNameOverridden() string {
	return p.DisplayNameOverridden
}

func (p *Contact) GetFavoriteTime() int64 {
	return p.FavoriteTime
}

func (p *Contact) GetCapableVoiceCall() bool {
	return p.CapableVoiceCall
}

func (p *Contact) GetCapableVideoCall() bool {
	return p.CapableVideoCall
}

func (p *Contact) GetCapableMyhome() bool {
	return p.CapableMyhome
}

func (p *Contact) GetCapableBuddy() bool {
	return p.CapableBuddy
}

func (p *Contact) GetAttributes() int32 {
	return p.Attributes
}

func (p *Contact) GetSettings() int64 {
	return p.Settings
}

func (p *Contact) GetPicturePath() string {
	return p.PicturePath
}

func (p *Contact) GetRecommendParams() string {
	return p.RecommendParams
}

func (p *Contact) GetFriendRequestStatus() FriendRequestStatus {
	return p.FriendRequestStatus
}

func (p *Contact) GetMusicProfile() string {
	return p.MusicProfile
}

func (p *Contact) GetSvideoProfile() string {
	return p.SvideoProfile
}

func (p *Contact) GetStatusMessageContentMetadata() map[string]string {
	return p.StatusMessageContentMetadata
}

var Contact_AvatarProfile_DEFAULT *AvatarProfile

func (p *Contact) GetAvatarProfile() *AvatarProfile {
	if !p.IsSetAvatarProfile() {
		return Contact_AvatarProfile_DEFAULT
	}
	return p.AvatarProfile
}
func (p *Contact) IsSetAvatarProfile() bool {
	return p.AvatarProfile != nil
}

func (p *Contact) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 21:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField21(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 22:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField22(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 23:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField23(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 24:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField24(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 25:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField25(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 26:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField26(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 27:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField27(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 28:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField28(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 31:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField31(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 32:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField32(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 33:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField33(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 34:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField34(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 35:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField35(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 36:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField36(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 37:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField37(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 38:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField38(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 39:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField39(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 40:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField40(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 42:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField42(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 43:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField43(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 44:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField44(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Contact) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *Contact) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.CreatedTime = v
	}
	return nil
}

func (p *Contact) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		temp := MIDType(v)
		p.Type = temp
	}
	return nil
}

func (p *Contact) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		temp := ContactStatus(v)
		p.Status = temp
	}
	return nil
}

func (p *Contact) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		temp := ContactRelation(v)
		p.Relation = temp
	}
	return nil
}

func (p *Contact) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		p.DisplayName = v
	}
	return nil
}

func (p *Contact) ReadField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		p.PhoneticName = v
	}
	return nil
}

func (p *Contact) ReadField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 24: ", err)
	} else {
		p.PictureStatus = v
	}
	return nil
}

func (p *Contact) ReadField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 25: ", err)
	} else {
		p.ThumbnailUrl = v
	}
	return nil
}

func (p *Contact) ReadField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 26: ", err)
	} else {
		p.StatusMessage = v
	}
	return nil
}

func (p *Contact) ReadField27(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 27: ", err)
	} else {
		p.DisplayNameOverridden = v
	}
	return nil
}

func (p *Contact) ReadField28(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 28: ", err)
	} else {
		p.FavoriteTime = v
	}
	return nil
}

func (p *Contact) ReadField31(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 31: ", err)
	} else {
		p.CapableVoiceCall = v
	}
	return nil
}

func (p *Contact) ReadField32(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 32: ", err)
	} else {
		p.CapableVideoCall = v
	}
	return nil
}

func (p *Contact) ReadField33(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 33: ", err)
	} else {
		p.CapableMyhome = v
	}
	return nil
}

func (p *Contact) ReadField34(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 34: ", err)
	} else {
		p.CapableBuddy = v
	}
	return nil
}

func (p *Contact) ReadField35(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 35: ", err)
	} else {
		p.Attributes = v
	}
	return nil
}

func (p *Contact) ReadField36(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 36: ", err)
	} else {
		p.Settings = v
	}
	return nil
}

func (p *Contact) ReadField37(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 37: ", err)
	} else {
		p.PicturePath = v
	}
	return nil
}

func (p *Contact) ReadField38(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 38: ", err)
	} else {
		p.RecommendParams = v
	}
	return nil
}

func (p *Contact) ReadField39(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 39: ", err)
	} else {
		temp := FriendRequestStatus(v)
		p.FriendRequestStatus = temp
	}
	return nil
}

func (p *Contact) ReadField40(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 40: ", err)
	} else {
		p.MusicProfile = v
	}
	return nil
}

func (p *Contact) ReadField42(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 42: ", err)
	} else {
		p.SvideoProfile = v
	}
	return nil
}

func (p *Contact) ReadField43(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.StatusMessageContentMetadata = tMap
	for i := 0; i < size; i++ {
		var _key7 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key7 = v
		}
		var _val8 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val8 = v
		}
		p.StatusMessageContentMetadata[_key7] = _val8
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Contact) ReadField44(iprot thrift.TProtocol) error {
	p.AvatarProfile = &AvatarProfile{}
	if err := p.AvatarProfile.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AvatarProfile), err)
	}
	return nil
}

func (p *Contact) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Contact"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField21(oprot); err != nil {
			return err
		}
		if err := p.writeField22(oprot); err != nil {
			return err
		}
		if err := p.writeField23(oprot); err != nil {
			return err
		}
		if err := p.writeField24(oprot); err != nil {
			return err
		}
		if err := p.writeField25(oprot); err != nil {
			return err
		}
		if err := p.writeField26(oprot); err != nil {
			return err
		}
		if err := p.writeField27(oprot); err != nil {
			return err
		}
		if err := p.writeField28(oprot); err != nil {
			return err
		}
		if err := p.writeField31(oprot); err != nil {
			return err
		}
		if err := p.writeField32(oprot); err != nil {
			return err
		}
		if err := p.writeField33(oprot); err != nil {
			return err
		}
		if err := p.writeField34(oprot); err != nil {
			return err
		}
		if err := p.writeField35(oprot); err != nil {
			return err
		}
		if err := p.writeField36(oprot); err != nil {
			return err
		}
		if err := p.writeField37(oprot); err != nil {
			return err
		}
		if err := p.writeField38(oprot); err != nil {
			return err
		}
		if err := p.writeField39(oprot); err != nil {
			return err
		}
		if err := p.writeField40(oprot); err != nil {
			return err
		}
		if err := p.writeField42(oprot); err != nil {
			return err
		}
		if err := p.writeField43(oprot); err != nil {
			return err
		}
		if err := p.writeField44(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Contact) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err)
	}
	return err
}

func (p *Contact) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.createdTime (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTime: ", p), err)
	}
	return err
}

func (p *Contact) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:type: ", p), err)
	}
	return err
}

func (p *Contact) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:status: ", p), err)
	}
	return err
}

func (p *Contact) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("relation", thrift.I32, 21); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:relation: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Relation)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.relation (21) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 21:relation: ", p), err)
	}
	return err
}

func (p *Contact) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 22); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:displayName: ", p), err)
	}
	if err := oprot.WriteString(string(p.DisplayName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.displayName (22) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 22:displayName: ", p), err)
	}
	return err
}

func (p *Contact) writeField23(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phoneticName", thrift.STRING, 23); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:phoneticName: ", p), err)
	}
	if err := oprot.WriteString(string(p.PhoneticName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.phoneticName (23) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 23:phoneticName: ", p), err)
	}
	return err
}

func (p *Contact) writeField24(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pictureStatus", thrift.STRING, 24); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:pictureStatus: ", p), err)
	}
	if err := oprot.WriteString(string(p.PictureStatus)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pictureStatus (24) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 24:pictureStatus: ", p), err)
	}
	return err
}

func (p *Contact) writeField25(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thumbnailUrl", thrift.STRING, 25); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:thumbnailUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.ThumbnailUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.thumbnailUrl (25) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 25:thumbnailUrl: ", p), err)
	}
	return err
}

func (p *Contact) writeField26(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("statusMessage", thrift.STRING, 26); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:statusMessage: ", p), err)
	}
	if err := oprot.WriteString(string(p.StatusMessage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.statusMessage (26) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 26:statusMessage: ", p), err)
	}
	return err
}

func (p *Contact) writeField27(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("displayNameOverridden", thrift.STRING, 27); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:displayNameOverridden: ", p), err)
	}
	if err := oprot.WriteString(string(p.DisplayNameOverridden)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.displayNameOverridden (27) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 27:displayNameOverridden: ", p), err)
	}
	return err
}

func (p *Contact) writeField28(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("favoriteTime", thrift.I64, 28); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:favoriteTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.FavoriteTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.favoriteTime (28) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 28:favoriteTime: ", p), err)
	}
	return err
}

func (p *Contact) writeField31(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("capableVoiceCall", thrift.BOOL, 31); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:capableVoiceCall: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.CapableVoiceCall)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.capableVoiceCall (31) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 31:capableVoiceCall: ", p), err)
	}
	return err
}

func (p *Contact) writeField32(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("capableVideoCall", thrift.BOOL, 32); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:capableVideoCall: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.CapableVideoCall)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.capableVideoCall (32) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 32:capableVideoCall: ", p), err)
	}
	return err
}

func (p *Contact) writeField33(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("capableMyhome", thrift.BOOL, 33); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:capableMyhome: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.CapableMyhome)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.capableMyhome (33) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 33:capableMyhome: ", p), err)
	}
	return err
}

func (p *Contact) writeField34(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("capableBuddy", thrift.BOOL, 34); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:capableBuddy: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.CapableBuddy)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.capableBuddy (34) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 34:capableBuddy: ", p), err)
	}
	return err
}

func (p *Contact) writeField35(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributes", thrift.I32, 35); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:attributes: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Attributes)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.attributes (35) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 35:attributes: ", p), err)
	}
	return err
}

func (p *Contact) writeField36(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("settings", thrift.I64, 36); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 36:settings: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Settings)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.settings (36) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 36:settings: ", p), err)
	}
	return err
}

func (p *Contact) writeField37(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("picturePath", thrift.STRING, 37); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 37:picturePath: ", p), err)
	}
	if err := oprot.WriteString(string(p.PicturePath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.picturePath (37) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 37:picturePath: ", p), err)
	}
	return err
}

func (p *Contact) writeField38(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("recommendParams", thrift.STRING, 38); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 38:recommendParams: ", p), err)
	}
	if err := oprot.WriteString(string(p.RecommendParams)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.recommendParams (38) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 38:recommendParams: ", p), err)
	}
	return err
}

func (p *Contact) writeField39(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("friendRequestStatus", thrift.I32, 39); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 39:friendRequestStatus: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.FriendRequestStatus)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.friendRequestStatus (39) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 39:friendRequestStatus: ", p), err)
	}
	return err
}

func (p *Contact) writeField40(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("musicProfile", thrift.STRING, 40); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:musicProfile: ", p), err)
	}
	if err := oprot.WriteString(string(p.MusicProfile)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.musicProfile (40) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 40:musicProfile: ", p), err)
	}
	return err
}

func (p *Contact) writeField42(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("svideoProfile", thrift.STRING, 42); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 42:svideoProfile: ", p), err)
	}
	if err := oprot.WriteString(string(p.SvideoProfile)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.svideoProfile (42) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 42:svideoProfile: ", p), err)
	}
	return err
}

func (p *Contact) writeField43(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("statusMessageContentMetadata", thrift.MAP, 43); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 43:statusMessageContentMetadata: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.StatusMessageContentMetadata)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.StatusMessageContentMetadata {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 43:statusMessageContentMetadata: ", p), err)
	}
	return err
}

func (p *Contact) writeField44(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("avatarProfile", thrift.STRUCT, 44); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 44:avatarProfile: ", p), err)
	}
	if err := p.AvatarProfile.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AvatarProfile), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 44:avatarProfile: ", p), err)
	}
	return err
}

func (p *Contact) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Contact(%+v)", *p)
}

// Attributes:
//  - ID
//  - ExpirationTime
//  - MaxUseCount
type Ticket struct {
	ID             string `thrift:"id,1" db:"id" json:"id"`
	ExpirationTime int64  `thrift:"expirationTime,2" db:"expirationTime" json:"expirationTime"`
	MaxUseCount    int32  `thrift:"maxUseCount,3" db:"maxUseCount" json:"maxUseCount"`
}

func NewTicket() *Ticket {
	return &Ticket{}
}

func (p *Ticket) GetID() string {
	return p.ID
}

func (p *Ticket) GetExpirationTime() int64 {
	return p.ExpirationTime
}

func (p *Ticket) GetMaxUseCount() int32 {
	return p.MaxUseCount
}
func (p *Ticket) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Ticket) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Ticket) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ExpirationTime = v
	}
	return nil
}

func (p *Ticket) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MaxUseCount = v
	}
	return nil
}

func (p *Ticket) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Ticket"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Ticket) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *Ticket) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("expirationTime", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:expirationTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ExpirationTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.expirationTime (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:expirationTime: ", p), err)
	}
	return err
}

func (p *Ticket) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxUseCount", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:maxUseCount: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MaxUseCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maxUseCount (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:maxUseCount: ", p), err)
	}
	return err
}

func (p *Ticket) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Ticket(%+v)", *p)
}

// Attributes:
//  - Mid
//  - EMid
type FollowMid struct {
	Mid  string `thrift:"mid,1" db:"mid" json:"mid"`
	EMid string `thrift:"eMid,2" db:"eMid" json:"eMid"`
}

func NewFollowMid() *FollowMid {
	return &FollowMid{}
}

func (p *FollowMid) GetMid() string {
	return p.Mid
}

func (p *FollowMid) GetEMid() string {
	return p.EMid
}
func (p *FollowMid) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FollowMid) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *FollowMid) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.EMid = v
	}
	return nil
}

func (p *FollowMid) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FollowMid"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FollowMid) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err)
	}
	return err
}

func (p *FollowMid) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("eMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:eMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.EMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.eMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:eMid: ", p), err)
	}
	return err
}

func (p *FollowMid) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowMid(%+v)", *p)
}

// Attributes:
//  - FollowMid
//  - Cursor
type GetFollowersRequest struct {
	FollowMid *FollowMid `thrift:"followMid,1" db:"followMid" json:"followMid"`
	Cursor    string     `thrift:"cursor,2" db:"cursor" json:"cursor"`
}

func NewGetFollowersRequest() *GetFollowersRequest {
	return &GetFollowersRequest{}
}

var GetFollowersRequest_FollowMid_DEFAULT *FollowMid

func (p *GetFollowersRequest) GetFollowMid() *FollowMid {
	if !p.IsSetFollowMid() {
		return GetFollowersRequest_FollowMid_DEFAULT
	}
	return p.FollowMid
}

func (p *GetFollowersRequest) GetCursor() string {
	return p.Cursor
}
func (p *GetFollowersRequest) IsSetFollowMid() bool {
	return p.FollowMid != nil
}

func (p *GetFollowersRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetFollowersRequest) ReadField1(iprot thrift.TProtocol) error {
	p.FollowMid = &FollowMid{}
	if err := p.FollowMid.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FollowMid), err)
	}
	return nil
}

func (p *GetFollowersRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Cursor = v
	}
	return nil
}

func (p *GetFollowersRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetFollowersRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetFollowersRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("followMid", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:followMid: ", p), err)
	}
	if err := p.FollowMid.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FollowMid), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:followMid: ", p), err)
	}
	return err
}

func (p *GetFollowersRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cursor", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cursor: ", p), err)
	}
	if err := oprot.WriteString(string(p.Cursor)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cursor (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cursor: ", p), err)
	}
	return err
}

func (p *GetFollowersRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFollowersRequest(%+v)", *p)
}

// Attributes:
//  - IconType
type FollowBuddyDetail struct {
	IconType int32 `thrift:"iconType,1" db:"iconType" json:"iconType"`
}

func NewFollowBuddyDetail() *FollowBuddyDetail {
	return &FollowBuddyDetail{}
}

func (p *FollowBuddyDetail) GetIconType() int32 {
	return p.IconType
}
func (p *FollowBuddyDetail) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FollowBuddyDetail) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IconType = v
	}
	return nil
}

func (p *FollowBuddyDetail) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FollowBuddyDetail"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FollowBuddyDetail) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("iconType", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:iconType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.IconType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.iconType (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:iconType: ", p), err)
	}
	return err
}

func (p *FollowBuddyDetail) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowBuddyDetail(%+v)", *p)
}

// Attributes:
//  - FollowMid
//  - DisplayName
//  - PicturePath
//  - Following
//  - AllowFollow
//  - FollowBuddyDetail
type FollowProfile struct {
	FollowMid         *FollowMid         `thrift:"followMid,1" db:"followMid" json:"followMid"`
	DisplayName       string             `thrift:"displayName,2" db:"displayName" json:"displayName"`
	PicturePath       string             `thrift:"picturePath,3" db:"picturePath" json:"picturePath"`
	Following         bool               `thrift:"following,4" db:"following" json:"following"`
	AllowFollow       bool               `thrift:"allowFollow,5" db:"allowFollow" json:"allowFollow"`
	FollowBuddyDetail *FollowBuddyDetail `thrift:"followBuddyDetail,6" db:"followBuddyDetail" json:"followBuddyDetail"`
}

func NewFollowProfile() *FollowProfile {
	return &FollowProfile{}
}

var FollowProfile_FollowMid_DEFAULT *FollowMid

func (p *FollowProfile) GetFollowMid() *FollowMid {
	if !p.IsSetFollowMid() {
		return FollowProfile_FollowMid_DEFAULT
	}
	return p.FollowMid
}

func (p *FollowProfile) GetDisplayName() string {
	return p.DisplayName
}

func (p *FollowProfile) GetPicturePath() string {
	return p.PicturePath
}

func (p *FollowProfile) GetFollowing() bool {
	return p.Following
}

func (p *FollowProfile) GetAllowFollow() bool {
	return p.AllowFollow
}

var FollowProfile_FollowBuddyDetail_DEFAULT *FollowBuddyDetail

func (p *FollowProfile) GetFollowBuddyDetail() *FollowBuddyDetail {
	if !p.IsSetFollowBuddyDetail() {
		return FollowProfile_FollowBuddyDetail_DEFAULT
	}
	return p.FollowBuddyDetail
}
func (p *FollowProfile) IsSetFollowMid() bool {
	return p.FollowMid != nil
}

func (p *FollowProfile) IsSetFollowBuddyDetail() bool {
	return p.FollowBuddyDetail != nil
}

func (p *FollowProfile) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FollowProfile) ReadField1(iprot thrift.TProtocol) error {
	p.FollowMid = &FollowMid{}
	if err := p.FollowMid.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FollowMid), err)
	}
	return nil
}

func (p *FollowProfile) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DisplayName = v
	}
	return nil
}

func (p *FollowProfile) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.PicturePath = v
	}
	return nil
}

func (p *FollowProfile) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Following = v
	}
	return nil
}

func (p *FollowProfile) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.AllowFollow = v
	}
	return nil
}

func (p *FollowProfile) ReadField6(iprot thrift.TProtocol) error {
	p.FollowBuddyDetail = &FollowBuddyDetail{}
	if err := p.FollowBuddyDetail.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FollowBuddyDetail), err)
	}
	return nil
}

func (p *FollowProfile) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FollowProfile"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FollowProfile) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("followMid", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:followMid: ", p), err)
	}
	if err := p.FollowMid.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FollowMid), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:followMid: ", p), err)
	}
	return err
}

func (p *FollowProfile) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:displayName: ", p), err)
	}
	if err := oprot.WriteString(string(p.DisplayName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.displayName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:displayName: ", p), err)
	}
	return err
}

func (p *FollowProfile) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("picturePath", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:picturePath: ", p), err)
	}
	if err := oprot.WriteString(string(p.PicturePath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.picturePath (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:picturePath: ", p), err)
	}
	return err
}

func (p *FollowProfile) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("following", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:following: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Following)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.following (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:following: ", p), err)
	}
	return err
}

func (p *FollowProfile) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("allowFollow", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:allowFollow: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.AllowFollow)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.allowFollow (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:allowFollow: ", p), err)
	}
	return err
}

func (p *FollowProfile) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("followBuddyDetail", thrift.STRUCT, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:followBuddyDetail: ", p), err)
	}
	if err := p.FollowBuddyDetail.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FollowBuddyDetail), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:followBuddyDetail: ", p), err)
	}
	return err
}

func (p *FollowProfile) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowProfile(%+v)", *p)
}

// Attributes:
//  - Profiles
//  - Cursor
//  - FollowingCount
//  - FollowerCount
type GetFollowersResponse struct {
	Profiles       []*FollowProfile `thrift:"profiles,1" db:"profiles" json:"profiles"`
	Cursor         string           `thrift:"cursor,2" db:"cursor" json:"cursor"`
	FollowingCount int64            `thrift:"followingCount,3" db:"followingCount" json:"followingCount"`
	FollowerCount  int64            `thrift:"followerCount,4" db:"followerCount" json:"followerCount"`
}

func NewGetFollowersResponse() *GetFollowersResponse {
	return &GetFollowersResponse{}
}

func (p *GetFollowersResponse) GetProfiles() []*FollowProfile {
	return p.Profiles
}

func (p *GetFollowersResponse) GetCursor() string {
	return p.Cursor
}

func (p *GetFollowersResponse) GetFollowingCount() int64 {
	return p.FollowingCount
}

func (p *GetFollowersResponse) GetFollowerCount() int64 {
	return p.FollowerCount
}
func (p *GetFollowersResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetFollowersResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*FollowProfile, 0, size)
	p.Profiles = tSlice
	for i := 0; i < size; i++ {
		_elem9 := &FollowProfile{}
		if err := _elem9.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
		}
		p.Profiles = append(p.Profiles, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GetFollowersResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Cursor = v
	}
	return nil
}

func (p *GetFollowersResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.FollowingCount = v
	}
	return nil
}

func (p *GetFollowersResponse) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.FollowerCount = v
	}
	return nil
}

func (p *GetFollowersResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetFollowersResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetFollowersResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("profiles", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:profiles: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Profiles)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Profiles {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:profiles: ", p), err)
	}
	return err
}

func (p *GetFollowersResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cursor", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cursor: ", p), err)
	}
	if err := oprot.WriteString(string(p.Cursor)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cursor (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cursor: ", p), err)
	}
	return err
}

func (p *GetFollowersResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("followingCount", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:followingCount: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.FollowingCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.followingCount (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:followingCount: ", p), err)
	}
	return err
}

func (p *GetFollowersResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("followerCount", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:followerCount: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.FollowerCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.followerCount (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:followerCount: ", p), err)
	}
	return err
}

func (p *GetFollowersResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFollowersResponse(%+v)", *p)
}

// Attributes:
//  - Version
//  - KeyId
//  - KeyData
//  - CreatedTime
type E2EEPublicKey struct {
	Version int32 `thrift:"version,1" db:"version" json:"version"`
	KeyId   int32 `thrift:"keyId,2" db:"keyId" json:"keyId"`
	// unused field # 3
	KeyData     []byte `thrift:"keyData,4" db:"keyData" json:"keyData"`
	CreatedTime int64  `thrift:"createdTime,5" db:"createdTime" json:"createdTime"`
}

func NewE2EEPublicKey() *E2EEPublicKey {
	return &E2EEPublicKey{}
}

func (p *E2EEPublicKey) GetVersion() int32 {
	return p.Version
}

func (p *E2EEPublicKey) GetKeyId() int32 {
	return p.KeyId
}

func (p *E2EEPublicKey) GetKeyData() []byte {
	return p.KeyData
}

func (p *E2EEPublicKey) GetCreatedTime() int64 {
	return p.CreatedTime
}
func (p *E2EEPublicKey) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *E2EEPublicKey) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *E2EEPublicKey) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.KeyId = v
	}
	return nil
}

func (p *E2EEPublicKey) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.KeyData = v
	}
	return nil
}

func (p *E2EEPublicKey) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.CreatedTime = v
	}
	return nil
}

func (p *E2EEPublicKey) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("E2EEPublicKey"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *E2EEPublicKey) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Version)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version: ", p), err)
	}
	return err
}

func (p *E2EEPublicKey) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("keyId", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keyId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.KeyId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.keyId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keyId: ", p), err)
	}
	return err
}

func (p *E2EEPublicKey) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("keyData", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:keyData: ", p), err)
	}
	if err := oprot.WriteBinary(p.KeyData); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.keyData (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:keyData: ", p), err)
	}
	return err
}

func (p *E2EEPublicKey) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createdTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.createdTime (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createdTime: ", p), err)
	}
	return err
}

func (p *E2EEPublicKey) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("E2EEPublicKey(%+v)", *p)
}

// Attributes:
//  - MetaData
//  - ForceRegistration
//  - VerificationCode
type IdentifierConfirmationRequest struct {
	MetaData          map[string]string `thrift:"metaData,1" db:"metaData" json:"metaData"`
	ForceRegistration bool              `thrift:"forceRegistration,2" db:"forceRegistration" json:"forceRegistration"`
	VerificationCode  string            `thrift:"verificationCode,3" db:"verificationCode" json:"verificationCode"`
}

func NewIdentifierConfirmationRequest() *IdentifierConfirmationRequest {
	return &IdentifierConfirmationRequest{}
}

func (p *IdentifierConfirmationRequest) GetMetaData() map[string]string {
	return p.MetaData
}

func (p *IdentifierConfirmationRequest) GetForceRegistration() bool {
	return p.ForceRegistration
}

func (p *IdentifierConfirmationRequest) GetVerificationCode() string {
	return p.VerificationCode
}
func (p *IdentifierConfirmationRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IdentifierConfirmationRequest) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.MetaData = tMap
	for i := 0; i < size; i++ {
		var _key10 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key10 = v
		}
		var _val11 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val11 = v
		}
		p.MetaData[_key10] = _val11
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *IdentifierConfirmationRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ForceRegistration = v
	}
	return nil
}

func (p *IdentifierConfirmationRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.VerificationCode = v
	}
	return nil
}

func (p *IdentifierConfirmationRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IdentifierConfirmationRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IdentifierConfirmationRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("metaData", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metaData: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.MetaData)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.MetaData {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metaData: ", p), err)
	}
	return err
}

func (p *IdentifierConfirmationRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("forceRegistration", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:forceRegistration: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.ForceRegistration)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.forceRegistration (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:forceRegistration: ", p), err)
	}
	return err
}

func (p *IdentifierConfirmationRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("verificationCode", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:verificationCode: ", p), err)
	}
	if err := oprot.WriteString(string(p.VerificationCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.verificationCode (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:verificationCode: ", p), err)
	}
	return err
}

func (p *IdentifierConfirmationRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IdentifierConfirmationRequest(%+v)", *p)
}

// Attributes:
//  - MetaData
//  - IdentityProvider
//  - CipherKeyId
//  - CipherText
//  - ConfirmationRequest
type IdentityCredentialRequest struct {
	MetaData            map[string]string              `thrift:"metaData,1" db:"metaData" json:"metaData"`
	IdentityProvider    Provider                       `thrift:"identityProvider,2" db:"identityProvider" json:"identityProvider"`
	CipherKeyId         string                         `thrift:"cipherKeyId,3" db:"cipherKeyId" json:"cipherKeyId"`
	CipherText          string                         `thrift:"cipherText,4" db:"cipherText" json:"cipherText"`
	ConfirmationRequest *IdentifierConfirmationRequest `thrift:"confirmationRequest,5" db:"confirmationRequest" json:"confirmationRequest"`
}

func NewIdentityCredentialRequest() *IdentityCredentialRequest {
	return &IdentityCredentialRequest{}
}

func (p *IdentityCredentialRequest) GetMetaData() map[string]string {
	return p.MetaData
}

func (p *IdentityCredentialRequest) GetIdentityProvider() Provider {
	return p.IdentityProvider
}

func (p *IdentityCredentialRequest) GetCipherKeyId() string {
	return p.CipherKeyId
}

func (p *IdentityCredentialRequest) GetCipherText() string {
	return p.CipherText
}

var IdentityCredentialRequest_ConfirmationRequest_DEFAULT *IdentifierConfirmationRequest

func (p *IdentityCredentialRequest) GetConfirmationRequest() *IdentifierConfirmationRequest {
	if !p.IsSetConfirmationRequest() {
		return IdentityCredentialRequest_ConfirmationRequest_DEFAULT
	}
	return p.ConfirmationRequest
}
func (p *IdentityCredentialRequest) IsSetConfirmationRequest() bool {
	return p.ConfirmationRequest != nil
}

func (p *IdentityCredentialRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IdentityCredentialRequest) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.MetaData = tMap
	for i := 0; i < size; i++ {
		var _key12 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key12 = v
		}
		var _val13 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val13 = v
		}
		p.MetaData[_key12] = _val13
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *IdentityCredentialRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Provider(v)
		p.IdentityProvider = temp
	}
	return nil
}

func (p *IdentityCredentialRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.CipherKeyId = v
	}
	return nil
}

func (p *IdentityCredentialRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.CipherText = v
	}
	return nil
}

func (p *IdentityCredentialRequest) ReadField5(iprot thrift.TProtocol) error {
	p.ConfirmationRequest = &IdentifierConfirmationRequest{}
	if err := p.ConfirmationRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ConfirmationRequest), err)
	}
	return nil
}

func (p *IdentityCredentialRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IdentityCredentialRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IdentityCredentialRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("metaData", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metaData: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.MetaData)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.MetaData {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metaData: ", p), err)
	}
	return err
}

func (p *IdentityCredentialRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identityProvider", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:identityProvider: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.IdentityProvider)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.identityProvider (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:identityProvider: ", p), err)
	}
	return err
}

func (p *IdentityCredentialRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cipherKeyId", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cipherKeyId: ", p), err)
	}
	if err := oprot.WriteString(string(p.CipherKeyId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cipherKeyId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cipherKeyId: ", p), err)
	}
	return err
}

func (p *IdentityCredentialRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cipherText", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:cipherText: ", p), err)
	}
	if err := oprot.WriteString(string(p.CipherText)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cipherText (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:cipherText: ", p), err)
	}
	return err
}

func (p *IdentityCredentialRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("confirmationRequest", thrift.STRUCT, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:confirmationRequest: ", p), err)
	}
	if err := p.ConfirmationRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ConfirmationRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:confirmationRequest: ", p), err)
	}
	return err
}

func (p *IdentityCredentialRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IdentityCredentialRequest(%+v)", *p)
}

// Attributes:
//  - MetaData
//  - ResponseType
//  - ConfirmationVerifier
//  - TimeoutInSeconds
type IdentityCredentialResponse struct {
	MetaData             map[string]string `thrift:"metaData,1" db:"metaData" json:"metaData"`
	ResponseType         ResponseType      `thrift:"responseType,2" db:"responseType" json:"responseType"`
	ConfirmationVerifier string            `thrift:"confirmationVerifier,3" db:"confirmationVerifier" json:"confirmationVerifier"`
	TimeoutInSeconds     int64             `thrift:"timeoutInSeconds,4" db:"timeoutInSeconds" json:"timeoutInSeconds"`
}

func NewIdentityCredentialResponse() *IdentityCredentialResponse {
	return &IdentityCredentialResponse{}
}

func (p *IdentityCredentialResponse) GetMetaData() map[string]string {
	return p.MetaData
}

func (p *IdentityCredentialResponse) GetResponseType() ResponseType {
	return p.ResponseType
}

func (p *IdentityCredentialResponse) GetConfirmationVerifier() string {
	return p.ConfirmationVerifier
}

func (p *IdentityCredentialResponse) GetTimeoutInSeconds() int64 {
	return p.TimeoutInSeconds
}
func (p *IdentityCredentialResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IdentityCredentialResponse) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.MetaData = tMap
	for i := 0; i < size; i++ {
		var _key14 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key14 = v
		}
		var _val15 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val15 = v
		}
		p.MetaData[_key14] = _val15
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *IdentityCredentialResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := ResponseType(v)
		p.ResponseType = temp
	}
	return nil
}

func (p *IdentityCredentialResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ConfirmationVerifier = v
	}
	return nil
}

func (p *IdentityCredentialResponse) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TimeoutInSeconds = v
	}
	return nil
}

func (p *IdentityCredentialResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IdentityCredentialResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IdentityCredentialResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("metaData", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metaData: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.MetaData)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.MetaData {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metaData: ", p), err)
	}
	return err
}

func (p *IdentityCredentialResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("responseType", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:responseType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ResponseType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.responseType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:responseType: ", p), err)
	}
	return err
}

func (p *IdentityCredentialResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("confirmationVerifier", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:confirmationVerifier: ", p), err)
	}
	if err := oprot.WriteString(string(p.ConfirmationVerifier)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.confirmationVerifier (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:confirmationVerifier: ", p), err)
	}
	return err
}

func (p *IdentityCredentialResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timeoutInSeconds", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timeoutInSeconds: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TimeoutInSeconds)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timeoutInSeconds (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timeoutInSeconds: ", p), err)
	}
	return err
}

func (p *IdentityCredentialResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IdentityCredentialResponse(%+v)", *p)
}

// Attributes:
//  - Provider
//  - Identifier
//  - Password
type IdentityCredential struct {
	Provider   Provider `thrift:"provider,1" db:"provider" json:"provider"`
	Identifier string   `thrift:"identifier,2" db:"identifier" json:"identifier"`
	Password   string   `thrift:"password,3" db:"password" json:"password"`
}

func NewIdentityCredential() *IdentityCredential {
	return &IdentityCredential{}
}

func (p *IdentityCredential) GetProvider() Provider {
	return p.Provider
}

func (p *IdentityCredential) GetIdentifier() string {
	return p.Identifier
}

func (p *IdentityCredential) GetPassword() string {
	return p.Password
}
func (p *IdentityCredential) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IdentityCredential) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Provider(v)
		p.Provider = temp
	}
	return nil
}

func (p *IdentityCredential) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Identifier = v
	}
	return nil
}

func (p *IdentityCredential) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Password = v
	}
	return nil
}

func (p *IdentityCredential) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IdentityCredential"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IdentityCredential) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("provider", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:provider: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Provider)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.provider (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:provider: ", p), err)
	}
	return err
}

func (p *IdentityCredential) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identifier", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:identifier: ", p), err)
	}
	if err := oprot.WriteString(string(p.Identifier)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.identifier (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:identifier: ", p), err)
	}
	return err
}

func (p *IdentityCredential) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:password: ", p), err)
	}
	if err := oprot.WriteString(string(p.Password)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.password (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:password: ", p), err)
	}
	return err
}

func (p *IdentityCredential) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IdentityCredential(%+v)", *p)
}

// Attributes:
//  - PhoneNumberRegistered
//  - RegisteredSnsIdTypes
//  - AccountMigrationCheckType
type UserAuthStatus struct {
	PhoneNumberRegistered     bool                      `thrift:"phoneNumberRegistered,1" db:"phoneNumberRegistered" json:"phoneNumberRegistered"`
	RegisteredSnsIdTypes      []SnSIdTyoe               `thrift:"registeredSnsIdTypes,2" db:"registeredSnsIdTypes" json:"registeredSnsIdTypes"`
	AccountMigrationCheckType AccountMigrationCheckType `thrift:"accountMigrationCheckType,3" db:"accountMigrationCheckType" json:"accountMigrationCheckType"`
}

func NewUserAuthStatus() *UserAuthStatus {
	return &UserAuthStatus{}
}

func (p *UserAuthStatus) GetPhoneNumberRegistered() bool {
	return p.PhoneNumberRegistered
}

func (p *UserAuthStatus) GetRegisteredSnsIdTypes() []SnSIdTyoe {
	return p.RegisteredSnsIdTypes
}

func (p *UserAuthStatus) GetAccountMigrationCheckType() AccountMigrationCheckType {
	return p.AccountMigrationCheckType
}
func (p *UserAuthStatus) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserAuthStatus) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.PhoneNumberRegistered = v
	}
	return nil
}

func (p *UserAuthStatus) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]SnSIdTyoe, 0, size)
	p.RegisteredSnsIdTypes = tSlice
	for i := 0; i < size; i++ {
		var _elem16 SnSIdTyoe
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := SnSIdTyoe(v)
			_elem16 = temp
		}
		p.RegisteredSnsIdTypes = append(p.RegisteredSnsIdTypes, _elem16)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserAuthStatus) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := AccountMigrationCheckType(v)
		p.AccountMigrationCheckType = temp
	}
	return nil
}

func (p *UserAuthStatus) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserAuthStatus"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserAuthStatus) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phoneNumberRegistered", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:phoneNumberRegistered: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PhoneNumberRegistered)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.phoneNumberRegistered (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:phoneNumberRegistered: ", p), err)
	}
	return err
}

func (p *UserAuthStatus) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("registeredSnsIdTypes", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:registeredSnsIdTypes: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.RegisteredSnsIdTypes)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.RegisteredSnsIdTypes {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:registeredSnsIdTypes: ", p), err)
	}
	return err
}

func (p *UserAuthStatus) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("accountMigrationCheckType", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:accountMigrationCheckType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.AccountMigrationCheckType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.accountMigrationCheckType (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:accountMigrationCheckType: ", p), err)
	}
	return err
}

func (p *UserAuthStatus) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAuthStatus(%+v)", *p)
}

// Attributes:
//  - BotMid
//  - Revision
type GetBuddyStatusBarV2Request struct {
	BotMid   string `thrift:"botMid,1" db:"botMid" json:"botMid"`
	Revision int64  `thrift:"revision,2" db:"revision" json:"revision"`
}

func NewGetBuddyStatusBarV2Request() *GetBuddyStatusBarV2Request {
	return &GetBuddyStatusBarV2Request{}
}

func (p *GetBuddyStatusBarV2Request) GetBotMid() string {
	return p.BotMid
}

func (p *GetBuddyStatusBarV2Request) GetRevision() int64 {
	return p.Revision
}
func (p *GetBuddyStatusBarV2Request) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetBuddyStatusBarV2Request) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.BotMid = v
	}
	return nil
}

func (p *GetBuddyStatusBarV2Request) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Revision = v
	}
	return nil
}

func (p *GetBuddyStatusBarV2Request) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetBuddyStatusBarV2Request"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetBuddyStatusBarV2Request) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("botMid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:botMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.BotMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.botMid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:botMid: ", p), err)
	}
	return err
}

func (p *GetBuddyStatusBarV2Request) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("revision", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:revision: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Revision)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.revision (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:revision: ", p), err)
	}
	return err
}

func (p *GetBuddyStatusBarV2Request) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetBuddyStatusBarV2Request(%+v)", *p)
}

// Attributes:
//  - Label
//  - DisplayType
//  - Title
//  - IconUrl
//  - LinkUrl
type BuddyStatusBar struct {
	Label       string      `thrift:"label,1" db:"label" json:"label"`
	DisplayType DisplayType `thrift:"displayType,2" db:"displayType" json:"displayType"`
	Title       string      `thrift:"title,3" db:"title" json:"title"`
	IconUrl     string      `thrift:"iconUrl,4" db:"iconUrl" json:"iconUrl"`
	LinkUrl     string      `thrift:"linkUrl,5" db:"linkUrl" json:"linkUrl"`
}

func NewBuddyStatusBar() *BuddyStatusBar {
	return &BuddyStatusBar{}
}

func (p *BuddyStatusBar) GetLabel() string {
	return p.Label
}

func (p *BuddyStatusBar) GetDisplayType() DisplayType {
	return p.DisplayType
}

func (p *BuddyStatusBar) GetTitle() string {
	return p.Title
}

func (p *BuddyStatusBar) GetIconUrl() string {
	return p.IconUrl
}

func (p *BuddyStatusBar) GetLinkUrl() string {
	return p.LinkUrl
}
func (p *BuddyStatusBar) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BuddyStatusBar) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Label = v
	}
	return nil
}

func (p *BuddyStatusBar) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := DisplayType(v)
		p.DisplayType = temp
	}
	return nil
}

func (p *BuddyStatusBar) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *BuddyStatusBar) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.IconUrl = v
	}
	return nil
}

func (p *BuddyStatusBar) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.LinkUrl = v
	}
	return nil
}

func (p *BuddyStatusBar) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BuddyStatusBar"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BuddyStatusBar) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("label", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:label: ", p), err)
	}
	if err := oprot.WriteString(string(p.Label)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.label (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:label: ", p), err)
	}
	return err
}

func (p *BuddyStatusBar) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("displayType", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:displayType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DisplayType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.displayType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:displayType: ", p), err)
	}
	return err
}

func (p *BuddyStatusBar) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:title: ", p), err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.title (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:title: ", p), err)
	}
	return err
}

func (p *BuddyStatusBar) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("iconUrl", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:iconUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.IconUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.iconUrl (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:iconUrl: ", p), err)
	}
	return err
}

func (p *BuddyStatusBar) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("linkUrl", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:linkUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.LinkUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.linkUrl (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:linkUrl: ", p), err)
	}
	return err
}

func (p *BuddyStatusBar) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BuddyStatusBar(%+v)", *p)
}

// Attributes:
//  - Seq
//  - Type
//  - DialedNumber
//  - CalledNumber
//  - ToMid
//  - ToName
//  - SetupTime
//  - StartTime
//  - EndTime
//  - Duration
//  - Terminate
//  - ProductType
//  - Charge
//  - Unit
//  - Result_
type Historys struct {
	Seq          int64        `thrift:"seq,1" db:"seq" json:"seq"`
	Type         HistorysType `thrift:"type,2" db:"type" json:"type"`
	DialedNumber string       `thrift:"dialedNumber,3" db:"dialedNumber" json:"dialedNumber"`
	CalledNumber string       `thrift:"calledNumber,4" db:"calledNumber" json:"calledNumber"`
	ToMid        string       `thrift:"toMid,5" db:"toMid" json:"toMid"`
	ToName       string       `thrift:"toName,6" db:"toName" json:"toName"`
	SetupTime    int64        `thrift:"setupTime,7" db:"setupTime" json:"setupTime"`
	StartTime    int64        `thrift:"startTime,8" db:"startTime" json:"startTime"`
	EndTime      int64        `thrift:"endTime,9" db:"endTime" json:"endTime"`
	Duration     int64        `thrift:"duration,10" db:"duration" json:"duration"`
	Terminate    int32        `thrift:"terminate,11" db:"terminate" json:"terminate"`
	ProductType  ProductType  `thrift:"productType,12" db:"productType" json:"productType"`
	Charge       int32        `thrift:"charge,13" db:"charge" json:"charge"`
	Unit         string       `thrift:"unit,14" db:"unit" json:"unit"`
	Result_      string       `thrift:"result,15" db:"result" json:"result"`
}

func NewHistorys() *Historys {
	return &Historys{}
}

func (p *Historys) GetSeq() int64 {
	return p.Seq
}

func (p *Historys) GetType() HistorysType {
	return p.Type
}

func (p *Historys) GetDialedNumber() string {
	return p.DialedNumber
}

func (p *Historys) GetCalledNumber() string {
	return p.CalledNumber
}

func (p *Historys) GetToMid() string {
	return p.ToMid
}

func (p *Historys) GetToName() string {
	return p.ToName
}

func (p *Historys) GetSetupTime() int64 {
	return p.SetupTime
}

func (p *Historys) GetStartTime() int64 {
	return p.StartTime
}

func (p *Historys) GetEndTime() int64 {
	return p.EndTime
}

func (p *Historys) GetDuration() int64 {
	return p.Duration
}

func (p *Historys) GetTerminate() int32 {
	return p.Terminate
}

func (p *Historys) GetProductType() ProductType {
	return p.ProductType
}

func (p *Historys) GetCharge() int32 {
	return p.Charge
}

func (p *Historys) GetUnit() string {
	return p.Unit
}

func (p *Historys) GetResult_() string {
	return p.Result_
}
func (p *Historys) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField13(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField14(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField15(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Historys) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *Historys) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := HistorysType(v)
		p.Type = temp
	}
	return nil
}

func (p *Historys) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.DialedNumber = v
	}
	return nil
}

func (p *Historys) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.CalledNumber = v
	}
	return nil
}

func (p *Historys) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ToMid = v
	}
	return nil
}

func (p *Historys) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ToName = v
	}
	return nil
}

func (p *Historys) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.SetupTime = v
	}
	return nil
}

func (p *Historys) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.StartTime = v
	}
	return nil
}

func (p *Historys) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.EndTime = v
	}
	return nil
}

func (p *Historys) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Duration = v
	}
	return nil
}

func (p *Historys) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Terminate = v
	}
	return nil
}

func (p *Historys) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		temp := ProductType(v)
		p.ProductType = temp
	}
	return nil
}

func (p *Historys) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Charge = v
	}
	return nil
}

func (p *Historys) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.Unit = v
	}
	return nil
}

func (p *Historys) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.Result_ = v
	}
	return nil
}

func (p *Historys) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Historys"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
		if err := p.writeField15(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Historys) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Seq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err)
	}
	return err
}

func (p *Historys) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *Historys) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dialedNumber", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dialedNumber: ", p), err)
	}
	if err := oprot.WriteString(string(p.DialedNumber)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dialedNumber (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dialedNumber: ", p), err)
	}
	return err
}

func (p *Historys) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("calledNumber", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:calledNumber: ", p), err)
	}
	if err := oprot.WriteString(string(p.CalledNumber)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.calledNumber (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:calledNumber: ", p), err)
	}
	return err
}

func (p *Historys) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("toMid", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:toMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.ToMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.toMid (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:toMid: ", p), err)
	}
	return err
}

func (p *Historys) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("toName", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:toName: ", p), err)
	}
	if err := oprot.WriteString(string(p.ToName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.toName (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:toName: ", p), err)
	}
	return err
}

func (p *Historys) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("setupTime", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:setupTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SetupTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.setupTime (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:setupTime: ", p), err)
	}
	return err
}

func (p *Historys) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startTime", thrift.I64, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:startTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startTime (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:startTime: ", p), err)
	}
	return err
}

func (p *Historys) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endTime", thrift.I64, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:endTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.EndTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.endTime (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:endTime: ", p), err)
	}
	return err
}

func (p *Historys) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("duration", thrift.I64, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:duration: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Duration)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.duration (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:duration: ", p), err)
	}
	return err
}

func (p *Historys) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("terminate", thrift.I32, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:terminate: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Terminate)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.terminate (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:terminate: ", p), err)
	}
	return err
}

func (p *Historys) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("productType", thrift.I32, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:productType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProductType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.productType (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:productType: ", p), err)
	}
	return err
}

func (p *Historys) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("charge", thrift.I32, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:charge: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Charge)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.charge (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:charge: ", p), err)
	}
	return err
}

func (p *Historys) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("unit", thrift.STRING, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:unit: ", p), err)
	}
	if err := oprot.WriteString(string(p.Unit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.unit (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:unit: ", p), err)
	}
	return err
}

func (p *Historys) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("result", thrift.STRING, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:result: ", p), err)
	}
	if err := oprot.WriteString(string(p.Result_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.result (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:result: ", p), err)
	}
	return err
}

func (p *Historys) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Historys(%+v)", *p)
}

// Attributes:
//  - Historys
//  - HasNext
type PaidCallHistoryResult_ struct {
	Historys []*Historys `thrift:"historys,1" db:"historys" json:"historys"`
	HasNext  bool        `thrift:"hasNext,2" db:"hasNext" json:"hasNext"`
}

func NewPaidCallHistoryResult_() *PaidCallHistoryResult_ {
	return &PaidCallHistoryResult_{}
}

func (p *PaidCallHistoryResult_) GetHistorys() []*Historys {
	return p.Historys
}

func (p *PaidCallHistoryResult_) GetHasNext() bool {
	return p.HasNext
}
func (p *PaidCallHistoryResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PaidCallHistoryResult_) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Historys, 0, size)
	p.Historys = tSlice
	for i := 0; i < size; i++ {
		_elem17 := &Historys{}
		if err := _elem17.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem17), err)
		}
		p.Historys = append(p.Historys, _elem17)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *PaidCallHistoryResult_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.HasNext = v
	}
	return nil
}

func (p *PaidCallHistoryResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PaidCallHistoryResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PaidCallHistoryResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("historys", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:historys: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Historys)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Historys {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:historys: ", p), err)
	}
	return err
}

func (p *PaidCallHistoryResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hasNext", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hasNext: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.HasNext)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hasNext (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hasNext: ", p), err)
	}
	return err
}

func (p *PaidCallHistoryResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaidCallHistoryResult_(%+v)", *p)
}

// Attributes:
//  - InvitationTicket
//  - FavoriteTimestamp
type GroupPreference struct {
	// unused fields # 1 to 10
	InvitationTicket  string `thrift:"invitationTicket,11" db:"invitationTicket" json:"invitationTicket"`
	FavoriteTimestamp int64  `thrift:"favoriteTimestamp,12" db:"favoriteTimestamp" json:"favoriteTimestamp"`
}

func NewGroupPreference() *GroupPreference {
	return &GroupPreference{}
}

func (p *GroupPreference) GetInvitationTicket() string {
	return p.InvitationTicket
}

func (p *GroupPreference) GetFavoriteTimestamp() int64 {
	return p.FavoriteTimestamp
}
func (p *GroupPreference) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 11:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GroupPreference) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.InvitationTicket = v
	}
	return nil
}

func (p *GroupPreference) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.FavoriteTimestamp = v
	}
	return nil
}

func (p *GroupPreference) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupPreference"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GroupPreference) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("invitationTicket", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:invitationTicket: ", p), err)
	}
	if err := oprot.WriteString(string(p.InvitationTicket)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.invitationTicket (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:invitationTicket: ", p), err)
	}
	return err
}

func (p *GroupPreference) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("favoriteTimestamp", thrift.I64, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:favoriteTimestamp: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.FavoriteTimestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.favoriteTimestamp (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:favoriteTimestamp: ", p), err)
	}
	return err
}

func (p *GroupPreference) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupPreference(%+v)", *p)
}

// Attributes:
//  - ID
//  - CreatedTime
//  - Name
//  - PictureStatus
//  - PreventedJoinByTicket
//  - GroupPreference
//  - Members
//  - Creator
//  - Invitee
//  - NotificationDisabled
//  - PicturePath
//  - MemberMids
//  - InviteeMids
type Group struct {
	ID          string `thrift:"id,1" db:"id" json:"id"`
	CreatedTime int64  `thrift:"createdTime,2" db:"createdTime" json:"createdTime"`
	// unused fields # 3 to 9
	Name                  string           `thrift:"name,10" db:"name" json:"name"`
	PictureStatus         string           `thrift:"pictureStatus,11" db:"pictureStatus" json:"pictureStatus"`
	PreventedJoinByTicket bool             `thrift:"preventedJoinByTicket,12" db:"preventedJoinByTicket" json:"preventedJoinByTicket"`
	GroupPreference       *GroupPreference `thrift:"groupPreference,13" db:"groupPreference" json:"groupPreference"`
	// unused fields # 14 to 19
	Members []*Contact `thrift:"members,20" db:"members" json:"members"`
	Creator *Contact   `thrift:"creator,21" db:"creator" json:"creator"`
	Invitee []*Contact `thrift:"invitee,22" db:"invitee" json:"invitee"`
	// unused fields # 23 to 30
	NotificationDisabled bool   `thrift:"notificationDisabled,31" db:"notificationDisabled" json:"notificationDisabled"`
	PicturePath          string `thrift:"picturePath,32" db:"picturePath" json:"picturePath"`
	// unused fields # 33 to 39
	MemberMids  []string `thrift:"memberMids,40" db:"memberMids" json:"memberMids"`
	InviteeMids []string `thrift:"inviteeMids,41" db:"inviteeMids" json:"inviteeMids"`
}

func NewGroup() *Group {
	return &Group{}
}

func (p *Group) GetID() string {
	return p.ID
}

func (p *Group) GetCreatedTime() int64 {
	return p.CreatedTime
}

func (p *Group) GetName() string {
	return p.Name
}

func (p *Group) GetPictureStatus() string {
	return p.PictureStatus
}

func (p *Group) GetPreventedJoinByTicket() bool {
	return p.PreventedJoinByTicket
}

var Group_GroupPreference_DEFAULT *GroupPreference

func (p *Group) GetGroupPreference() *GroupPreference {
	if !p.IsSetGroupPreference() {
		return Group_GroupPreference_DEFAULT
	}
	return p.GroupPreference
}

func (p *Group) GetMembers() []*Contact {
	return p.Members
}

var Group_Creator_DEFAULT *Contact

func (p *Group) GetCreator() *Contact {
	if !p.IsSetCreator() {
		return Group_Creator_DEFAULT
	}
	return p.Creator
}

func (p *Group) GetInvitee() []*Contact {
	return p.Invitee
}

func (p *Group) GetNotificationDisabled() bool {
	return p.NotificationDisabled
}

func (p *Group) GetPicturePath() string {
	return p.PicturePath
}

func (p *Group) GetMemberMids() []string {
	return p.MemberMids
}

func (p *Group) GetInviteeMids() []string {
	return p.InviteeMids
}
func (p *Group) IsSetGroupPreference() bool {
	return p.GroupPreference != nil
}

func (p *Group) IsSetCreator() bool {
	return p.Creator != nil
}

func (p *Group) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField13(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 20:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField20(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 21:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField21(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 22:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField22(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 31:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField31(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 32:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField32(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 40:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField40(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 41:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField41(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Group) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Group) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.CreatedTime = v
	}
	return nil
}

func (p *Group) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Group) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.PictureStatus = v
	}
	return nil
}

func (p *Group) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.PreventedJoinByTicket = v
	}
	return nil
}

func (p *Group) ReadField13(iprot thrift.TProtocol) error {
	p.GroupPreference = &GroupPreference{}
	if err := p.GroupPreference.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GroupPreference), err)
	}
	return nil
}

func (p *Group) ReadField20(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Contact, 0, size)
	p.Members = tSlice
	for i := 0; i < size; i++ {
		_elem18 := &Contact{}
		if err := _elem18.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem18), err)
		}
		p.Members = append(p.Members, _elem18)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Group) ReadField21(iprot thrift.TProtocol) error {
	p.Creator = &Contact{}
	if err := p.Creator.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Creator), err)
	}
	return nil
}

func (p *Group) ReadField22(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Contact, 0, size)
	p.Invitee = tSlice
	for i := 0; i < size; i++ {
		_elem19 := &Contact{}
		if err := _elem19.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem19), err)
		}
		p.Invitee = append(p.Invitee, _elem19)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Group) ReadField31(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 31: ", err)
	} else {
		p.NotificationDisabled = v
	}
	return nil
}

func (p *Group) ReadField32(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 32: ", err)
	} else {
		p.PicturePath = v
	}
	return nil
}

func (p *Group) ReadField40(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.MemberMids = tSlice
	for i := 0; i < size; i++ {
		var _elem20 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem20 = v
		}
		p.MemberMids = append(p.MemberMids, _elem20)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Group) ReadField41(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.InviteeMids = tSlice
	for i := 0; i < size; i++ {
		var _elem21 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem21 = v
		}
		p.InviteeMids = append(p.InviteeMids, _elem21)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Group) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Group"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField20(oprot); err != nil {
			return err
		}
		if err := p.writeField21(oprot); err != nil {
			return err
		}
		if err := p.writeField22(oprot); err != nil {
			return err
		}
		if err := p.writeField31(oprot); err != nil {
			return err
		}
		if err := p.writeField32(oprot); err != nil {
			return err
		}
		if err := p.writeField40(oprot); err != nil {
			return err
		}
		if err := p.writeField41(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Group) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *Group) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.createdTime (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTime: ", p), err)
	}
	return err
}

func (p *Group) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:name: ", p), err)
	}
	return err
}

func (p *Group) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pictureStatus", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:pictureStatus: ", p), err)
	}
	if err := oprot.WriteString(string(p.PictureStatus)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pictureStatus (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:pictureStatus: ", p), err)
	}
	return err
}

func (p *Group) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("preventedJoinByTicket", thrift.BOOL, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:preventedJoinByTicket: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PreventedJoinByTicket)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.preventedJoinByTicket (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:preventedJoinByTicket: ", p), err)
	}
	return err
}

func (p *Group) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupPreference", thrift.STRUCT, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:groupPreference: ", p), err)
	}
	if err := p.GroupPreference.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GroupPreference), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:groupPreference: ", p), err)
	}
	return err
}

func (p *Group) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("members", thrift.LIST, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:members: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Members)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Members {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:members: ", p), err)
	}
	return err
}

func (p *Group) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("creator", thrift.STRUCT, 21); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:creator: ", p), err)
	}
	if err := p.Creator.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Creator), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 21:creator: ", p), err)
	}
	return err
}

func (p *Group) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("invitee", thrift.LIST, 22); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:invitee: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Invitee)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Invitee {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 22:invitee: ", p), err)
	}
	return err
}

func (p *Group) writeField31(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationDisabled", thrift.BOOL, 31); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:notificationDisabled: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.NotificationDisabled)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notificationDisabled (31) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 31:notificationDisabled: ", p), err)
	}
	return err
}

func (p *Group) writeField32(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("picturePath", thrift.STRING, 32); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:picturePath: ", p), err)
	}
	if err := oprot.WriteString(string(p.PicturePath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.picturePath (32) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 32:picturePath: ", p), err)
	}
	return err
}

func (p *Group) writeField40(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberMids", thrift.LIST, 40); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:memberMids: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.MemberMids)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.MemberMids {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 40:memberMids: ", p), err)
	}
	return err
}

func (p *Group) writeField41(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("inviteeMids", thrift.LIST, 41); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:inviteeMids: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.InviteeMids)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.InviteeMids {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 41:inviteeMids: ", p), err)
	}
	return err
}

func (p *Group) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Group(%+v)", *p)
}

// Attributes:
//  - Replace
//  - SticonOwnership
type ChatRoomAnnouncementContentMetadata struct {
	Replace         string `thrift:"replace,1" db:"replace" json:"replace"`
	SticonOwnership string `thrift:"sticonOwnership,2" db:"sticonOwnership" json:"sticonOwnership"`
}

func NewChatRoomAnnouncementContentMetadata() *ChatRoomAnnouncementContentMetadata {
	return &ChatRoomAnnouncementContentMetadata{}
}

func (p *ChatRoomAnnouncementContentMetadata) GetReplace() string {
	return p.Replace
}

func (p *ChatRoomAnnouncementContentMetadata) GetSticonOwnership() string {
	return p.SticonOwnership
}
func (p *ChatRoomAnnouncementContentMetadata) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChatRoomAnnouncementContentMetadata) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Replace = v
	}
	return nil
}

func (p *ChatRoomAnnouncementContentMetadata) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SticonOwnership = v
	}
	return nil
}

func (p *ChatRoomAnnouncementContentMetadata) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ChatRoomAnnouncementContentMetadata"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChatRoomAnnouncementContentMetadata) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("replace", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:replace: ", p), err)
	}
	if err := oprot.WriteString(string(p.Replace)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.replace (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:replace: ", p), err)
	}
	return err
}

func (p *ChatRoomAnnouncementContentMetadata) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sticonOwnership", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sticonOwnership: ", p), err)
	}
	if err := oprot.WriteString(string(p.SticonOwnership)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sticonOwnership (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sticonOwnership: ", p), err)
	}
	return err
}

func (p *ChatRoomAnnouncementContentMetadata) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatRoomAnnouncementContentMetadata(%+v)", *p)
}

// Attributes:
//  - DisplayFields
//  - Text
//  - Link
//  - Thumbnail
//  - ContentMetadata
type ChatRoomAnnouncementContents struct {
	DisplayFields   int32                                `thrift:"displayFields,1" db:"displayFields" json:"displayFields"`
	Text            string                               `thrift:"text,2" db:"text" json:"text"`
	Link            string                               `thrift:"link,3" db:"link" json:"link"`
	Thumbnail       string                               `thrift:"thumbnail,4" db:"thumbnail" json:"thumbnail"`
	ContentMetadata *ChatRoomAnnouncementContentMetadata `thrift:"contentMetadata,5" db:"contentMetadata" json:"contentMetadata"`
}

func NewChatRoomAnnouncementContents() *ChatRoomAnnouncementContents {
	return &ChatRoomAnnouncementContents{}
}

func (p *ChatRoomAnnouncementContents) GetDisplayFields() int32 {
	return p.DisplayFields
}

func (p *ChatRoomAnnouncementContents) GetText() string {
	return p.Text
}

func (p *ChatRoomAnnouncementContents) GetLink() string {
	return p.Link
}

func (p *ChatRoomAnnouncementContents) GetThumbnail() string {
	return p.Thumbnail
}

var ChatRoomAnnouncementContents_ContentMetadata_DEFAULT *ChatRoomAnnouncementContentMetadata

func (p *ChatRoomAnnouncementContents) GetContentMetadata() *ChatRoomAnnouncementContentMetadata {
	if !p.IsSetContentMetadata() {
		return ChatRoomAnnouncementContents_ContentMetadata_DEFAULT
	}
	return p.ContentMetadata
}
func (p *ChatRoomAnnouncementContents) IsSetContentMetadata() bool {
	return p.ContentMetadata != nil
}

func (p *ChatRoomAnnouncementContents) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChatRoomAnnouncementContents) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DisplayFields = v
	}
	return nil
}

func (p *ChatRoomAnnouncementContents) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Text = v
	}
	return nil
}

func (p *ChatRoomAnnouncementContents) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Link = v
	}
	return nil
}

func (p *ChatRoomAnnouncementContents) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Thumbnail = v
	}
	return nil
}

func (p *ChatRoomAnnouncementContents) ReadField5(iprot thrift.TProtocol) error {
	p.ContentMetadata = &ChatRoomAnnouncementContentMetadata{}
	if err := p.ContentMetadata.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ContentMetadata), err)
	}
	return nil
}

func (p *ChatRoomAnnouncementContents) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ChatRoomAnnouncementContents"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChatRoomAnnouncementContents) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("displayFields", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:displayFields: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DisplayFields)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.displayFields (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:displayFields: ", p), err)
	}
	return err
}

func (p *ChatRoomAnnouncementContents) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("text", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:text: ", p), err)
	}
	if err := oprot.WriteString(string(p.Text)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.text (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:text: ", p), err)
	}
	return err
}

func (p *ChatRoomAnnouncementContents) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("link", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:link: ", p), err)
	}
	if err := oprot.WriteString(string(p.Link)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.link (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:link: ", p), err)
	}
	return err
}

func (p *ChatRoomAnnouncementContents) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thumbnail", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:thumbnail: ", p), err)
	}
	if err := oprot.WriteString(string(p.Thumbnail)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.thumbnail (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:thumbnail: ", p), err)
	}
	return err
}

func (p *ChatRoomAnnouncementContents) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contentMetadata", thrift.STRUCT, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:contentMetadata: ", p), err)
	}
	if err := p.ContentMetadata.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ContentMetadata), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:contentMetadata: ", p), err)
	}
	return err
}

func (p *ChatRoomAnnouncementContents) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatRoomAnnouncementContents(%+v)", *p)
}

// Attributes:
//  - AnnouncementSeq
//  - Type
//  - Contents
//  - CreatorMid
//  - CreatedTime
//  - DeletePermission
type ChatRoomAnnouncement struct {
	AnnouncementSeq  int64                         `thrift:"announcementSeq,1" db:"announcementSeq" json:"announcementSeq"`
	Type             ChatRoomAnnouncementType      `thrift:"type,2" db:"type" json:"type"`
	Contents         *ChatRoomAnnouncementContents `thrift:"contents,3" db:"contents" json:"contents"`
	CreatorMid       string                        `thrift:"creatorMid,4" db:"creatorMid" json:"creatorMid"`
	CreatedTime      int64                         `thrift:"createdTime,5" db:"createdTime" json:"createdTime"`
	DeletePermission DeletePermission              `thrift:"deletePermission,6" db:"deletePermission" json:"deletePermission"`
}

func NewChatRoomAnnouncement() *ChatRoomAnnouncement {
	return &ChatRoomAnnouncement{}
}

func (p *ChatRoomAnnouncement) GetAnnouncementSeq() int64 {
	return p.AnnouncementSeq
}

func (p *ChatRoomAnnouncement) GetType() ChatRoomAnnouncementType {
	return p.Type
}

var ChatRoomAnnouncement_Contents_DEFAULT *ChatRoomAnnouncementContents

func (p *ChatRoomAnnouncement) GetContents() *ChatRoomAnnouncementContents {
	if !p.IsSetContents() {
		return ChatRoomAnnouncement_Contents_DEFAULT
	}
	return p.Contents
}

func (p *ChatRoomAnnouncement) GetCreatorMid() string {
	return p.CreatorMid
}

func (p *ChatRoomAnnouncement) GetCreatedTime() int64 {
	return p.CreatedTime
}

func (p *ChatRoomAnnouncement) GetDeletePermission() DeletePermission {
	return p.DeletePermission
}
func (p *ChatRoomAnnouncement) IsSetContents() bool {
	return p.Contents != nil
}

func (p *ChatRoomAnnouncement) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChatRoomAnnouncement) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AnnouncementSeq = v
	}
	return nil
}

func (p *ChatRoomAnnouncement) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := ChatRoomAnnouncementType(v)
		p.Type = temp
	}
	return nil
}

func (p *ChatRoomAnnouncement) ReadField3(iprot thrift.TProtocol) error {
	p.Contents = &ChatRoomAnnouncementContents{}
	if err := p.Contents.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Contents), err)
	}
	return nil
}

func (p *ChatRoomAnnouncement) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.CreatorMid = v
	}
	return nil
}

func (p *ChatRoomAnnouncement) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.CreatedTime = v
	}
	return nil
}

func (p *ChatRoomAnnouncement) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := DeletePermission(v)
		p.DeletePermission = temp
	}
	return nil
}

func (p *ChatRoomAnnouncement) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ChatRoomAnnouncement"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChatRoomAnnouncement) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("announcementSeq", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:announcementSeq: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.AnnouncementSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.announcementSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:announcementSeq: ", p), err)
	}
	return err
}

func (p *ChatRoomAnnouncement) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *ChatRoomAnnouncement) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contents", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contents: ", p), err)
	}
	if err := p.Contents.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Contents), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contents: ", p), err)
	}
	return err
}

func (p *ChatRoomAnnouncement) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("creatorMid", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:creatorMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.CreatorMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.creatorMid (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:creatorMid: ", p), err)
	}
	return err
}

func (p *ChatRoomAnnouncement) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createdTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.createdTime (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createdTime: ", p), err)
	}
	return err
}

func (p *ChatRoomAnnouncement) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deletePermission", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:deletePermission: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DeletePermission)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deletePermission (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:deletePermission: ", p), err)
	}
	return err
}

func (p *ChatRoomAnnouncement) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatRoomAnnouncement(%+v)", *p)
}

// Attributes:
//  - FollowMid
//  - Cursor
type GetFollowingsRequest struct {
	FollowMid *FollowMid `thrift:"followMid,1" db:"followMid" json:"followMid"`
	Cursor    string     `thrift:"cursor,2" db:"cursor" json:"cursor"`
}

func NewGetFollowingsRequest() *GetFollowingsRequest {
	return &GetFollowingsRequest{}
}

var GetFollowingsRequest_FollowMid_DEFAULT *FollowMid

func (p *GetFollowingsRequest) GetFollowMid() *FollowMid {
	if !p.IsSetFollowMid() {
		return GetFollowingsRequest_FollowMid_DEFAULT
	}
	return p.FollowMid
}

func (p *GetFollowingsRequest) GetCursor() string {
	return p.Cursor
}
func (p *GetFollowingsRequest) IsSetFollowMid() bool {
	return p.FollowMid != nil
}

func (p *GetFollowingsRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetFollowingsRequest) ReadField1(iprot thrift.TProtocol) error {
	p.FollowMid = &FollowMid{}
	if err := p.FollowMid.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FollowMid), err)
	}
	return nil
}

func (p *GetFollowingsRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Cursor = v
	}
	return nil
}

func (p *GetFollowingsRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetFollowingsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetFollowingsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("followMid", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:followMid: ", p), err)
	}
	if err := p.FollowMid.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FollowMid), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:followMid: ", p), err)
	}
	return err
}

func (p *GetFollowingsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cursor", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cursor: ", p), err)
	}
	if err := oprot.WriteString(string(p.Cursor)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cursor (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cursor: ", p), err)
	}
	return err
}

func (p *GetFollowingsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFollowingsRequest(%+v)", *p)
}

// Attributes:
//  - Profiles
//  - Cursor
//  - FollowingCount
//  - FollowerCount
type GetFollowingsResponse struct {
	Profiles       []*FollowProfile `thrift:"profiles,1" db:"profiles" json:"profiles"`
	Cursor         string           `thrift:"cursor,2" db:"cursor" json:"cursor"`
	FollowingCount int64            `thrift:"followingCount,3" db:"followingCount" json:"followingCount"`
	FollowerCount  int64            `thrift:"followerCount,4" db:"followerCount" json:"followerCount"`
}

func NewGetFollowingsResponse() *GetFollowingsResponse {
	return &GetFollowingsResponse{}
}

func (p *GetFollowingsResponse) GetProfiles() []*FollowProfile {
	return p.Profiles
}

func (p *GetFollowingsResponse) GetCursor() string {
	return p.Cursor
}

func (p *GetFollowingsResponse) GetFollowingCount() int64 {
	return p.FollowingCount
}

func (p *GetFollowingsResponse) GetFollowerCount() int64 {
	return p.FollowerCount
}
func (p *GetFollowingsResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetFollowingsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*FollowProfile, 0, size)
	p.Profiles = tSlice
	for i := 0; i < size; i++ {
		_elem22 := &FollowProfile{}
		if err := _elem22.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem22), err)
		}
		p.Profiles = append(p.Profiles, _elem22)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GetFollowingsResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Cursor = v
	}
	return nil
}

func (p *GetFollowingsResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.FollowingCount = v
	}
	return nil
}

func (p *GetFollowingsResponse) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.FollowerCount = v
	}
	return nil
}

func (p *GetFollowingsResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetFollowingsResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetFollowingsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("profiles", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:profiles: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Profiles)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Profiles {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:profiles: ", p), err)
	}
	return err
}

func (p *GetFollowingsResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cursor", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cursor: ", p), err)
	}
	if err := oprot.WriteString(string(p.Cursor)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cursor (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cursor: ", p), err)
	}
	return err
}

func (p *GetFollowingsResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("followingCount", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:followingCount: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.FollowingCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.followingCount (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:followingCount: ", p), err)
	}
	return err
}

func (p *GetFollowingsResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("followerCount", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:followerCount: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.FollowerCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.followerCount (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:followerCount: ", p), err)
	}
	return err
}

func (p *GetFollowingsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFollowingsResponse(%+v)", *p)
}

// Attributes:
//  - AuthToken
//  - RecommendEmailRegistration
//  - Certificate
type RegisterWithPhoneNumberResult_ struct {
	AuthToken                  string `thrift:"authToken,1" db:"authToken" json:"authToken"`
	RecommendEmailRegistration bool   `thrift:"recommendEmailRegistration,2" db:"recommendEmailRegistration" json:"recommendEmailRegistration"`
	Certificate                string `thrift:"certificate,3" db:"certificate" json:"certificate"`
}

func NewRegisterWithPhoneNumberResult_() *RegisterWithPhoneNumberResult_ {
	return &RegisterWithPhoneNumberResult_{}
}

func (p *RegisterWithPhoneNumberResult_) GetAuthToken() string {
	return p.AuthToken
}

func (p *RegisterWithPhoneNumberResult_) GetRecommendEmailRegistration() bool {
	return p.RecommendEmailRegistration
}

func (p *RegisterWithPhoneNumberResult_) GetCertificate() string {
	return p.Certificate
}
func (p *RegisterWithPhoneNumberResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RegisterWithPhoneNumberResult_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthToken = v
	}
	return nil
}

func (p *RegisterWithPhoneNumberResult_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RecommendEmailRegistration = v
	}
	return nil
}

func (p *RegisterWithPhoneNumberResult_) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Certificate = v
	}
	return nil
}

func (p *RegisterWithPhoneNumberResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RegisterWithPhoneNumberResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RegisterWithPhoneNumberResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authToken: ", p), err)
	}
	return err
}

func (p *RegisterWithPhoneNumberResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("recommendEmailRegistration", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:recommendEmailRegistration: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.RecommendEmailRegistration)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.recommendEmailRegistration (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:recommendEmailRegistration: ", p), err)
	}
	return err
}

func (p *RegisterWithPhoneNumberResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("certificate", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:certificate: ", p), err)
	}
	if err := oprot.WriteString(string(p.Certificate)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.certificate (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:certificate: ", p), err)
	}
	return err
}

func (p *RegisterWithPhoneNumberResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterWithPhoneNumberResult_(%+v)", *p)
}

// Attributes:
//  - Mid
//  - DisplayName
//  - PictureStatus
//  - PicturePath
//  - StatusMessage
//  - BusinessAccount
//  - IconType
//  - BotType
type BuddySearchResult_ struct {
	Mid             string  `thrift:"mid,1" db:"mid" json:"mid"`
	DisplayName     string  `thrift:"displayName,2" db:"displayName" json:"displayName"`
	PictureStatus   string  `thrift:"pictureStatus,3" db:"pictureStatus" json:"pictureStatus"`
	PicturePath     string  `thrift:"picturePath,4" db:"picturePath" json:"picturePath"`
	StatusMessage   string  `thrift:"statusMessage,5" db:"statusMessage" json:"statusMessage"`
	BusinessAccount bool    `thrift:"businessAccount,6" db:"businessAccount" json:"businessAccount"`
	IconType        int32   `thrift:"iconType,7" db:"iconType" json:"iconType"`
	BotType         BotType `thrift:"botType,8" db:"botType" json:"botType"`
}

func NewBuddySearchResult_() *BuddySearchResult_ {
	return &BuddySearchResult_{}
}

func (p *BuddySearchResult_) GetMid() string {
	return p.Mid
}

func (p *BuddySearchResult_) GetDisplayName() string {
	return p.DisplayName
}

func (p *BuddySearchResult_) GetPictureStatus() string {
	return p.PictureStatus
}

func (p *BuddySearchResult_) GetPicturePath() string {
	return p.PicturePath
}

func (p *BuddySearchResult_) GetStatusMessage() string {
	return p.StatusMessage
}

func (p *BuddySearchResult_) GetBusinessAccount() bool {
	return p.BusinessAccount
}

func (p *BuddySearchResult_) GetIconType() int32 {
	return p.IconType
}

func (p *BuddySearchResult_) GetBotType() BotType {
	return p.BotType
}
func (p *BuddySearchResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BuddySearchResult_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *BuddySearchResult_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DisplayName = v
	}
	return nil
}

func (p *BuddySearchResult_) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.PictureStatus = v
	}
	return nil
}

func (p *BuddySearchResult_) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.PicturePath = v
	}
	return nil
}

func (p *BuddySearchResult_) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.StatusMessage = v
	}
	return nil
}

func (p *BuddySearchResult_) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.BusinessAccount = v
	}
	return nil
}

func (p *BuddySearchResult_) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.IconType = v
	}
	return nil
}

func (p *BuddySearchResult_) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		temp := BotType(v)
		p.BotType = temp
	}
	return nil
}

func (p *BuddySearchResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BuddySearchResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BuddySearchResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err)
	}
	return err
}

func (p *BuddySearchResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:displayName: ", p), err)
	}
	if err := oprot.WriteString(string(p.DisplayName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.displayName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:displayName: ", p), err)
	}
	return err
}

func (p *BuddySearchResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pictureStatus", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pictureStatus: ", p), err)
	}
	if err := oprot.WriteString(string(p.PictureStatus)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pictureStatus (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pictureStatus: ", p), err)
	}
	return err
}

func (p *BuddySearchResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("picturePath", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:picturePath: ", p), err)
	}
	if err := oprot.WriteString(string(p.PicturePath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.picturePath (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:picturePath: ", p), err)
	}
	return err
}

func (p *BuddySearchResult_) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("statusMessage", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:statusMessage: ", p), err)
	}
	if err := oprot.WriteString(string(p.StatusMessage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.statusMessage (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:statusMessage: ", p), err)
	}
	return err
}

func (p *BuddySearchResult_) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("businessAccount", thrift.BOOL, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:businessAccount: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.BusinessAccount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.businessAccount (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:businessAccount: ", p), err)
	}
	return err
}

func (p *BuddySearchResult_) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("iconType", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:iconType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.IconType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.iconType (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:iconType: ", p), err)
	}
	return err
}

func (p *BuddySearchResult_) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("botType", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:botType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.BotType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.botType (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:botType: ", p), err)
	}
	return err
}

func (p *BuddySearchResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BuddySearchResult_(%+v)", *p)
}

// Attributes:
//  - CurrencyCode
//  - CurrencyName
//  - CurrencySign
//  - Preferred
//  - CoinRate
//  - CreditRate
type PaidCallCurrencyExchangeRate struct {
	CurrencyCode string `thrift:"currencyCode,1" db:"currencyCode" json:"currencyCode"`
	CurrencyName string `thrift:"currencyName,2" db:"currencyName" json:"currencyName"`
	CurrencySign string `thrift:"currencySign,3" db:"currencySign" json:"currencySign"`
	Preferred    bool   `thrift:"preferred,4" db:"preferred" json:"preferred"`
	CoinRate     string `thrift:"coinRate,5" db:"coinRate" json:"coinRate"`
	CreditRate   string `thrift:"creditRate,6" db:"creditRate" json:"creditRate"`
}

func NewPaidCallCurrencyExchangeRate() *PaidCallCurrencyExchangeRate {
	return &PaidCallCurrencyExchangeRate{}
}

func (p *PaidCallCurrencyExchangeRate) GetCurrencyCode() string {
	return p.CurrencyCode
}

func (p *PaidCallCurrencyExchangeRate) GetCurrencyName() string {
	return p.CurrencyName
}

func (p *PaidCallCurrencyExchangeRate) GetCurrencySign() string {
	return p.CurrencySign
}

func (p *PaidCallCurrencyExchangeRate) GetPreferred() bool {
	return p.Preferred
}

func (p *PaidCallCurrencyExchangeRate) GetCoinRate() string {
	return p.CoinRate
}

func (p *PaidCallCurrencyExchangeRate) GetCreditRate() string {
	return p.CreditRate
}
func (p *PaidCallCurrencyExchangeRate) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PaidCallCurrencyExchangeRate) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.CurrencyCode = v
	}
	return nil
}

func (p *PaidCallCurrencyExchangeRate) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.CurrencyName = v
	}
	return nil
}

func (p *PaidCallCurrencyExchangeRate) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.CurrencySign = v
	}
	return nil
}

func (p *PaidCallCurrencyExchangeRate) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Preferred = v
	}
	return nil
}

func (p *PaidCallCurrencyExchangeRate) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.CoinRate = v
	}
	return nil
}

func (p *PaidCallCurrencyExchangeRate) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.CreditRate = v
	}
	return nil
}

func (p *PaidCallCurrencyExchangeRate) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PaidCallCurrencyExchangeRate"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PaidCallCurrencyExchangeRate) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currencyCode", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:currencyCode: ", p), err)
	}
	if err := oprot.WriteString(string(p.CurrencyCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.currencyCode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:currencyCode: ", p), err)
	}
	return err
}

func (p *PaidCallCurrencyExchangeRate) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currencyName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:currencyName: ", p), err)
	}
	if err := oprot.WriteString(string(p.CurrencyName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.currencyName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:currencyName: ", p), err)
	}
	return err
}

func (p *PaidCallCurrencyExchangeRate) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currencySign", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:currencySign: ", p), err)
	}
	if err := oprot.WriteString(string(p.CurrencySign)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.currencySign (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:currencySign: ", p), err)
	}
	return err
}

func (p *PaidCallCurrencyExchangeRate) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("preferred", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:preferred: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Preferred)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.preferred (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:preferred: ", p), err)
	}
	return err
}

func (p *PaidCallCurrencyExchangeRate) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("coinRate", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:coinRate: ", p), err)
	}
	if err := oprot.WriteString(string(p.CoinRate)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.coinRate (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:coinRate: ", p), err)
	}
	return err
}

func (p *PaidCallCurrencyExchangeRate) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("creditRate", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:creditRate: ", p), err)
	}
	if err := oprot.WriteString(string(p.CreditRate)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.creditRate (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:creditRate: ", p), err)
	}
	return err
}

func (p *PaidCallCurrencyExchangeRate) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaidCallCurrencyExchangeRate(%+v)", *p)
}

// Attributes:
//  - CountryCode
//  - RateDivision
type PaidCallAdCountry struct {
	CountryCode  string `thrift:"countryCode,1" db:"countryCode" json:"countryCode"`
	RateDivision string `thrift:"rateDivision,2" db:"rateDivision" json:"rateDivision"`
}

func NewPaidCallAdCountry() *PaidCallAdCountry {
	return &PaidCallAdCountry{}
}

func (p *PaidCallAdCountry) GetCountryCode() string {
	return p.CountryCode
}

func (p *PaidCallAdCountry) GetRateDivision() string {
	return p.RateDivision
}
func (p *PaidCallAdCountry) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PaidCallAdCountry) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.CountryCode = v
	}
	return nil
}

func (p *PaidCallAdCountry) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RateDivision = v
	}
	return nil
}

func (p *PaidCallAdCountry) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PaidCallAdCountry"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PaidCallAdCountry) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("countryCode", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:countryCode: ", p), err)
	}
	if err := oprot.WriteString(string(p.CountryCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.countryCode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:countryCode: ", p), err)
	}
	return err
}

func (p *PaidCallAdCountry) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rateDivision", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rateDivision: ", p), err)
	}
	if err := oprot.WriteString(string(p.RateDivision)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rateDivision (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rateDivision: ", p), err)
	}
	return err
}

func (p *PaidCallAdCountry) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaidCallAdCountry(%+v)", *p)
}

// Attributes:
//  - CurrencyExchangeRates
//  - RecommendedCountryCodes
//  - AdCountries
//  - SupportedCalledCountryCodes
type PaidCallMetadataResult_ struct {
	CurrencyExchangeRates       []*PaidCallCurrencyExchangeRate `thrift:"currencyExchangeRates,1" db:"currencyExchangeRates" json:"currencyExchangeRates"`
	RecommendedCountryCodes     []string                        `thrift:"recommendedCountryCodes,2" db:"recommendedCountryCodes" json:"recommendedCountryCodes"`
	AdCountries                 []*PaidCallAdCountry            `thrift:"adCountries,3" db:"adCountries" json:"adCountries"`
	SupportedCalledCountryCodes []string                        `thrift:"supportedCalledCountryCodes,4" db:"supportedCalledCountryCodes" json:"supportedCalledCountryCodes"`
}

func NewPaidCallMetadataResult_() *PaidCallMetadataResult_ {
	return &PaidCallMetadataResult_{}
}

func (p *PaidCallMetadataResult_) GetCurrencyExchangeRates() []*PaidCallCurrencyExchangeRate {
	return p.CurrencyExchangeRates
}

func (p *PaidCallMetadataResult_) GetRecommendedCountryCodes() []string {
	return p.RecommendedCountryCodes
}

func (p *PaidCallMetadataResult_) GetAdCountries() []*PaidCallAdCountry {
	return p.AdCountries
}

func (p *PaidCallMetadataResult_) GetSupportedCalledCountryCodes() []string {
	return p.SupportedCalledCountryCodes
}
func (p *PaidCallMetadataResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PaidCallMetadataResult_) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*PaidCallCurrencyExchangeRate, 0, size)
	p.CurrencyExchangeRates = tSlice
	for i := 0; i < size; i++ {
		_elem23 := &PaidCallCurrencyExchangeRate{}
		if err := _elem23.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem23), err)
		}
		p.CurrencyExchangeRates = append(p.CurrencyExchangeRates, _elem23)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *PaidCallMetadataResult_) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.RecommendedCountryCodes = tSlice
	for i := 0; i < size; i++ {
		var _elem24 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem24 = v
		}
		p.RecommendedCountryCodes = append(p.RecommendedCountryCodes, _elem24)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *PaidCallMetadataResult_) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*PaidCallAdCountry, 0, size)
	p.AdCountries = tSlice
	for i := 0; i < size; i++ {
		_elem25 := &PaidCallAdCountry{}
		if err := _elem25.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem25), err)
		}
		p.AdCountries = append(p.AdCountries, _elem25)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *PaidCallMetadataResult_) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.SupportedCalledCountryCodes = tSlice
	for i := 0; i < size; i++ {
		var _elem26 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem26 = v
		}
		p.SupportedCalledCountryCodes = append(p.SupportedCalledCountryCodes, _elem26)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *PaidCallMetadataResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PaidCallMetadataResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PaidCallMetadataResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currencyExchangeRates", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:currencyExchangeRates: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CurrencyExchangeRates)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.CurrencyExchangeRates {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:currencyExchangeRates: ", p), err)
	}
	return err
}

func (p *PaidCallMetadataResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("recommendedCountryCodes", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:recommendedCountryCodes: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.RecommendedCountryCodes)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.RecommendedCountryCodes {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:recommendedCountryCodes: ", p), err)
	}
	return err
}

func (p *PaidCallMetadataResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("adCountries", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:adCountries: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.AdCountries)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.AdCountries {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:adCountries: ", p), err)
	}
	return err
}

func (p *PaidCallMetadataResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("supportedCalledCountryCodes", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:supportedCalledCountryCodes: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.SupportedCalledCountryCodes)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.SupportedCalledCountryCodes {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:supportedCalledCountryCodes: ", p), err)
	}
	return err
}

func (p *PaidCallMetadataResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaidCallMetadataResult_(%+v)", *p)
}

// Attributes:
//  - WithMemberChats
//  - WithInvitedChats
type GetAllChatMidsRequest struct {
	WithMemberChats  bool `thrift:"withMemberChats,1" db:"withMemberChats" json:"withMemberChats"`
	WithInvitedChats bool `thrift:"withInvitedChats,2" db:"withInvitedChats" json:"withInvitedChats"`
}

func NewGetAllChatMidsRequest() *GetAllChatMidsRequest {
	return &GetAllChatMidsRequest{}
}

func (p *GetAllChatMidsRequest) GetWithMemberChats() bool {
	return p.WithMemberChats
}

func (p *GetAllChatMidsRequest) GetWithInvitedChats() bool {
	return p.WithInvitedChats
}
func (p *GetAllChatMidsRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetAllChatMidsRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.WithMemberChats = v
	}
	return nil
}

func (p *GetAllChatMidsRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.WithInvitedChats = v
	}
	return nil
}

func (p *GetAllChatMidsRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetAllChatMidsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetAllChatMidsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withMemberChats", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:withMemberChats: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.WithMemberChats)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.withMemberChats (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:withMemberChats: ", p), err)
	}
	return err
}

func (p *GetAllChatMidsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withInvitedChats", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:withInvitedChats: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.WithInvitedChats)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.withInvitedChats (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:withInvitedChats: ", p), err)
	}
	return err
}

func (p *GetAllChatMidsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAllChatMidsRequest(%+v)", *p)
}

// Attributes:
//  - MemberMids
//  - InviteeMids
type GetAllChatMidsResponse struct {
	MemberMids  []string `thrift:"memberMids,1" db:"memberMids" json:"memberMids"`
	InviteeMids []string `thrift:"inviteeMids,2" db:"inviteeMids" json:"inviteeMids"`
}

func NewGetAllChatMidsResponse() *GetAllChatMidsResponse {
	return &GetAllChatMidsResponse{}
}

func (p *GetAllChatMidsResponse) GetMemberMids() []string {
	return p.MemberMids
}

func (p *GetAllChatMidsResponse) GetInviteeMids() []string {
	return p.InviteeMids
}
func (p *GetAllChatMidsResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetAllChatMidsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]string, 0, size)
	p.MemberMids = tSet
	for i := 0; i < size; i++ {
		var _elem27 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem27 = v
		}
		p.MemberMids = append(p.MemberMids, _elem27)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *GetAllChatMidsResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]string, 0, size)
	p.InviteeMids = tSet
	for i := 0; i < size; i++ {
		var _elem28 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem28 = v
		}
		p.InviteeMids = append(p.InviteeMids, _elem28)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *GetAllChatMidsResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetAllChatMidsResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetAllChatMidsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberMids", thrift.SET, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberMids: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.MemberMids)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for i := 0; i < len(p.MemberMids); i++ {
		for j := i + 1; j < len(p.MemberMids); j++ {
			if reflect.DeepEqual(p.MemberMids[i], p.MemberMids[j]) {
				return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.MemberMids[i]))
			}
		}
	}
	for _, v := range p.MemberMids {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberMids: ", p), err)
	}
	return err
}

func (p *GetAllChatMidsResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("inviteeMids", thrift.SET, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:inviteeMids: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.InviteeMids)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for i := 0; i < len(p.InviteeMids); i++ {
		for j := i + 1; j < len(p.InviteeMids); j++ {
			if reflect.DeepEqual(p.InviteeMids[i], p.InviteeMids[j]) {
				return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.InviteeMids[i]))
			}
		}
	}
	for _, v := range p.InviteeMids {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:inviteeMids: ", p), err)
	}
	return err
}

func (p *GetAllChatMidsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAllChatMidsResponse(%+v)", *p)
}

// Attributes:
//  - EMid
//  - Mid
//  - Direction
//  - Method
//  - Param
//  - CreatedTime
//  - SeqId
//  - DisplayName
//  - PicturePath
//  - PictureStatus
type FriendRequest struct {
	EMid        string    `thrift:"eMid,1" db:"eMid" json:"eMid"`
	Mid         string    `thrift:"mid,2" db:"mid" json:"mid"`
	Direction   Direction `thrift:"direction,3" db:"direction" json:"direction"`
	Method      Method_   `thrift:"method,4" db:"method" json:"method"`
	Param       string    `thrift:"param,5" db:"param" json:"param"`
	CreatedTime int64     `thrift:"createdTime,6" db:"createdTime" json:"createdTime"`
	SeqId       int64     `thrift:"seqId,7" db:"seqId" json:"seqId"`
	// unused fields # 8 to 9
	DisplayName   string `thrift:"displayName,10" db:"displayName" json:"displayName"`
	PicturePath   string `thrift:"picturePath,11" db:"picturePath" json:"picturePath"`
	PictureStatus string `thrift:"pictureStatus,12" db:"pictureStatus" json:"pictureStatus"`
}

func NewFriendRequest() *FriendRequest {
	return &FriendRequest{}
}

func (p *FriendRequest) GetEMid() string {
	return p.EMid
}

func (p *FriendRequest) GetMid() string {
	return p.Mid
}

func (p *FriendRequest) GetDirection() Direction {
	return p.Direction
}

func (p *FriendRequest) GetMethod() Method_ {
	return p.Method
}

func (p *FriendRequest) GetParam() string {
	return p.Param
}

func (p *FriendRequest) GetCreatedTime() int64 {
	return p.CreatedTime
}

func (p *FriendRequest) GetSeqId() int64 {
	return p.SeqId
}

func (p *FriendRequest) GetDisplayName() string {
	return p.DisplayName
}

func (p *FriendRequest) GetPicturePath() string {
	return p.PicturePath
}

func (p *FriendRequest) GetPictureStatus() string {
	return p.PictureStatus
}
func (p *FriendRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FriendRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.EMid = v
	}
	return nil
}

func (p *FriendRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *FriendRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := Direction(v)
		p.Direction = temp
	}
	return nil
}

func (p *FriendRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := Method_(v)
		p.Method = temp
	}
	return nil
}

func (p *FriendRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Param = v
	}
	return nil
}

func (p *FriendRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.CreatedTime = v
	}
	return nil
}

func (p *FriendRequest) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.SeqId = v
	}
	return nil
}

func (p *FriendRequest) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.DisplayName = v
	}
	return nil
}

func (p *FriendRequest) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.PicturePath = v
	}
	return nil
}

func (p *FriendRequest) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.PictureStatus = v
	}
	return nil
}

func (p *FriendRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FriendRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FriendRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("eMid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:eMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.EMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.eMid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:eMid: ", p), err)
	}
	return err
}

func (p *FriendRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mid: ", p), err)
	}
	return err
}

func (p *FriendRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("direction", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:direction: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Direction)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.direction (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:direction: ", p), err)
	}
	return err
}

func (p *FriendRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("method", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:method: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Method)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.method (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:method: ", p), err)
	}
	return err
}

func (p *FriendRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("param", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:param: ", p), err)
	}
	if err := oprot.WriteString(string(p.Param)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.param (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:param: ", p), err)
	}
	return err
}

func (p *FriendRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:createdTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.createdTime (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:createdTime: ", p), err)
	}
	return err
}

func (p *FriendRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seqId", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:seqId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SeqId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.seqId (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:seqId: ", p), err)
	}
	return err
}

func (p *FriendRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:displayName: ", p), err)
	}
	if err := oprot.WriteString(string(p.DisplayName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.displayName (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:displayName: ", p), err)
	}
	return err
}

func (p *FriendRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("picturePath", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:picturePath: ", p), err)
	}
	if err := oprot.WriteString(string(p.PicturePath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.picturePath (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:picturePath: ", p), err)
	}
	return err
}

func (p *FriendRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pictureStatus", thrift.STRING, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:pictureStatus: ", p), err)
	}
	if err := oprot.WriteString(string(p.PictureStatus)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pictureStatus (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:pictureStatus: ", p), err)
	}
	return err
}

func (p *FriendRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FriendRequest(%+v)", *p)
}

// Attributes:
//  - Title
//  - Artist
//  - Oid
//  - ChannelId
type Ringtone struct {
	Title     string `thrift:"title,1" db:"title" json:"title"`
	Artist    string `thrift:"artist,2" db:"artist" json:"artist"`
	Oid       string `thrift:"oid,3" db:"oid" json:"oid"`
	ChannelId string `thrift:"channelId,4" db:"channelId" json:"channelId"`
}

func NewRingtone() *Ringtone {
	return &Ringtone{}
}

func (p *Ringtone) GetTitle() string {
	return p.Title
}

func (p *Ringtone) GetArtist() string {
	return p.Artist
}

func (p *Ringtone) GetOid() string {
	return p.Oid
}

func (p *Ringtone) GetChannelId() string {
	return p.ChannelId
}
func (p *Ringtone) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Ringtone) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *Ringtone) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Artist = v
	}
	return nil
}

func (p *Ringtone) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Oid = v
	}
	return nil
}

func (p *Ringtone) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ChannelId = v
	}
	return nil
}

func (p *Ringtone) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Ringtone"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Ringtone) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:title: ", p), err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.title (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:title: ", p), err)
	}
	return err
}

func (p *Ringtone) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("artist", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:artist: ", p), err)
	}
	if err := oprot.WriteString(string(p.Artist)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.artist (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:artist: ", p), err)
	}
	return err
}

func (p *Ringtone) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("oid", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:oid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Oid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.oid (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:oid: ", p), err)
	}
	return err
}

func (p *Ringtone) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("channelId", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:channelId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChannelId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.channelId (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:channelId: ", p), err)
	}
	return err
}

func (p *Ringtone) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Ringtone(%+v)", *p)
}

// Attributes:
//  - ApplicationType
//  - DeviceName
//  - SystemName
//  - SystemVersion
//  - Model
//  - CarrierCode
//  - CarrierName
//  - WebViewVersion
type DeviceInfo struct {
	DeviceName     string `thrift:"deviceName,1" db:"deviceName" json:"deviceName"`
	SystemName     string `thrift:"systemName,2" db:"systemName" json:"systemName"`
	SystemVersion  string `thrift:"systemVersion,3" db:"systemVersion" json:"systemVersion"`
	Model          string `thrift:"model,4" db:"model" json:"model"`
	WebViewVersion string `thrift:"webViewVersion,5" db:"webViewVersion" json:"webViewVersion"`
	// unused fields # 6 to 9
	CarrierCode CarrierCode `thrift:"carrierCode,10" db:"carrierCode" json:"carrierCode"`
	CarrierName string      `thrift:"carrierName,11" db:"carrierName" json:"carrierName"`
	// unused fields # 12 to 19
	ApplicationType ApplicationType `thrift:"applicationType,20" db:"applicationType" json:"applicationType"`
}

func NewDeviceInfo() *DeviceInfo {
	return &DeviceInfo{}
}

func (p *DeviceInfo) GetApplicationType() ApplicationType {
	return p.ApplicationType
}

func (p *DeviceInfo) GetDeviceName() string {
	return p.DeviceName
}

func (p *DeviceInfo) GetSystemName() string {
	return p.SystemName
}

func (p *DeviceInfo) GetSystemVersion() string {
	return p.SystemVersion
}

func (p *DeviceInfo) GetModel() string {
	return p.Model
}

func (p *DeviceInfo) GetCarrierCode() CarrierCode {
	return p.CarrierCode
}

func (p *DeviceInfo) GetCarrierName() string {
	return p.CarrierName
}

func (p *DeviceInfo) GetWebViewVersion() string {
	return p.WebViewVersion
}
func (p *DeviceInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 20:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField20(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DeviceInfo) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		temp := ApplicationType(v)
		p.ApplicationType = temp
	}
	return nil
}

func (p *DeviceInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DeviceName = v
	}
	return nil
}

func (p *DeviceInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SystemName = v
	}
	return nil
}

func (p *DeviceInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SystemVersion = v
	}
	return nil
}

func (p *DeviceInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Model = v
	}
	return nil
}

func (p *DeviceInfo) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		temp := CarrierCode(v)
		p.CarrierCode = temp
	}
	return nil
}

func (p *DeviceInfo) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.CarrierName = v
	}
	return nil
}

func (p *DeviceInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.WebViewVersion = v
	}
	return nil
}

func (p *DeviceInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeviceInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField20(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DeviceInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:deviceName: ", p), err)
	}
	if err := oprot.WriteString(string(p.DeviceName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deviceName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:deviceName: ", p), err)
	}
	return err
}

func (p *DeviceInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("systemName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemName: ", p), err)
	}
	if err := oprot.WriteString(string(p.SystemName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.systemName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemName: ", p), err)
	}
	return err
}

func (p *DeviceInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("systemVersion", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:systemVersion: ", p), err)
	}
	if err := oprot.WriteString(string(p.SystemVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.systemVersion (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:systemVersion: ", p), err)
	}
	return err
}

func (p *DeviceInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("model", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:model: ", p), err)
	}
	if err := oprot.WriteString(string(p.Model)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.model (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:model: ", p), err)
	}
	return err
}

func (p *DeviceInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("webViewVersion", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:webViewVersion: ", p), err)
	}
	if err := oprot.WriteString(string(p.WebViewVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.webViewVersion (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:webViewVersion: ", p), err)
	}
	return err
}

func (p *DeviceInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("carrierCode", thrift.I32, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:carrierCode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.CarrierCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.carrierCode (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:carrierCode: ", p), err)
	}
	return err
}

func (p *DeviceInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("carrierName", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:carrierName: ", p), err)
	}
	if err := oprot.WriteString(string(p.CarrierName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.carrierName (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:carrierName: ", p), err)
	}
	return err
}

func (p *DeviceInfo) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("applicationType", thrift.I32, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:applicationType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ApplicationType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.applicationType (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:applicationType: ", p), err)
	}
	return err
}

func (p *DeviceInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeviceInfo(%+v)", *p)
}

// Attributes:
//  - FollowMid
type RemoveFollowerRequest struct {
	FollowMid *FollowMid `thrift:"followMid,1" db:"followMid" json:"followMid"`
}

func NewRemoveFollowerRequest() *RemoveFollowerRequest {
	return &RemoveFollowerRequest{}
}

var RemoveFollowerRequest_FollowMid_DEFAULT *FollowMid

func (p *RemoveFollowerRequest) GetFollowMid() *FollowMid {
	if !p.IsSetFollowMid() {
		return RemoveFollowerRequest_FollowMid_DEFAULT
	}
	return p.FollowMid
}
func (p *RemoveFollowerRequest) IsSetFollowMid() bool {
	return p.FollowMid != nil
}

func (p *RemoveFollowerRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoveFollowerRequest) ReadField1(iprot thrift.TProtocol) error {
	p.FollowMid = &FollowMid{}
	if err := p.FollowMid.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FollowMid), err)
	}
	return nil
}

func (p *RemoveFollowerRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RemoveFollowerRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoveFollowerRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("followMid", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:followMid: ", p), err)
	}
	if err := p.FollowMid.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FollowMid), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:followMid: ", p), err)
	}
	return err
}

func (p *RemoveFollowerRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoveFollowerRequest(%+v)", *p)
}

// Attributes:
//  - FollowMid
type UnfollowRequest struct {
	FollowMid *FollowMid `thrift:"followMid,1" db:"followMid" json:"followMid"`
}

func NewUnfollowRequest() *UnfollowRequest {
	return &UnfollowRequest{}
}

var UnfollowRequest_FollowMid_DEFAULT *FollowMid

func (p *UnfollowRequest) GetFollowMid() *FollowMid {
	if !p.IsSetFollowMid() {
		return UnfollowRequest_FollowMid_DEFAULT
	}
	return p.FollowMid
}
func (p *UnfollowRequest) IsSetFollowMid() bool {
	return p.FollowMid != nil
}

func (p *UnfollowRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UnfollowRequest) ReadField1(iprot thrift.TProtocol) error {
	p.FollowMid = &FollowMid{}
	if err := p.FollowMid.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FollowMid), err)
	}
	return nil
}

func (p *UnfollowRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UnfollowRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UnfollowRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("followMid", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:followMid: ", p), err)
	}
	if err := p.FollowMid.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FollowMid), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:followMid: ", p), err)
	}
	return err
}

func (p *UnfollowRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnfollowRequest(%+v)", *p)
}

type CancelChatInvitationResponse struct {
}

func NewCancelChatInvitationResponse() *CancelChatInvitationResponse {
	return &CancelChatInvitationResponse{}
}

func (p *CancelChatInvitationResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CancelChatInvitationResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CancelChatInvitationResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CancelChatInvitationResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CancelChatInvitationResponse(%+v)", *p)
}

// Attributes:
//  - TicketId
type FindChatByTicketRequest struct {
	TicketId string `thrift:"ticketId,1" db:"ticketId" json:"ticketId"`
}

func NewFindChatByTicketRequest() *FindChatByTicketRequest {
	return &FindChatByTicketRequest{}
}

func (p *FindChatByTicketRequest) GetTicketId() string {
	return p.TicketId
}
func (p *FindChatByTicketRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FindChatByTicketRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TicketId = v
	}
	return nil
}

func (p *FindChatByTicketRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FindChatByTicketRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FindChatByTicketRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ticketId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ticketId: ", p), err)
	}
	if err := oprot.WriteString(string(p.TicketId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ticketId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ticketId: ", p), err)
	}
	return err
}

func (p *FindChatByTicketRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindChatByTicketRequest(%+v)", *p)
}

// Attributes:
//  - Chat
type FindChatByTicketResponse struct {
	Chat *Chat `thrift:"chat,1" db:"chat" json:"chat"`
}

func NewFindChatByTicketResponse() *FindChatByTicketResponse {
	return &FindChatByTicketResponse{}
}

var FindChatByTicketResponse_Chat_DEFAULT *Chat

func (p *FindChatByTicketResponse) GetChat() *Chat {
	if !p.IsSetChat() {
		return FindChatByTicketResponse_Chat_DEFAULT
	}
	return p.Chat
}
func (p *FindChatByTicketResponse) IsSetChat() bool {
	return p.Chat != nil
}

func (p *FindChatByTicketResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FindChatByTicketResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Chat = &Chat{}
	if err := p.Chat.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Chat), err)
	}
	return nil
}

func (p *FindChatByTicketResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FindChatByTicketResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FindChatByTicketResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chat", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chat: ", p), err)
	}
	if err := p.Chat.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Chat), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chat: ", p), err)
	}
	return err
}

func (p *FindChatByTicketResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindChatByTicketResponse(%+v)", *p)
}

// Attributes:
//  - CreatorMid
//  - CreatedTime
//  - ChatRoomBGMInfo
type ChatRoomBGM struct {
	CreatorMid      string `thrift:"creatorMid,1" db:"creatorMid" json:"creatorMid"`
	CreatedTime     int64  `thrift:"createdTime,2" db:"createdTime" json:"createdTime"`
	ChatRoomBGMInfo string `thrift:"chatRoomBGMInfo,3" db:"chatRoomBGMInfo" json:"chatRoomBGMInfo"`
}

func NewChatRoomBGM() *ChatRoomBGM {
	return &ChatRoomBGM{}
}

func (p *ChatRoomBGM) GetCreatorMid() string {
	return p.CreatorMid
}

func (p *ChatRoomBGM) GetCreatedTime() int64 {
	return p.CreatedTime
}

func (p *ChatRoomBGM) GetChatRoomBGMInfo() string {
	return p.ChatRoomBGMInfo
}
func (p *ChatRoomBGM) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChatRoomBGM) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.CreatorMid = v
	}
	return nil
}

func (p *ChatRoomBGM) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.CreatedTime = v
	}
	return nil
}

func (p *ChatRoomBGM) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ChatRoomBGMInfo = v
	}
	return nil
}

func (p *ChatRoomBGM) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ChatRoomBGM"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChatRoomBGM) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("creatorMid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:creatorMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.CreatorMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.creatorMid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:creatorMid: ", p), err)
	}
	return err
}

func (p *ChatRoomBGM) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.createdTime (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTime: ", p), err)
	}
	return err
}

func (p *ChatRoomBGM) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatRoomBGMInfo", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:chatRoomBGMInfo: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChatRoomBGMInfo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatRoomBGMInfo (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:chatRoomBGMInfo: ", p), err)
	}
	return err
}

func (p *ChatRoomBGM) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatRoomBGM(%+v)", *p)
}

// Attributes:
//  - KeyVersion
//  - GroupKeyId
//  - Creator
//  - CreatorKeyId
//  - Receiver
//  - ReceiverKeyId
//  - EncryptedSharedKey
//  - AllowedTypes
//  - SpecVersion
type E2EEGroupSharedKey struct {
	KeyVersion         int32         `thrift:"keyVersion,1" db:"keyVersion" json:"keyVersion"`
	GroupKeyId         int32         `thrift:"groupKeyId,2" db:"groupKeyId" json:"groupKeyId"`
	Creator            string        `thrift:"creator,3" db:"creator" json:"creator"`
	CreatorKeyId       int32         `thrift:"creatorKeyId,4" db:"creatorKeyId" json:"creatorKeyId"`
	Receiver           string        `thrift:"receiver,5" db:"receiver" json:"receiver"`
	ReceiverKeyId      int32         `thrift:"receiverKeyId,6" db:"receiverKeyId" json:"receiverKeyId"`
	EncryptedSharedKey []byte        `thrift:"encryptedSharedKey,7" db:"encryptedSharedKey" json:"encryptedSharedKey"`
	AllowedTypes       []ContentType `thrift:"allowedTypes,8" db:"allowedTypes" json:"allowedTypes"`
	SpecVersion        int32         `thrift:"specVersion,9" db:"specVersion" json:"specVersion"`
}

func NewE2EEGroupSharedKey() *E2EEGroupSharedKey {
	return &E2EEGroupSharedKey{}
}

func (p *E2EEGroupSharedKey) GetKeyVersion() int32 {
	return p.KeyVersion
}

func (p *E2EEGroupSharedKey) GetGroupKeyId() int32 {
	return p.GroupKeyId
}

func (p *E2EEGroupSharedKey) GetCreator() string {
	return p.Creator
}

func (p *E2EEGroupSharedKey) GetCreatorKeyId() int32 {
	return p.CreatorKeyId
}

func (p *E2EEGroupSharedKey) GetReceiver() string {
	return p.Receiver
}

func (p *E2EEGroupSharedKey) GetReceiverKeyId() int32 {
	return p.ReceiverKeyId
}

func (p *E2EEGroupSharedKey) GetEncryptedSharedKey() []byte {
	return p.EncryptedSharedKey
}

func (p *E2EEGroupSharedKey) GetAllowedTypes() []ContentType {
	return p.AllowedTypes
}

func (p *E2EEGroupSharedKey) GetSpecVersion() int32 {
	return p.SpecVersion
}
func (p *E2EEGroupSharedKey) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *E2EEGroupSharedKey) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.KeyVersion = v
	}
	return nil
}

func (p *E2EEGroupSharedKey) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupKeyId = v
	}
	return nil
}

func (p *E2EEGroupSharedKey) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Creator = v
	}
	return nil
}

func (p *E2EEGroupSharedKey) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.CreatorKeyId = v
	}
	return nil
}

func (p *E2EEGroupSharedKey) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Receiver = v
	}
	return nil
}

func (p *E2EEGroupSharedKey) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ReceiverKeyId = v
	}
	return nil
}

func (p *E2EEGroupSharedKey) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.EncryptedSharedKey = v
	}
	return nil
}

func (p *E2EEGroupSharedKey) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]ContentType, 0, size)
	p.AllowedTypes = tSet
	for i := 0; i < size; i++ {
		var _elem29 ContentType
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := ContentType(v)
			_elem29 = temp
		}
		p.AllowedTypes = append(p.AllowedTypes, _elem29)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *E2EEGroupSharedKey) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.SpecVersion = v
	}
	return nil
}

func (p *E2EEGroupSharedKey) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("E2EEGroupSharedKey"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *E2EEGroupSharedKey) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("keyVersion", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keyVersion: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.KeyVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.keyVersion (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keyVersion: ", p), err)
	}
	return err
}

func (p *E2EEGroupSharedKey) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupKeyId", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupKeyId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.GroupKeyId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupKeyId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupKeyId: ", p), err)
	}
	return err
}

func (p *E2EEGroupSharedKey) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("creator", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:creator: ", p), err)
	}
	if err := oprot.WriteString(string(p.Creator)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.creator (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:creator: ", p), err)
	}
	return err
}

func (p *E2EEGroupSharedKey) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("creatorKeyId", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:creatorKeyId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.CreatorKeyId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.creatorKeyId (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:creatorKeyId: ", p), err)
	}
	return err
}

func (p *E2EEGroupSharedKey) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("receiver", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:receiver: ", p), err)
	}
	if err := oprot.WriteString(string(p.Receiver)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.receiver (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:receiver: ", p), err)
	}
	return err
}

func (p *E2EEGroupSharedKey) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("receiverKeyId", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:receiverKeyId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReceiverKeyId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.receiverKeyId (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:receiverKeyId: ", p), err)
	}
	return err
}

func (p *E2EEGroupSharedKey) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("encryptedSharedKey", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:encryptedSharedKey: ", p), err)
	}
	if err := oprot.WriteBinary(p.EncryptedSharedKey); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.encryptedSharedKey (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:encryptedSharedKey: ", p), err)
	}
	return err
}

func (p *E2EEGroupSharedKey) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("allowedTypes", thrift.SET, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:allowedTypes: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.I32, len(p.AllowedTypes)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for i := 0; i < len(p.AllowedTypes); i++ {
		for j := i + 1; j < len(p.AllowedTypes); j++ {
			if reflect.DeepEqual(p.AllowedTypes[i], p.AllowedTypes[j]) {
				return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.AllowedTypes[i]))
			}
		}
	}
	for _, v := range p.AllowedTypes {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:allowedTypes: ", p), err)
	}
	return err
}

func (p *E2EEGroupSharedKey) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("specVersion", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:specVersion: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SpecVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.specVersion (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:specVersion: ", p), err)
	}
	return err
}

func (p *E2EEGroupSharedKey) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("E2EEGroupSharedKey(%+v)", *p)
}

// Attributes:
//  - Mid
//  - Userid
//  - Phone
//  - Email
//  - RegionCode
//  - DisplayName
//  - PhoneticName
//  - PictureStatus
//  - ThumbnailUrl
//  - StatusMessage
//  - AllowSearchByUserid
//  - AllowSearchByEmail
//  - PicturePath
//  - MusicProfile
//  - VideoProfile
//  - StatusMessageContentMetadata
//  - AvatarProfile
type Profile struct {
	Mid string `thrift:"mid,1" db:"mid" json:"mid"`
	// unused field # 2
	Userid string `thrift:"userid,3" db:"userid" json:"userid"`
	// unused fields # 4 to 9
	Phone      string `thrift:"phone,10" db:"phone" json:"phone"`
	Email      string `thrift:"email,11" db:"email" json:"email"`
	RegionCode string `thrift:"regionCode,12" db:"regionCode" json:"regionCode"`
	// unused fields # 13 to 19
	DisplayName   string `thrift:"displayName,20" db:"displayName" json:"displayName"`
	PhoneticName  string `thrift:"phoneticName,21" db:"phoneticName" json:"phoneticName"`
	PictureStatus string `thrift:"pictureStatus,22" db:"pictureStatus" json:"pictureStatus"`
	ThumbnailUrl  string `thrift:"thumbnailUrl,23" db:"thumbnailUrl" json:"thumbnailUrl"`
	StatusMessage string `thrift:"statusMessage,24" db:"statusMessage" json:"statusMessage"`
	// unused fields # 25 to 30
	AllowSearchByUserid          bool              `thrift:"allowSearchByUserid,31" db:"allowSearchByUserid" json:"allowSearchByUserid"`
	AllowSearchByEmail           bool              `thrift:"allowSearchByEmail,32" db:"allowSearchByEmail" json:"allowSearchByEmail"`
	PicturePath                  string            `thrift:"picturePath,33" db:"picturePath" json:"picturePath"`
	MusicProfile                 string            `thrift:"musicProfile,34" db:"musicProfile" json:"musicProfile"`
	VideoProfile                 string            `thrift:"videoProfile,35" db:"videoProfile" json:"videoProfile"`
	StatusMessageContentMetadata map[string]string `thrift:"statusMessageContentMetadata,36" db:"statusMessageContentMetadata" json:"statusMessageContentMetadata"`
	AvatarProfile                *AvatarProfile    `thrift:"avatarProfile,37" db:"avatarProfile" json:"avatarProfile"`
}

func NewProfile() *Profile {
	return &Profile{}
}

func (p *Profile) GetMid() string {
	return p.Mid
}

func (p *Profile) GetUserid() string {
	return p.Userid
}

func (p *Profile) GetPhone() string {
	return p.Phone
}

func (p *Profile) GetEmail() string {
	return p.Email
}

func (p *Profile) GetRegionCode() string {
	return p.RegionCode
}

func (p *Profile) GetDisplayName() string {
	return p.DisplayName
}

func (p *Profile) GetPhoneticName() string {
	return p.PhoneticName
}

func (p *Profile) GetPictureStatus() string {
	return p.PictureStatus
}

func (p *Profile) GetThumbnailUrl() string {
	return p.ThumbnailUrl
}

func (p *Profile) GetStatusMessage() string {
	return p.StatusMessage
}

func (p *Profile) GetAllowSearchByUserid() bool {
	return p.AllowSearchByUserid
}

func (p *Profile) GetAllowSearchByEmail() bool {
	return p.AllowSearchByEmail
}

func (p *Profile) GetPicturePath() string {
	return p.PicturePath
}

func (p *Profile) GetMusicProfile() string {
	return p.MusicProfile
}

func (p *Profile) GetVideoProfile() string {
	return p.VideoProfile
}

func (p *Profile) GetStatusMessageContentMetadata() map[string]string {
	return p.StatusMessageContentMetadata
}

var Profile_AvatarProfile_DEFAULT *AvatarProfile

func (p *Profile) GetAvatarProfile() *AvatarProfile {
	if !p.IsSetAvatarProfile() {
		return Profile_AvatarProfile_DEFAULT
	}
	return p.AvatarProfile
}
func (p *Profile) IsSetAvatarProfile() bool {
	return p.AvatarProfile != nil
}

func (p *Profile) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField20(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 21:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField21(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 22:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField22(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 23:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField23(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 24:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField24(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 31:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField31(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 32:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField32(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 33:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField33(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 34:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField34(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 35:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField35(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 36:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField36(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 37:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField37(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Profile) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *Profile) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Userid = v
	}
	return nil
}

func (p *Profile) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Phone = v
	}
	return nil
}

func (p *Profile) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Email = v
	}
	return nil
}

func (p *Profile) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.RegionCode = v
	}
	return nil
}

func (p *Profile) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.DisplayName = v
	}
	return nil
}

func (p *Profile) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.PhoneticName = v
	}
	return nil
}

func (p *Profile) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		p.PictureStatus = v
	}
	return nil
}

func (p *Profile) ReadField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		p.ThumbnailUrl = v
	}
	return nil
}

func (p *Profile) ReadField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 24: ", err)
	} else {
		p.StatusMessage = v
	}
	return nil
}

func (p *Profile) ReadField31(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 31: ", err)
	} else {
		p.AllowSearchByUserid = v
	}
	return nil
}

func (p *Profile) ReadField32(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 32: ", err)
	} else {
		p.AllowSearchByEmail = v
	}
	return nil
}

func (p *Profile) ReadField33(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 33: ", err)
	} else {
		p.PicturePath = v
	}
	return nil
}

func (p *Profile) ReadField34(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 34: ", err)
	} else {
		p.MusicProfile = v
	}
	return nil
}

func (p *Profile) ReadField35(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 35: ", err)
	} else {
		p.VideoProfile = v
	}
	return nil
}

func (p *Profile) ReadField36(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.StatusMessageContentMetadata = tMap
	for i := 0; i < size; i++ {
		var _key30 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key30 = v
		}
		var _val31 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val31 = v
		}
		p.StatusMessageContentMetadata[_key30] = _val31
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Profile) ReadField37(iprot thrift.TProtocol) error {
	p.AvatarProfile = &AvatarProfile{}
	if err := p.AvatarProfile.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AvatarProfile), err)
	}
	return nil
}

func (p *Profile) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Profile"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField20(oprot); err != nil {
			return err
		}
		if err := p.writeField21(oprot); err != nil {
			return err
		}
		if err := p.writeField22(oprot); err != nil {
			return err
		}
		if err := p.writeField23(oprot); err != nil {
			return err
		}
		if err := p.writeField24(oprot); err != nil {
			return err
		}
		if err := p.writeField31(oprot); err != nil {
			return err
		}
		if err := p.writeField32(oprot); err != nil {
			return err
		}
		if err := p.writeField33(oprot); err != nil {
			return err
		}
		if err := p.writeField34(oprot); err != nil {
			return err
		}
		if err := p.writeField35(oprot); err != nil {
			return err
		}
		if err := p.writeField36(oprot); err != nil {
			return err
		}
		if err := p.writeField37(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Profile) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err)
	}
	return err
}

func (p *Profile) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userid", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Userid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userid (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userid: ", p), err)
	}
	return err
}

func (p *Profile) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phone", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:phone: ", p), err)
	}
	if err := oprot.WriteString(string(p.Phone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.phone (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:phone: ", p), err)
	}
	return err
}

func (p *Profile) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("email", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:email: ", p), err)
	}
	if err := oprot.WriteString(string(p.Email)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.email (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:email: ", p), err)
	}
	return err
}

func (p *Profile) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("regionCode", thrift.STRING, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:regionCode: ", p), err)
	}
	if err := oprot.WriteString(string(p.RegionCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.regionCode (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:regionCode: ", p), err)
	}
	return err
}

func (p *Profile) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:displayName: ", p), err)
	}
	if err := oprot.WriteString(string(p.DisplayName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.displayName (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:displayName: ", p), err)
	}
	return err
}

func (p *Profile) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phoneticName", thrift.STRING, 21); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:phoneticName: ", p), err)
	}
	if err := oprot.WriteString(string(p.PhoneticName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.phoneticName (21) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 21:phoneticName: ", p), err)
	}
	return err
}

func (p *Profile) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pictureStatus", thrift.STRING, 22); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:pictureStatus: ", p), err)
	}
	if err := oprot.WriteString(string(p.PictureStatus)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pictureStatus (22) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 22:pictureStatus: ", p), err)
	}
	return err
}

func (p *Profile) writeField23(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thumbnailUrl", thrift.STRING, 23); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:thumbnailUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.ThumbnailUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.thumbnailUrl (23) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 23:thumbnailUrl: ", p), err)
	}
	return err
}

func (p *Profile) writeField24(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("statusMessage", thrift.STRING, 24); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:statusMessage: ", p), err)
	}
	if err := oprot.WriteString(string(p.StatusMessage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.statusMessage (24) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 24:statusMessage: ", p), err)
	}
	return err
}

func (p *Profile) writeField31(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("allowSearchByUserid", thrift.BOOL, 31); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:allowSearchByUserid: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.AllowSearchByUserid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.allowSearchByUserid (31) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 31:allowSearchByUserid: ", p), err)
	}
	return err
}

func (p *Profile) writeField32(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("allowSearchByEmail", thrift.BOOL, 32); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:allowSearchByEmail: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.AllowSearchByEmail)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.allowSearchByEmail (32) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 32:allowSearchByEmail: ", p), err)
	}
	return err
}

func (p *Profile) writeField33(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("picturePath", thrift.STRING, 33); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:picturePath: ", p), err)
	}
	if err := oprot.WriteString(string(p.PicturePath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.picturePath (33) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 33:picturePath: ", p), err)
	}
	return err
}

func (p *Profile) writeField34(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("musicProfile", thrift.STRING, 34); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:musicProfile: ", p), err)
	}
	if err := oprot.WriteString(string(p.MusicProfile)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.musicProfile (34) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 34:musicProfile: ", p), err)
	}
	return err
}

func (p *Profile) writeField35(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("videoProfile", thrift.STRING, 35); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:videoProfile: ", p), err)
	}
	if err := oprot.WriteString(string(p.VideoProfile)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.videoProfile (35) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 35:videoProfile: ", p), err)
	}
	return err
}

func (p *Profile) writeField36(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("statusMessageContentMetadata", thrift.MAP, 36); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 36:statusMessageContentMetadata: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.StatusMessageContentMetadata)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.StatusMessageContentMetadata {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 36:statusMessageContentMetadata: ", p), err)
	}
	return err
}

func (p *Profile) writeField37(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("avatarProfile", thrift.STRUCT, 37); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 37:avatarProfile: ", p), err)
	}
	if err := p.AvatarProfile.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AvatarProfile), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 37:avatarProfile: ", p), err)
	}
	return err
}

func (p *Profile) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Profile(%+v)", *p)
}

// Attributes:
//  - AuthToken
//  - UserCreated
//  - RecommendEmailRegistration
type RegisterWithSnsIdResult_ struct {
	AuthToken                  string `thrift:"authToken,1" db:"authToken" json:"authToken"`
	UserCreated                bool   `thrift:"userCreated,2" db:"userCreated" json:"userCreated"`
	RecommendEmailRegistration bool   `thrift:"recommendEmailRegistration,3" db:"recommendEmailRegistration" json:"recommendEmailRegistration"`
}

func NewRegisterWithSnsIdResult_() *RegisterWithSnsIdResult_ {
	return &RegisterWithSnsIdResult_{}
}

func (p *RegisterWithSnsIdResult_) GetAuthToken() string {
	return p.AuthToken
}

func (p *RegisterWithSnsIdResult_) GetUserCreated() bool {
	return p.UserCreated
}

func (p *RegisterWithSnsIdResult_) GetRecommendEmailRegistration() bool {
	return p.RecommendEmailRegistration
}
func (p *RegisterWithSnsIdResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RegisterWithSnsIdResult_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthToken = v
	}
	return nil
}

func (p *RegisterWithSnsIdResult_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserCreated = v
	}
	return nil
}

func (p *RegisterWithSnsIdResult_) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RecommendEmailRegistration = v
	}
	return nil
}

func (p *RegisterWithSnsIdResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RegisterWithSnsIdResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RegisterWithSnsIdResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authToken: ", p), err)
	}
	return err
}

func (p *RegisterWithSnsIdResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userCreated", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userCreated: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.UserCreated)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userCreated (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userCreated: ", p), err)
	}
	return err
}

func (p *RegisterWithSnsIdResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("recommendEmailRegistration", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:recommendEmailRegistration: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.RecommendEmailRegistration)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.recommendEmailRegistration (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:recommendEmailRegistration: ", p), err)
	}
	return err
}

func (p *RegisterWithSnsIdResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterWithSnsIdResult_(%+v)", *p)
}

// Attributes:
//  - MetaData
type AuthSessionRequest struct {
	MetaData map[string]string `thrift:"metaData,1" db:"metaData" json:"metaData"`
}

func NewAuthSessionRequest() *AuthSessionRequest {
	return &AuthSessionRequest{}
}

func (p *AuthSessionRequest) GetMetaData() map[string]string {
	return p.MetaData
}
func (p *AuthSessionRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AuthSessionRequest) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.MetaData = tMap
	for i := 0; i < size; i++ {
		var _key32 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key32 = v
		}
		var _val33 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val33 = v
		}
		p.MetaData[_key32] = _val33
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AuthSessionRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AuthSessionRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AuthSessionRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("metaData", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metaData: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.MetaData)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.MetaData {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metaData: ", p), err)
	}
	return err
}

func (p *AuthSessionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthSessionRequest(%+v)", *p)
}

// Attributes:
//  - CurrentPointsFixedPointDecimal
type Balance struct {
	CurrentPointsFixedPointDecimal string `thrift:"currentPointsFixedPointDecimal,1" db:"currentPointsFixedPointDecimal" json:"currentPointsFixedPointDecimal"`
}

func NewBalance() *Balance {
	return &Balance{}
}

func (p *Balance) GetCurrentPointsFixedPointDecimal() string {
	return p.CurrentPointsFixedPointDecimal
}
func (p *Balance) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Balance) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.CurrentPointsFixedPointDecimal = v
	}
	return nil
}

func (p *Balance) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Balance"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Balance) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currentPointsFixedPointDecimal", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:currentPointsFixedPointDecimal: ", p), err)
	}
	if err := oprot.WriteString(string(p.CurrentPointsFixedPointDecimal)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.currentPointsFixedPointDecimal (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:currentPointsFixedPointDecimal: ", p), err)
	}
	return err
}

func (p *Balance) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Balance(%+v)", *p)
}

// Attributes:
//  - Balance
type GetBalanceResponse struct {
	Balance *Balance `thrift:"balance,1" db:"balance" json:"balance"`
}

func NewGetBalanceResponse() *GetBalanceResponse {
	return &GetBalanceResponse{}
}

var GetBalanceResponse_Balance_DEFAULT *Balance

func (p *GetBalanceResponse) GetBalance() *Balance {
	if !p.IsSetBalance() {
		return GetBalanceResponse_Balance_DEFAULT
	}
	return p.Balance
}
func (p *GetBalanceResponse) IsSetBalance() bool {
	return p.Balance != nil
}

func (p *GetBalanceResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetBalanceResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Balance = &Balance{}
	if err := p.Balance.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Balance), err)
	}
	return nil
}

func (p *GetBalanceResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetBalanceResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetBalanceResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("balance", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:balance: ", p), err)
	}
	if err := p.Balance.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Balance), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:balance: ", p), err)
	}
	return err
}

func (p *GetBalanceResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetBalanceResponse(%+v)", *p)
}

type GetBalanceRequest struct {
}

func NewGetBalanceRequest() *GetBalanceRequest {
	return &GetBalanceRequest{}
}

func (p *GetBalanceRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetBalanceRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetBalanceRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetBalanceRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetBalanceRequest(%+v)", *p)
}

// Attributes:
//  - VerificationResult_
//  - AccountMigrationCheckType
//  - RecommendAddFriends
type PhoneVerificationResult_ struct {
	VerificationResult_       VerificationResult_       `thrift:"verificationResult,1" db:"verificationResult" json:"verificationResult"`
	AccountMigrationCheckType AccountMigrationCheckType `thrift:"accountMigrationCheckType,2" db:"accountMigrationCheckType" json:"accountMigrationCheckType"`
	RecommendAddFriends       bool                      `thrift:"recommendAddFriends,3" db:"recommendAddFriends" json:"recommendAddFriends"`
}

func NewPhoneVerificationResult_() *PhoneVerificationResult_ {
	return &PhoneVerificationResult_{}
}

func (p *PhoneVerificationResult_) GetVerificationResult_() VerificationResult_ {
	return p.VerificationResult_
}

func (p *PhoneVerificationResult_) GetAccountMigrationCheckType() AccountMigrationCheckType {
	return p.AccountMigrationCheckType
}

func (p *PhoneVerificationResult_) GetRecommendAddFriends() bool {
	return p.RecommendAddFriends
}
func (p *PhoneVerificationResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PhoneVerificationResult_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := VerificationResult_(v)
		p.VerificationResult_ = temp
	}
	return nil
}

func (p *PhoneVerificationResult_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := AccountMigrationCheckType(v)
		p.AccountMigrationCheckType = temp
	}
	return nil
}

func (p *PhoneVerificationResult_) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RecommendAddFriends = v
	}
	return nil
}

func (p *PhoneVerificationResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PhoneVerificationResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PhoneVerificationResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("verificationResult", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:verificationResult: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.VerificationResult_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.verificationResult (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:verificationResult: ", p), err)
	}
	return err
}

func (p *PhoneVerificationResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("accountMigrationCheckType", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:accountMigrationCheckType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.AccountMigrationCheckType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.accountMigrationCheckType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:accountMigrationCheckType: ", p), err)
	}
	return err
}

func (p *PhoneVerificationResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("recommendAddFriends", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:recommendAddFriends: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.RecommendAddFriends)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.recommendAddFriends (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:recommendAddFriends: ", p), err)
	}
	return err
}

func (p *PhoneVerificationResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PhoneVerificationResult_(%+v)", *p)
}

// Attributes:
//  - Mid
//  - CreatedTime
//  - Contents
//  - NotificationDisabled
//  - MemberMids
type Room struct {
	Mid         string `thrift:"mid,1" db:"mid" json:"mid"`
	CreatedTime int64  `thrift:"createdTime,2" db:"createdTime" json:"createdTime"`
	// unused fields # 3 to 9
	Contents []*Contact `thrift:"contents,10" db:"contents" json:"contents"`
	// unused fields # 11 to 30
	NotificationDisabled bool `thrift:"notificationDisabled,31" db:"notificationDisabled" json:"notificationDisabled"`
	// unused fields # 32 to 39
	MemberMids []string `thrift:"memberMids,40" db:"memberMids" json:"memberMids"`
}

func NewRoom() *Room {
	return &Room{}
}

func (p *Room) GetMid() string {
	return p.Mid
}

func (p *Room) GetCreatedTime() int64 {
	return p.CreatedTime
}

func (p *Room) GetContents() []*Contact {
	return p.Contents
}

func (p *Room) GetNotificationDisabled() bool {
	return p.NotificationDisabled
}

func (p *Room) GetMemberMids() []string {
	return p.MemberMids
}
func (p *Room) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 31:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField31(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 40:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField40(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Room) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *Room) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.CreatedTime = v
	}
	return nil
}

func (p *Room) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Contact, 0, size)
	p.Contents = tSlice
	for i := 0; i < size; i++ {
		_elem34 := &Contact{}
		if err := _elem34.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem34), err)
		}
		p.Contents = append(p.Contents, _elem34)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Room) ReadField31(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 31: ", err)
	} else {
		p.NotificationDisabled = v
	}
	return nil
}

func (p *Room) ReadField40(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.MemberMids = tSlice
	for i := 0; i < size; i++ {
		var _elem35 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem35 = v
		}
		p.MemberMids = append(p.MemberMids, _elem35)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Room) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Room"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField31(oprot); err != nil {
			return err
		}
		if err := p.writeField40(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Room) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err)
	}
	return err
}

func (p *Room) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.createdTime (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTime: ", p), err)
	}
	return err
}

func (p *Room) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contents", thrift.LIST, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:contents: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Contents)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Contents {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:contents: ", p), err)
	}
	return err
}

func (p *Room) writeField31(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationDisabled", thrift.BOOL, 31); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:notificationDisabled: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.NotificationDisabled)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notificationDisabled (31) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 31:notificationDisabled: ", p), err)
	}
	return err
}

func (p *Room) writeField40(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberMids", thrift.LIST, 40); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:memberMids: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.MemberMids)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.MemberMids {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 40:memberMids: ", p), err)
	}
	return err
}

func (p *Room) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Room(%+v)", *p)
}

// Attributes:
//  - Chats
type GetChatsResponse struct {
	Chats []*Chat `thrift:"chats,1" db:"chats" json:"chats"`
}

func NewGetChatsResponse() *GetChatsResponse {
	return &GetChatsResponse{}
}

func (p *GetChatsResponse) GetChats() []*Chat {
	return p.Chats
}
func (p *GetChatsResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetChatsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Chat, 0, size)
	p.Chats = tSlice
	for i := 0; i < size; i++ {
		_elem36 := &Chat{}
		if err := _elem36.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem36), err)
		}
		p.Chats = append(p.Chats, _elem36)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GetChatsResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetChatsResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetChatsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chats", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chats: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Chats)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Chats {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chats: ", p), err)
	}
	return err
}

func (p *GetChatsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetChatsResponse(%+v)", *p)
}

// Attributes:
//  - ChatMid
//  - WithMembers
//  - WithInvitees
type GetChatsRequest struct {
	ChatMid      []string `thrift:"chatMid,1" db:"chatMid" json:"chatMid"`
	WithMembers  bool     `thrift:"withMembers,2" db:"withMembers" json:"withMembers"`
	WithInvitees bool     `thrift:"withInvitees,3" db:"withInvitees" json:"withInvitees"`
}

func NewGetChatsRequest() *GetChatsRequest {
	return &GetChatsRequest{}
}

func (p *GetChatsRequest) GetChatMid() []string {
	return p.ChatMid
}

func (p *GetChatsRequest) GetWithMembers() bool {
	return p.WithMembers
}

func (p *GetChatsRequest) GetWithInvitees() bool {
	return p.WithInvitees
}
func (p *GetChatsRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetChatsRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ChatMid = tSlice
	for i := 0; i < size; i++ {
		var _elem37 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem37 = v
		}
		p.ChatMid = append(p.ChatMid, _elem37)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GetChatsRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.WithMembers = v
	}
	return nil
}

func (p *GetChatsRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.WithInvitees = v
	}
	return nil
}

func (p *GetChatsRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetChatsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetChatsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatMid", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chatMid: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ChatMid)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ChatMid {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chatMid: ", p), err)
	}
	return err
}

func (p *GetChatsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withMembers", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:withMembers: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.WithMembers)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.withMembers (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:withMembers: ", p), err)
	}
	return err
}

func (p *GetChatsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withInvitees", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:withInvitees: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.WithInvitees)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.withInvitees (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:withInvitees: ", p), err)
	}
	return err
}

func (p *GetChatsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetChatsRequest(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupMid
type ReissueChatTicketRequest struct {
	ReqSeq   int32  `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	GroupMid string `thrift:"groupMid,2" db:"groupMid" json:"groupMid"`
}

func NewReissueChatTicketRequest() *ReissueChatTicketRequest {
	return &ReissueChatTicketRequest{}
}

func (p *ReissueChatTicketRequest) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *ReissueChatTicketRequest) GetGroupMid() string {
	return p.GroupMid
}
func (p *ReissueChatTicketRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReissueChatTicketRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *ReissueChatTicketRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupMid = v
	}
	return nil
}

func (p *ReissueChatTicketRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReissueChatTicketRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReissueChatTicketRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *ReissueChatTicketRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupMid: ", p), err)
	}
	return err
}

func (p *ReissueChatTicketRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReissueChatTicketRequest(%+v)", *p)
}

// Attributes:
//  - TicketId
type ReissueChatTicketResponse struct {
	TicketId string `thrift:"ticketId,1" db:"ticketId" json:"ticketId"`
}

func NewReissueChatTicketResponse() *ReissueChatTicketResponse {
	return &ReissueChatTicketResponse{}
}

func (p *ReissueChatTicketResponse) GetTicketId() string {
	return p.TicketId
}
func (p *ReissueChatTicketResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReissueChatTicketResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TicketId = v
	}
	return nil
}

func (p *ReissueChatTicketResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReissueChatTicketResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReissueChatTicketResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ticketId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ticketId: ", p), err)
	}
	if err := oprot.WriteString(string(p.TicketId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ticketId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ticketId: ", p), err)
	}
	return err
}

func (p *ReissueChatTicketResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReissueChatTicketResponse(%+v)", *p)
}

// Attributes:
//  - Title
//  - Address
//  - Latitude
//  - Longitude
//  - Phone
//  - CategoryId
//  - Provider
//  - Accuracy
type Location struct {
	Title      string               `thrift:"title,1" db:"title" json:"title"`
	Address    string               `thrift:"address,2" db:"address" json:"address"`
	Latitude   float64              `thrift:"latitude,3" db:"latitude" json:"latitude"`
	Longitude  float64              `thrift:"longitude,4" db:"longitude" json:"longitude"`
	Phone      string               `thrift:"phone,5" db:"phone" json:"phone"`
	CategoryId string               `thrift:"categoryId,6" db:"categoryId" json:"categoryId"`
	Provider   LocationProvider     `thrift:"provider,7" db:"provider" json:"provider"`
	Accuracy   *GeolocationAccuracy `thrift:"accuracy,8" db:"accuracy" json:"accuracy"`
}

func NewLocation() *Location {
	return &Location{}
}

func (p *Location) GetTitle() string {
	return p.Title
}

func (p *Location) GetAddress() string {
	return p.Address
}

func (p *Location) GetLatitude() float64 {
	return p.Latitude
}

func (p *Location) GetLongitude() float64 {
	return p.Longitude
}

func (p *Location) GetPhone() string {
	return p.Phone
}

func (p *Location) GetCategoryId() string {
	return p.CategoryId
}

func (p *Location) GetProvider() LocationProvider {
	return p.Provider
}

var Location_Accuracy_DEFAULT *GeolocationAccuracy

func (p *Location) GetAccuracy() *GeolocationAccuracy {
	if !p.IsSetAccuracy() {
		return Location_Accuracy_DEFAULT
	}
	return p.Accuracy
}
func (p *Location) IsSetAccuracy() bool {
	return p.Accuracy != nil
}

func (p *Location) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Location) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *Location) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Address = v
	}
	return nil
}

func (p *Location) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Latitude = v
	}
	return nil
}

func (p *Location) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Longitude = v
	}
	return nil
}

func (p *Location) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Phone = v
	}
	return nil
}

func (p *Location) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.CategoryId = v
	}
	return nil
}

func (p *Location) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := LocationProvider(v)
		p.Provider = temp
	}
	return nil
}

func (p *Location) ReadField8(iprot thrift.TProtocol) error {
	p.Accuracy = &GeolocationAccuracy{}
	if err := p.Accuracy.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Accuracy), err)
	}
	return nil
}

func (p *Location) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Location"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Location) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:title: ", p), err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.title (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:title: ", p), err)
	}
	return err
}

func (p *Location) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("address", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:address: ", p), err)
	}
	if err := oprot.WriteString(string(p.Address)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.address (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:address: ", p), err)
	}
	return err
}

func (p *Location) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("latitude", thrift.DOUBLE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:latitude: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Latitude)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.latitude (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:latitude: ", p), err)
	}
	return err
}

func (p *Location) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("longitude", thrift.DOUBLE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:longitude: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Longitude)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.longitude (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:longitude: ", p), err)
	}
	return err
}

func (p *Location) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phone", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:phone: ", p), err)
	}
	if err := oprot.WriteString(string(p.Phone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.phone (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:phone: ", p), err)
	}
	return err
}

func (p *Location) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("categoryId", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:categoryId: ", p), err)
	}
	if err := oprot.WriteString(string(p.CategoryId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.categoryId (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:categoryId: ", p), err)
	}
	return err
}

func (p *Location) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("provider", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:provider: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Provider)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.provider (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:provider: ", p), err)
	}
	return err
}

func (p *Location) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("accuracy", thrift.STRUCT, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:accuracy: ", p), err)
	}
	if err := p.Accuracy.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Accuracy), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:accuracy: ", p), err)
	}
	return err
}

func (p *Location) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Location(%+v)", *p)
}

// Attributes:
//  - From_
//  - To
//  - ToType
//  - ID
//  - CreatedTime
//  - DeliveredTime
//  - Text
//  - Location
//  - HasContent
//  - ContentType
//  - ContentMetadata
//  - ContentPreview
//  - SessionId
//  - Chunks
//  - RelatedMessageId
//  - MessageRelationType
//  - ReadCount
//  - RelatedMessageServiceCode
//  - AppExtensionType
type Message struct {
	From_         string `thrift:"from_,1" db:"from_" json:"from_"`
	To            string `thrift:"to,2" db:"to" json:"to"`
	ToType        ToType `thrift:"toType,3" db:"toType" json:"toType"`
	ID            string `thrift:"id,4" db:"id" json:"id"`
	CreatedTime   int64  `thrift:"createdTime,5" db:"createdTime" json:"createdTime"`
	DeliveredTime int64  `thrift:"deliveredTime,6" db:"deliveredTime" json:"deliveredTime"`
	// unused fields # 7 to 9
	Text     string    `thrift:"text,10" db:"text" json:"text"`
	Location *Location `thrift:"location,11" db:"location" json:"location,omitempty"`
	// unused fields # 12 to 13
	HasContent  bool        `thrift:"hasContent,14" db:"hasContent" json:"hasContent"`
	ContentType ContentType `thrift:"contentType,15" db:"contentType" json:"contentType"`
	// unused field # 16
	ContentPreview            []byte                    `thrift:"contentPreview,17" db:"contentPreview" json:"contentPreview"`
	ContentMetadata           map[string]string         `thrift:"contentMetadata,18" db:"contentMetadata" json:"contentMetadata"`
	SessionId                 int8                      `thrift:"sessionId,19" db:"sessionId" json:"sessionId"`
	Chunks                    [][]byte                  `thrift:"chunks,20" db:"chunks" json:"chunks"`
	RelatedMessageId          string                    `thrift:"relatedMessageId,21" db:"relatedMessageId" json:"relatedMessageId"`
	MessageRelationType       MessageRelationType       `thrift:"messageRelationType,22" db:"messageRelationType" json:"messageRelationType"`
	ReadCount                 int32                     `thrift:"readCount,23" db:"readCount" json:"readCount"`
	RelatedMessageServiceCode RelatedMessageServiceCode `thrift:"relatedMessageServiceCode,24" db:"relatedMessageServiceCode" json:"relatedMessageServiceCode"`
	AppExtensionType          AppExtensionType          `thrift:"appExtensionType,25" db:"appExtensionType" json:"appExtensionType"`
}

func NewMessage() *Message {
	return &Message{}
}

func (p *Message) GetFrom_() string {
	return p.From_
}

func (p *Message) GetTo() string {
	return p.To
}

func (p *Message) GetToType() ToType {
	return p.ToType
}

func (p *Message) GetID() string {
	return p.ID
}

func (p *Message) GetCreatedTime() int64 {
	return p.CreatedTime
}

func (p *Message) GetDeliveredTime() int64 {
	return p.DeliveredTime
}

func (p *Message) GetText() string {
	return p.Text
}

var Message_Location_DEFAULT *Location

func (p *Message) GetLocation() *Location {
	if !p.IsSetLocation() {
		return Message_Location_DEFAULT
	}
	return p.Location
}

func (p *Message) GetHasContent() bool {
	return p.HasContent
}

func (p *Message) GetContentType() ContentType {
	return p.ContentType
}

func (p *Message) GetContentMetadata() map[string]string {
	return p.ContentMetadata
}

func (p *Message) GetContentPreview() []byte {
	return p.ContentPreview
}

func (p *Message) GetSessionId() int8 {
	return p.SessionId
}

func (p *Message) GetChunks() [][]byte {
	return p.Chunks
}

func (p *Message) GetRelatedMessageId() string {
	return p.RelatedMessageId
}

func (p *Message) GetMessageRelationType() MessageRelationType {
	return p.MessageRelationType
}

func (p *Message) GetReadCount() int32 {
	return p.ReadCount
}

func (p *Message) GetRelatedMessageServiceCode() RelatedMessageServiceCode {
	return p.RelatedMessageServiceCode
}

func (p *Message) GetAppExtensionType() AppExtensionType {
	return p.AppExtensionType
}
func (p *Message) IsSetLocation() bool {
	return p.Location != nil
}

func (p *Message) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField14(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 15:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField15(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 18:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField18(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField17(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 19:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField19(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 20:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField20(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 21:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField21(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 22:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField22(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 23:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField23(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 24:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField24(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 25:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField25(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Message) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.From_ = v
	}
	return nil
}

func (p *Message) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.To = v
	}
	return nil
}

func (p *Message) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := ToType(v)
		p.ToType = temp
	}
	return nil
}

func (p *Message) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Message) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.CreatedTime = v
	}
	return nil
}

func (p *Message) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.DeliveredTime = v
	}
	return nil
}

func (p *Message) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Text = v
	}
	return nil
}

func (p *Message) ReadField11(iprot thrift.TProtocol) error {
	p.Location = &Location{}
	if err := p.Location.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Location), err)
	}
	return nil
}

func (p *Message) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.HasContent = v
	}
	return nil
}

func (p *Message) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		temp := ContentType(v)
		p.ContentType = temp
	}
	return nil
}

func (p *Message) ReadField18(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.ContentMetadata = tMap
	for i := 0; i < size; i++ {
		var _key38 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key38 = v
		}
		var _val39 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val39 = v
		}
		p.ContentMetadata[_key38] = _val39
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Message) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.ContentPreview = v
	}
	return nil
}

func (p *Message) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		temp := int8(v)
		p.SessionId = temp
	}
	return nil
}

func (p *Message) ReadField20(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]byte, 0, size)
	p.Chunks = tSlice
	for i := 0; i < size; i++ {
		var _elem40 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem40 = v
		}
		p.Chunks = append(p.Chunks, _elem40)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Message) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.RelatedMessageId = v
	}
	return nil
}

func (p *Message) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		temp := MessageRelationType(v)
		p.MessageRelationType = temp
	}
	return nil
}

func (p *Message) ReadField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		p.ReadCount = v
	}
	return nil
}

func (p *Message) ReadField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 24: ", err)
	} else {
		temp := RelatedMessageServiceCode(v)
		p.RelatedMessageServiceCode = temp
	}
	return nil
}

func (p *Message) ReadField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 25: ", err)
	} else {
		temp := AppExtensionType(v)
		p.AppExtensionType = temp
	}
	return nil
}

func (p *Message) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Message"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
		if err := p.writeField15(oprot); err != nil {
			return err
		}
		if err := p.writeField17(oprot); err != nil {
			return err
		}
		if err := p.writeField18(oprot); err != nil {
			return err
		}
		if err := p.writeField19(oprot); err != nil {
			return err
		}
		if err := p.writeField20(oprot); err != nil {
			return err
		}
		if err := p.writeField21(oprot); err != nil {
			return err
		}
		if err := p.writeField22(oprot); err != nil {
			return err
		}
		if err := p.writeField23(oprot); err != nil {
			return err
		}
		if err := p.writeField24(oprot); err != nil {
			return err
		}
		if err := p.writeField25(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Message) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("from_", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:from_: ", p), err)
	}
	if err := oprot.WriteString(string(p.From_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.from_ (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:from_: ", p), err)
	}
	return err
}

func (p *Message) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("to", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:to: ", p), err)
	}
	if err := oprot.WriteString(string(p.To)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.to (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:to: ", p), err)
	}
	return err
}

func (p *Message) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("toType", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:toType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ToType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.toType (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:toType: ", p), err)
	}
	return err
}

func (p *Message) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:id: ", p), err)
	}
	return err
}

func (p *Message) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createdTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.createdTime (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createdTime: ", p), err)
	}
	return err
}

func (p *Message) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deliveredTime", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:deliveredTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.DeliveredTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deliveredTime (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:deliveredTime: ", p), err)
	}
	return err
}

func (p *Message) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("text", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:text: ", p), err)
	}
	if err := oprot.WriteString(string(p.Text)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.text (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:text: ", p), err)
	}
	return err
}

func (p *Message) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("location", thrift.STRUCT, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:location: ", p), err)
	}
	if err := p.Location.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Location), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:location: ", p), err)
	}
	return err
}

func (p *Message) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hasContent", thrift.BOOL, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:hasContent: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.HasContent)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hasContent (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:hasContent: ", p), err)
	}
	return err
}

func (p *Message) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contentType", thrift.I32, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:contentType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ContentType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.contentType (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:contentType: ", p), err)
	}
	return err
}

func (p *Message) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contentPreview", thrift.STRING, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:contentPreview: ", p), err)
	}
	if err := oprot.WriteBinary(p.ContentPreview); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.contentPreview (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:contentPreview: ", p), err)
	}
	return err
}

func (p *Message) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contentMetadata", thrift.MAP, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:contentMetadata: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ContentMetadata)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.ContentMetadata {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:contentMetadata: ", p), err)
	}
	return err
}

func (p *Message) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.BYTE, 19); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:sessionId: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (19) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 19:sessionId: ", p), err)
	}
	return err
}

func (p *Message) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chunks", thrift.LIST, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:chunks: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Chunks)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Chunks {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:chunks: ", p), err)
	}
	return err
}

func (p *Message) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("relatedMessageId", thrift.STRING, 21); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:relatedMessageId: ", p), err)
	}
	if err := oprot.WriteString(string(p.RelatedMessageId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.relatedMessageId (21) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 21:relatedMessageId: ", p), err)
	}
	return err
}

func (p *Message) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageRelationType", thrift.I32, 22); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:messageRelationType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MessageRelationType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.messageRelationType (22) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 22:messageRelationType: ", p), err)
	}
	return err
}

func (p *Message) writeField23(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("readCount", thrift.I32, 23); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:readCount: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReadCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.readCount (23) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 23:readCount: ", p), err)
	}
	return err
}

func (p *Message) writeField24(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("relatedMessageServiceCode", thrift.I32, 24); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:relatedMessageServiceCode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.RelatedMessageServiceCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.relatedMessageServiceCode (24) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 24:relatedMessageServiceCode: ", p), err)
	}
	return err
}

func (p *Message) writeField25(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appExtensionType", thrift.I32, 25); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:appExtensionType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.AppExtensionType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appExtensionType (25) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 25:appExtensionType: ", p), err)
	}
	return err
}

func (p *Message) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Message(%+v)", *p)
}

// Attributes:
//  - Host
//  - Port
//  - Zone
type CallHost struct {
	Host string `thrift:"host,1" db:"host" json:"host"`
	Port int32  `thrift:"port,2" db:"port" json:"port"`
	Zone string `thrift:"zone,3" db:"zone" json:"zone"`
}

func NewCallHost() *CallHost {
	return &CallHost{}
}

func (p *CallHost) GetHost() string {
	return p.Host
}

func (p *CallHost) GetPort() int32 {
	return p.Port
}

func (p *CallHost) GetZone() string {
	return p.Zone
}
func (p *CallHost) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CallHost) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Host = v
	}
	return nil
}

func (p *CallHost) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Port = v
	}
	return nil
}

func (p *CallHost) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Zone = v
	}
	return nil
}

func (p *CallHost) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CallHost"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CallHost) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("host", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:host: ", p), err)
	}
	if err := oprot.WriteString(string(p.Host)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.host (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:host: ", p), err)
	}
	return err
}

func (p *CallHost) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("port", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:port: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Port)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.port (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:port: ", p), err)
	}
	return err
}

func (p *CallHost) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("zone", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:zone: ", p), err)
	}
	if err := oprot.WriteString(string(p.Zone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.zone (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:zone: ", p), err)
	}
	return err
}

func (p *CallHost) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CallHost(%+v)", *p)
}

// Attributes:
//  - Token
//  - Cscf
//  - Mix
//  - HostMid
//  - Capabilities
//  - Proto
//  - VoipAddress
//  - VoipUdpPort
//  - VoipTcpPort
//  - FromZone
//  - CommParam
//  - PolarisAddress
//  - PolarisUdpPort
//  - PolarisZone
//  - OrionAddress
type GroupCallRoute struct {
	Token          string    `thrift:"token,1" db:"token" json:"token"`
	Cscf           *CallHost `thrift:"cscf,2" db:"cscf" json:"cscf"`
	Mix            *CallHost `thrift:"mix,3" db:"mix" json:"mix"`
	HostMid        string    `thrift:"hostMid,4" db:"hostMid" json:"hostMid"`
	Capabilities   []string  `thrift:"capabilities,5" db:"capabilities" json:"capabilities"`
	Proto          ProtoCall `thrift:"proto,6" db:"proto" json:"proto"`
	VoipAddress    string    `thrift:"voipAddress,7" db:"voipAddress" json:"voipAddress"`
	VoipUdpPort    int32     `thrift:"voipUdpPort,8" db:"voipUdpPort" json:"voipUdpPort"`
	VoipTcpPort    int32     `thrift:"voipTcpPort,9" db:"voipTcpPort" json:"voipTcpPort"`
	FromZone       string    `thrift:"fromZone,10" db:"fromZone" json:"fromZone"`
	CommParam      string    `thrift:"commParam,11" db:"commParam" json:"commParam"`
	PolarisAddress string    `thrift:"polarisAddress,12" db:"polarisAddress" json:"polarisAddress"`
	PolarisUdpPort int32     `thrift:"polarisUdpPort,13" db:"polarisUdpPort" json:"polarisUdpPort"`
	PolarisZone    string    `thrift:"polarisZone,14" db:"polarisZone" json:"polarisZone"`
	OrionAddress   string    `thrift:"orionAddress,15" db:"orionAddress" json:"orionAddress"`
}

func NewGroupCallRoute() *GroupCallRoute {
	return &GroupCallRoute{}
}

func (p *GroupCallRoute) GetToken() string {
	return p.Token
}

var GroupCallRoute_Cscf_DEFAULT *CallHost

func (p *GroupCallRoute) GetCscf() *CallHost {
	if !p.IsSetCscf() {
		return GroupCallRoute_Cscf_DEFAULT
	}
	return p.Cscf
}

var GroupCallRoute_Mix_DEFAULT *CallHost

func (p *GroupCallRoute) GetMix() *CallHost {
	if !p.IsSetMix() {
		return GroupCallRoute_Mix_DEFAULT
	}
	return p.Mix
}

func (p *GroupCallRoute) GetHostMid() string {
	return p.HostMid
}

func (p *GroupCallRoute) GetCapabilities() []string {
	return p.Capabilities
}

func (p *GroupCallRoute) GetProto() ProtoCall {
	return p.Proto
}

func (p *GroupCallRoute) GetVoipAddress() string {
	return p.VoipAddress
}

func (p *GroupCallRoute) GetVoipUdpPort() int32 {
	return p.VoipUdpPort
}

func (p *GroupCallRoute) GetVoipTcpPort() int32 {
	return p.VoipTcpPort
}

func (p *GroupCallRoute) GetFromZone() string {
	return p.FromZone
}

func (p *GroupCallRoute) GetCommParam() string {
	return p.CommParam
}

func (p *GroupCallRoute) GetPolarisAddress() string {
	return p.PolarisAddress
}

func (p *GroupCallRoute) GetPolarisUdpPort() int32 {
	return p.PolarisUdpPort
}

func (p *GroupCallRoute) GetPolarisZone() string {
	return p.PolarisZone
}

func (p *GroupCallRoute) GetOrionAddress() string {
	return p.OrionAddress
}
func (p *GroupCallRoute) IsSetCscf() bool {
	return p.Cscf != nil
}

func (p *GroupCallRoute) IsSetMix() bool {
	return p.Mix != nil
}

func (p *GroupCallRoute) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField13(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField14(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField15(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GroupCallRoute) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *GroupCallRoute) ReadField2(iprot thrift.TProtocol) error {
	p.Cscf = &CallHost{}
	if err := p.Cscf.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Cscf), err)
	}
	return nil
}

func (p *GroupCallRoute) ReadField3(iprot thrift.TProtocol) error {
	p.Mix = &CallHost{}
	if err := p.Mix.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Mix), err)
	}
	return nil
}

func (p *GroupCallRoute) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.HostMid = v
	}
	return nil
}

func (p *GroupCallRoute) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Capabilities = tSlice
	for i := 0; i < size; i++ {
		var _elem41 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem41 = v
		}
		p.Capabilities = append(p.Capabilities, _elem41)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GroupCallRoute) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := ProtoCall(v)
		p.Proto = temp
	}
	return nil
}

func (p *GroupCallRoute) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.VoipAddress = v
	}
	return nil
}

func (p *GroupCallRoute) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.VoipUdpPort = v
	}
	return nil
}

func (p *GroupCallRoute) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.VoipTcpPort = v
	}
	return nil
}

func (p *GroupCallRoute) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.FromZone = v
	}
	return nil
}

func (p *GroupCallRoute) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.CommParam = v
	}
	return nil
}

func (p *GroupCallRoute) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.PolarisAddress = v
	}
	return nil
}

func (p *GroupCallRoute) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.PolarisUdpPort = v
	}
	return nil
}

func (p *GroupCallRoute) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.PolarisZone = v
	}
	return nil
}

func (p *GroupCallRoute) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.OrionAddress = v
	}
	return nil
}

func (p *GroupCallRoute) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupCallRoute"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
		if err := p.writeField15(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GroupCallRoute) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err)
	}
	if err := oprot.WriteString(string(p.Token)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err)
	}
	return err
}

func (p *GroupCallRoute) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cscf", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cscf: ", p), err)
	}
	if err := p.Cscf.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Cscf), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cscf: ", p), err)
	}
	return err
}

func (p *GroupCallRoute) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mix", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mix: ", p), err)
	}
	if err := p.Mix.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Mix), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mix: ", p), err)
	}
	return err
}

func (p *GroupCallRoute) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hostMid", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:hostMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.HostMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hostMid (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:hostMid: ", p), err)
	}
	return err
}

func (p *GroupCallRoute) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("capabilities", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:capabilities: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Capabilities)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Capabilities {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:capabilities: ", p), err)
	}
	return err
}

func (p *GroupCallRoute) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("proto", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:proto: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Proto)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.proto (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:proto: ", p), err)
	}
	return err
}

func (p *GroupCallRoute) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("voipAddress", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:voipAddress: ", p), err)
	}
	if err := oprot.WriteString(string(p.VoipAddress)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.voipAddress (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:voipAddress: ", p), err)
	}
	return err
}

func (p *GroupCallRoute) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("voipUdpPort", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:voipUdpPort: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.VoipUdpPort)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.voipUdpPort (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:voipUdpPort: ", p), err)
	}
	return err
}

func (p *GroupCallRoute) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("voipTcpPort", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:voipTcpPort: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.VoipTcpPort)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.voipTcpPort (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:voipTcpPort: ", p), err)
	}
	return err
}

func (p *GroupCallRoute) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fromZone", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:fromZone: ", p), err)
	}
	if err := oprot.WriteString(string(p.FromZone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromZone (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:fromZone: ", p), err)
	}
	return err
}

func (p *GroupCallRoute) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("commParam", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:commParam: ", p), err)
	}
	if err := oprot.WriteString(string(p.CommParam)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.commParam (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:commParam: ", p), err)
	}
	return err
}

func (p *GroupCallRoute) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("polarisAddress", thrift.STRING, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:polarisAddress: ", p), err)
	}
	if err := oprot.WriteString(string(p.PolarisAddress)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.polarisAddress (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:polarisAddress: ", p), err)
	}
	return err
}

func (p *GroupCallRoute) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("polarisUdpPort", thrift.I32, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:polarisUdpPort: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PolarisUdpPort)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.polarisUdpPort (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:polarisUdpPort: ", p), err)
	}
	return err
}

func (p *GroupCallRoute) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("polarisZone", thrift.STRING, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:polarisZone: ", p), err)
	}
	if err := oprot.WriteString(string(p.PolarisZone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.polarisZone (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:polarisZone: ", p), err)
	}
	return err
}

func (p *GroupCallRoute) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orionAddress", thrift.STRING, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:orionAddress: ", p), err)
	}
	if err := oprot.WriteString(string(p.OrionAddress)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.orionAddress (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:orionAddress: ", p), err)
	}
	return err
}

func (p *GroupCallRoute) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupCallRoute(%+v)", *p)
}

type AcceptChatInvitationByTicketResponse struct {
}

func NewAcceptChatInvitationByTicketResponse() *AcceptChatInvitationByTicketResponse {
	return &AcceptChatInvitationByTicketResponse{}
}

func (p *AcceptChatInvitationByTicketResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AcceptChatInvitationByTicketResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AcceptChatInvitationByTicketResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AcceptChatInvitationByTicketResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AcceptChatInvitationByTicketResponse(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
//  - TicketId
type AcceptChatInvitationByTicketRequest struct {
	ReqSeq   int32  `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	ChatMid  string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
	TicketId string `thrift:"ticketId,3" db:"ticketId" json:"ticketId"`
}

func NewAcceptChatInvitationByTicketRequest() *AcceptChatInvitationByTicketRequest {
	return &AcceptChatInvitationByTicketRequest{}
}

func (p *AcceptChatInvitationByTicketRequest) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *AcceptChatInvitationByTicketRequest) GetChatMid() string {
	return p.ChatMid
}

func (p *AcceptChatInvitationByTicketRequest) GetTicketId() string {
	return p.TicketId
}
func (p *AcceptChatInvitationByTicketRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AcceptChatInvitationByTicketRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *AcceptChatInvitationByTicketRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChatMid = v
	}
	return nil
}

func (p *AcceptChatInvitationByTicketRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TicketId = v
	}
	return nil
}

func (p *AcceptChatInvitationByTicketRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AcceptChatInvitationByTicketRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AcceptChatInvitationByTicketRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *AcceptChatInvitationByTicketRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChatMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err)
	}
	return err
}

func (p *AcceptChatInvitationByTicketRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ticketId", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ticketId: ", p), err)
	}
	if err := oprot.WriteString(string(p.TicketId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ticketId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ticketId: ", p), err)
	}
	return err
}

func (p *AcceptChatInvitationByTicketRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AcceptChatInvitationByTicketRequest(%+v)", *p)
}

// Attributes:
//  - Value
//  - Meta
type ProfileContent struct {
	Value string            `thrift:"value,1" db:"value" json:"value"`
	Meta  map[string]string `thrift:"meta,2" db:"meta" json:"meta"`
}

func NewProfileContent() *ProfileContent {
	return &ProfileContent{}
}

func (p *ProfileContent) GetValue() string {
	return p.Value
}

func (p *ProfileContent) GetMeta() map[string]string {
	return p.Meta
}
func (p *ProfileContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ProfileContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *ProfileContent) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Meta = tMap
	for i := 0; i < size; i++ {
		var _key42 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key42 = v
		}
		var _val43 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val43 = v
		}
		p.Meta[_key42] = _val43
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ProfileContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ProfileContent"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ProfileContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:value: ", p), err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:value: ", p), err)
	}
	return err
}

func (p *ProfileContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("meta", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:meta: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Meta)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Meta {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:meta: ", p), err)
	}
	return err
}

func (p *ProfileContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProfileContent(%+v)", *p)
}

// Attributes:
//  - ProfileAttributes
type UpdateProfileAttributesRequest struct {
	ProfileAttributes map[Attr]*ProfileContent `thrift:"profileAttributes,1" db:"profileAttributes" json:"profileAttributes"`
}

func NewUpdateProfileAttributesRequest() *UpdateProfileAttributesRequest {
	return &UpdateProfileAttributesRequest{}
}

func (p *UpdateProfileAttributesRequest) GetProfileAttributes() map[Attr]*ProfileContent {
	return p.ProfileAttributes
}
func (p *UpdateProfileAttributesRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UpdateProfileAttributesRequest) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[Attr]*ProfileContent, size)
	p.ProfileAttributes = tMap
	for i := 0; i < size; i++ {
		var _key44 Attr
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Attr(v)
			_key44 = temp
		}
		_val45 := &ProfileContent{}
		if err := _val45.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val45), err)
		}
		p.ProfileAttributes[_key44] = _val45
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *UpdateProfileAttributesRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateProfileAttributesRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateProfileAttributesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("profileAttributes", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:profileAttributes: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.ProfileAttributes)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.ProfileAttributes {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:profileAttributes: ", p), err)
	}
	return err
}

func (p *UpdateProfileAttributesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateProfileAttributesRequest(%+v)", *p)
}

type AcceptChatInvitationResponse struct {
}

func NewAcceptChatInvitationResponse() *AcceptChatInvitationResponse {
	return &AcceptChatInvitationResponse{}
}

func (p *AcceptChatInvitationResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AcceptChatInvitationResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AcceptChatInvitationResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AcceptChatInvitationResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AcceptChatInvitationResponse(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
type AcceptChatInvitationRequest struct {
	ReqSeq  int32  `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
}

func NewAcceptChatInvitationRequest() *AcceptChatInvitationRequest {
	return &AcceptChatInvitationRequest{}
}

func (p *AcceptChatInvitationRequest) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *AcceptChatInvitationRequest) GetChatMid() string {
	return p.ChatMid
}
func (p *AcceptChatInvitationRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AcceptChatInvitationRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *AcceptChatInvitationRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChatMid = v
	}
	return nil
}

func (p *AcceptChatInvitationRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AcceptChatInvitationRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AcceptChatInvitationRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *AcceptChatInvitationRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChatMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err)
	}
	return err
}

func (p *AcceptChatInvitationRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AcceptChatInvitationRequest(%+v)", *p)
}

type InviteIntoChatResponse struct {
}

func NewInviteIntoChatResponse() *InviteIntoChatResponse {
	return &InviteIntoChatResponse{}
}

func (p *InviteIntoChatResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InviteIntoChatResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InviteIntoChatResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InviteIntoChatResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InviteIntoChatResponse(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
//  - TargetUserMids
type InviteIntoChatRequest struct {
	ReqSeq         int32    `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	ChatMid        string   `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
	TargetUserMids []string `thrift:"targetUserMids,3" db:"targetUserMids" json:"targetUserMids"`
}

func NewInviteIntoChatRequest() *InviteIntoChatRequest {
	return &InviteIntoChatRequest{}
}

func (p *InviteIntoChatRequest) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *InviteIntoChatRequest) GetChatMid() string {
	return p.ChatMid
}

func (p *InviteIntoChatRequest) GetTargetUserMids() []string {
	return p.TargetUserMids
}
func (p *InviteIntoChatRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InviteIntoChatRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *InviteIntoChatRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChatMid = v
	}
	return nil
}

func (p *InviteIntoChatRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]string, 0, size)
	p.TargetUserMids = tSet
	for i := 0; i < size; i++ {
		var _elem46 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem46 = v
		}
		p.TargetUserMids = append(p.TargetUserMids, _elem46)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *InviteIntoChatRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InviteIntoChatRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InviteIntoChatRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *InviteIntoChatRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChatMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err)
	}
	return err
}

func (p *InviteIntoChatRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("targetUserMids", thrift.SET, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:targetUserMids: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.TargetUserMids)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for i := 0; i < len(p.TargetUserMids); i++ {
		for j := i + 1; j < len(p.TargetUserMids); j++ {
			if reflect.DeepEqual(p.TargetUserMids[i], p.TargetUserMids[j]) {
				return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.TargetUserMids[i]))
			}
		}
	}
	for _, v := range p.TargetUserMids {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:targetUserMids: ", p), err)
	}
	return err
}

func (p *InviteIntoChatRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InviteIntoChatRequest(%+v)", *p)
}

// Attributes:
//  - FollowMid
type FollowRequest struct {
	FollowMid *FollowMid `thrift:"followMid,1" db:"followMid" json:"followMid"`
}

func NewFollowRequest() *FollowRequest {
	return &FollowRequest{}
}

var FollowRequest_FollowMid_DEFAULT *FollowMid

func (p *FollowRequest) GetFollowMid() *FollowMid {
	if !p.IsSetFollowMid() {
		return FollowRequest_FollowMid_DEFAULT
	}
	return p.FollowMid
}
func (p *FollowRequest) IsSetFollowMid() bool {
	return p.FollowMid != nil
}

func (p *FollowRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FollowRequest) ReadField1(iprot thrift.TProtocol) error {
	p.FollowMid = &FollowMid{}
	if err := p.FollowMid.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FollowMid), err)
	}
	return nil
}

func (p *FollowRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FollowRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FollowRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("followMid", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:followMid: ", p), err)
	}
	if err := p.FollowMid.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FollowMid), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:followMid: ", p), err)
	}
	return err
}

func (p *FollowRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowRequest(%+v)", *p)
}

// Attributes:
//  - Revision
//  - CreatedTime
//  - Type
//  - ReqSeq
//  - Checksum
//  - Status
//  - Param1
//  - Param2
//  - Param3
//  - Message
type Operation struct {
	Revision    int64  `thrift:"revision,1" db:"revision" json:"revision"`
	CreatedTime int64  `thrift:"createdTime,2" db:"createdTime" json:"createdTime"`
	Type        OpType `thrift:"type,3" db:"type" json:"type"`
	ReqSeq      int32  `thrift:"reqSeq,4" db:"reqSeq" json:"reqSeq"`
	Checksum    string `thrift:"checksum,5" db:"checksum" json:"checksum"`
	// unused field # 6
	Status OpStatus `thrift:"status,7" db:"status" json:"status"`
	// unused fields # 8 to 9
	Param1 string `thrift:"param1,10" db:"param1" json:"param1"`
	Param2 string `thrift:"param2,11" db:"param2" json:"param2"`
	Param3 string `thrift:"param3,12" db:"param3" json:"param3"`
	// unused fields # 13 to 19
	Message *Message `thrift:"message,20" db:"message" json:"message"`
}

func NewOperation() *Operation {
	return &Operation{}
}

func (p *Operation) GetRevision() int64 {
	return p.Revision
}

func (p *Operation) GetCreatedTime() int64 {
	return p.CreatedTime
}

func (p *Operation) GetType() OpType {
	return p.Type
}

func (p *Operation) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *Operation) GetChecksum() string {
	return p.Checksum
}

func (p *Operation) GetStatus() OpStatus {
	return p.Status
}

func (p *Operation) GetParam1() string {
	return p.Param1
}

func (p *Operation) GetParam2() string {
	return p.Param2
}

func (p *Operation) GetParam3() string {
	return p.Param3
}

var Operation_Message_DEFAULT *Message

func (p *Operation) GetMessage() *Message {
	if !p.IsSetMessage() {
		return Operation_Message_DEFAULT
	}
	return p.Message
}
func (p *Operation) IsSetMessage() bool {
	return p.Message != nil
}

func (p *Operation) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 20:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField20(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Operation) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Revision = v
	}
	return nil
}

func (p *Operation) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.CreatedTime = v
	}
	return nil
}

func (p *Operation) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := OpType(v)
		p.Type = temp
	}
	return nil
}

func (p *Operation) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *Operation) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Checksum = v
	}
	return nil
}

func (p *Operation) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := OpStatus(v)
		p.Status = temp
	}
	return nil
}

func (p *Operation) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Param1 = v
	}
	return nil
}

func (p *Operation) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Param2 = v
	}
	return nil
}

func (p *Operation) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.Param3 = v
	}
	return nil
}

func (p *Operation) ReadField20(iprot thrift.TProtocol) error {
	p.Message = &Message{}
	if err := p.Message.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Message), err)
	}
	return nil
}

func (p *Operation) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Operation"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField20(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Operation) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("revision", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:revision: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Revision)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.revision (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:revision: ", p), err)
	}
	return err
}

func (p *Operation) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.createdTime (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTime: ", p), err)
	}
	return err
}

func (p *Operation) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err)
	}
	return err
}

func (p *Operation) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:reqSeq: ", p), err)
	}
	return err
}

func (p *Operation) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("checksum", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:checksum: ", p), err)
	}
	if err := oprot.WriteString(string(p.Checksum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.checksum (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:checksum: ", p), err)
	}
	return err
}

func (p *Operation) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:status: ", p), err)
	}
	return err
}

func (p *Operation) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("param1", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:param1: ", p), err)
	}
	if err := oprot.WriteString(string(p.Param1)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.param1 (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:param1: ", p), err)
	}
	return err
}

func (p *Operation) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("param2", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:param2: ", p), err)
	}
	if err := oprot.WriteString(string(p.Param2)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.param2 (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:param2: ", p), err)
	}
	return err
}

func (p *Operation) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("param3", thrift.STRING, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:param3: ", p), err)
	}
	if err := oprot.WriteString(string(p.Param3)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.param3 (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:param3: ", p), err)
	}
	return err
}

func (p *Operation) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRUCT, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:message: ", p), err)
	}
	if err := p.Message.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Message), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:message: ", p), err)
	}
	return err
}

func (p *Operation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Operation(%+v)", *p)
}

// Attributes:
//  - Online
//  - ChatMid
//  - HostMid
//  - MemberMids
//  - Started
//  - MediaType
//  - Protocol
type GroupCall struct {
	Online     bool      `thrift:"online,1" db:"online" json:"online"`
	ChatMid    string    `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
	HostMid    string    `thrift:"hostMid,3" db:"hostMid" json:"hostMid"`
	MemberMids []string  `thrift:"memberMids,4" db:"memberMids" json:"memberMids"`
	Started    int64     `thrift:"started,5" db:"started" json:"started"`
	MediaType  MediaType `thrift:"mediaType,6" db:"mediaType" json:"mediaType"`
	Protocol   ProtoCall `thrift:"protocol,7" db:"protocol" json:"protocol"`
}

func NewGroupCall() *GroupCall {
	return &GroupCall{}
}

func (p *GroupCall) GetOnline() bool {
	return p.Online
}

func (p *GroupCall) GetChatMid() string {
	return p.ChatMid
}

func (p *GroupCall) GetHostMid() string {
	return p.HostMid
}

func (p *GroupCall) GetMemberMids() []string {
	return p.MemberMids
}

func (p *GroupCall) GetStarted() int64 {
	return p.Started
}

func (p *GroupCall) GetMediaType() MediaType {
	return p.MediaType
}

func (p *GroupCall) GetProtocol() ProtoCall {
	return p.Protocol
}
func (p *GroupCall) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GroupCall) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Online = v
	}
	return nil
}

func (p *GroupCall) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChatMid = v
	}
	return nil
}

func (p *GroupCall) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.HostMid = v
	}
	return nil
}

func (p *GroupCall) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.MemberMids = tSlice
	for i := 0; i < size; i++ {
		var _elem47 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem47 = v
		}
		p.MemberMids = append(p.MemberMids, _elem47)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GroupCall) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Started = v
	}
	return nil
}

func (p *GroupCall) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := MediaType(v)
		p.MediaType = temp
	}
	return nil
}

func (p *GroupCall) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := ProtoCall(v)
		p.Protocol = temp
	}
	return nil
}

func (p *GroupCall) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupCall"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GroupCall) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("online", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:online: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Online)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.online (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:online: ", p), err)
	}
	return err
}

func (p *GroupCall) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChatMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err)
	}
	return err
}

func (p *GroupCall) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hostMid", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hostMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.HostMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hostMid (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hostMid: ", p), err)
	}
	return err
}

func (p *GroupCall) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberMids", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:memberMids: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.MemberMids)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.MemberMids {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:memberMids: ", p), err)
	}
	return err
}

func (p *GroupCall) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("started", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:started: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Started)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.started (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:started: ", p), err)
	}
	return err
}

func (p *GroupCall) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mediaType", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:mediaType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MediaType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mediaType (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:mediaType: ", p), err)
	}
	return err
}

func (p *GroupCall) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:protocol: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Protocol)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:protocol: ", p), err)
	}
	return err
}

func (p *GroupCall) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupCall(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
//  - TargetUserMids
type CancelChatInvitationRequest struct {
	ReqSeq         int32    `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	ChatMid        string   `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
	TargetUserMids []string `thrift:"targetUserMids,3" db:"targetUserMids" json:"targetUserMids"`
}

func NewCancelChatInvitationRequest() *CancelChatInvitationRequest {
	return &CancelChatInvitationRequest{}
}

func (p *CancelChatInvitationRequest) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *CancelChatInvitationRequest) GetChatMid() string {
	return p.ChatMid
}

func (p *CancelChatInvitationRequest) GetTargetUserMids() []string {
	return p.TargetUserMids
}
func (p *CancelChatInvitationRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CancelChatInvitationRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *CancelChatInvitationRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChatMid = v
	}
	return nil
}

func (p *CancelChatInvitationRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]string, 0, size)
	p.TargetUserMids = tSet
	for i := 0; i < size; i++ {
		var _elem48 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem48 = v
		}
		p.TargetUserMids = append(p.TargetUserMids, _elem48)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *CancelChatInvitationRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CancelChatInvitationRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CancelChatInvitationRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *CancelChatInvitationRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChatMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err)
	}
	return err
}

func (p *CancelChatInvitationRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("targetUserMids", thrift.SET, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:targetUserMids: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.TargetUserMids)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for i := 0; i < len(p.TargetUserMids); i++ {
		for j := i + 1; j < len(p.TargetUserMids); j++ {
			if reflect.DeepEqual(p.TargetUserMids[i], p.TargetUserMids[j]) {
				return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.TargetUserMids[i]))
			}
		}
	}
	for _, v := range p.TargetUserMids {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:targetUserMids: ", p), err)
	}
	return err
}

func (p *CancelChatInvitationRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CancelChatInvitationRequest(%+v)", *p)
}

// Attributes:
//  - NotificationEnable
//  - NotificationMuteExpiration
//  - NotificationNewMessage
//  - NotificationGroupInvitation
//  - NotificationShowMessage
//  - NotificationIncomingCall
//  - NotificationSoundMessage
//  - NotificationSoundGroup
//  - NotificationDisabledWithSub
//  - NotificationPayment
//  - PrivacySyncContacts
//  - PrivacySearchByPhoneNumber
//  - PrivacySearchByUserid
//  - PrivacySearchByEmail
//  - PrivacyAllowSecondaryDeviceLogi
//  - PrivacyProfileImagePostToMyhome
//  - PrivacyReceiveMessagesFromNotFriend
//  - PrivacyAgreeUseLineCoinToPaidCall
//  - PrivacyAgreeUsePaidCall
//  - PrivacyAllowFriendRequest
//  - ContactMyTicket
//  - IdentityProvider
//  - IdentityIdentifier
//  - SnsAccounts
//  - PhoneRegistration
//  - EmailConfirmationStatus
//  - AccountMigrationPincodeType
//  - EnforcedInputAccountMigrationPincode
//  - SecurityCenterSettingsType
//  - AllowUnregistrationSecondaryDevice
//  - PreferenceLocale
//  - CustomModes
//  - E2eeEnable
//  - HitokotoBackupRequested
//  - PrivacyProfileMusicPostToMyhome
//  - PrivacyAllowNearby
//  - AgreementNearbyTime
//  - AgreementSquareTime
//  - NotificationMention
//  - BotUseAgreementAcceptedAt
//  - AgreementShakeFunction
//  - AgreementMobileContactName
//  - NotificationThumbnail
//  - AgreementSoundToText
//  - PrivacyPolicyVersion
//  - AgreementAdByWebAccess
//  - AgreementPhoneNumberMatching
//  - AgreementCommunicationInfo
//  - PrivacySharePersonalInfoToFriends
//  - AgreementThingsWirelessCommunication
//  - AgreementGdpr
//  - PrivacyStatusMessageHistory
//  - AgreementProvideLocation
//  - AgreementBeacon
//  - PrivacyAllowProfileHistory
//  - AgreementContentsSuggest
//  - AgreementContentsSuggestDataCollection
//  - PrivacyAgeResult_
//  - PrivacyAgeResultReceived
//  - AgreementOcrImageCollection
//  - PrivacyAllowFollow
//  - PrivacyShowFollowList
//  - NotificationBadgeTalkOnly
type Settings struct {
	// unused fields # 1 to 9
	NotificationEnable                  bool   `thrift:"notificationEnable,10" db:"notificationEnable" json:"notificationEnable"`
	NotificationMuteExpiration          int64  `thrift:"notificationMuteExpiration,11" db:"notificationMuteExpiration" json:"notificationMuteExpiration"`
	NotificationNewMessage              bool   `thrift:"notificationNewMessage,12" db:"notificationNewMessage" json:"notificationNewMessage"`
	NotificationGroupInvitation         bool   `thrift:"notificationGroupInvitation,13" db:"notificationGroupInvitation" json:"notificationGroupInvitation"`
	NotificationShowMessage             bool   `thrift:"notificationShowMessage,14" db:"notificationShowMessage" json:"notificationShowMessage"`
	NotificationIncomingCall            bool   `thrift:"notificationIncomingCall,15" db:"notificationIncomingCall" json:"notificationIncomingCall"`
	NotificationSoundMessage            string `thrift:"notificationSoundMessage,16" db:"notificationSoundMessage" json:"notificationSoundMessage"`
	NotificationSoundGroup              string `thrift:"notificationSoundGroup,17" db:"notificationSoundGroup" json:"notificationSoundGroup"`
	NotificationDisabledWithSub         bool   `thrift:"notificationDisabledWithSub,18" db:"notificationDisabledWithSub" json:"notificationDisabledWithSub"`
	NotificationPayment                 bool   `thrift:"notificationPayment,19" db:"notificationPayment" json:"notificationPayment"`
	PrivacySyncContacts                 bool   `thrift:"privacySyncContacts,20" db:"privacySyncContacts" json:"privacySyncContacts"`
	PrivacySearchByPhoneNumber          bool   `thrift:"privacySearchByPhoneNumber,21" db:"privacySearchByPhoneNumber" json:"privacySearchByPhoneNumber"`
	PrivacySearchByUserid               bool   `thrift:"privacySearchByUserid,22" db:"privacySearchByUserid" json:"privacySearchByUserid"`
	PrivacySearchByEmail                bool   `thrift:"privacySearchByEmail,23" db:"privacySearchByEmail" json:"privacySearchByEmail"`
	PrivacyAllowSecondaryDeviceLogi     bool   `thrift:"privacyAllowSecondaryDeviceLogi,24" db:"privacyAllowSecondaryDeviceLogi" json:"privacyAllowSecondaryDeviceLogi"`
	PrivacyProfileImagePostToMyhome     bool   `thrift:"privacyProfileImagePostToMyhome,25" db:"privacyProfileImagePostToMyhome" json:"privacyProfileImagePostToMyhome"`
	PrivacyReceiveMessagesFromNotFriend bool   `thrift:"privacyReceiveMessagesFromNotFriend,26" db:"privacyReceiveMessagesFromNotFriend" json:"privacyReceiveMessagesFromNotFriend"`
	PrivacyAgreeUseLineCoinToPaidCall   bool   `thrift:"privacyAgreeUseLineCoinToPaidCall,27" db:"privacyAgreeUseLineCoinToPaidCall" json:"privacyAgreeUseLineCoinToPaidCall"`
	PrivacyAgreeUsePaidCall             bool   `thrift:"privacyAgreeUsePaidCall,28" db:"privacyAgreeUsePaidCall" json:"privacyAgreeUsePaidCall"`
	PrivacyAllowFriendRequest           bool   `thrift:"privacyAllowFriendRequest,29" db:"privacyAllowFriendRequest" json:"privacyAllowFriendRequest"`
	ContactMyTicket                     string `thrift:"contactMyTicket,30" db:"contactMyTicket" json:"contactMyTicket"`
	// unused fields # 31 to 39
	IdentityProvider                     IdentityProvider            `thrift:"identityProvider,40" db:"identityProvider" json:"identityProvider"`
	IdentityIdentifier                   string                      `thrift:"identityIdentifier,41" db:"identityIdentifier" json:"identityIdentifier"`
	SnsAccounts                          map[SnsType]string          `thrift:"snsAccounts,42" db:"snsAccounts" json:"snsAccounts"`
	PhoneRegistration                    bool                        `thrift:"phoneRegistration,43" db:"phoneRegistration" json:"phoneRegistration"`
	EmailConfirmationStatus              EmailConfirmationStatus     `thrift:"emailConfirmationStatus,44" db:"emailConfirmationStatus" json:"emailConfirmationStatus"`
	AccountMigrationPincodeType          AccountMigrationPincodeType `thrift:"accountMigrationPincodeType,45" db:"accountMigrationPincodeType" json:"accountMigrationPincodeType"`
	EnforcedInputAccountMigrationPincode bool                        `thrift:"enforcedInputAccountMigrationPincode,46" db:"enforcedInputAccountMigrationPincode" json:"enforcedInputAccountMigrationPincode"`
	SecurityCenterSettingsType           SecurityCenterSettingsType  `thrift:"securityCenterSettingsType,47" db:"securityCenterSettingsType" json:"securityCenterSettingsType"`
	AllowUnregistrationSecondaryDevice   bool                        `thrift:"allowUnregistrationSecondaryDevice,48" db:"allowUnregistrationSecondaryDevice" json:"allowUnregistrationSecondaryDevice"`
	// unused field # 49
	PreferenceLocale string `thrift:"preferenceLocale,50" db:"preferenceLocale" json:"preferenceLocale"`
	// unused fields # 51 to 59
	CustomModes                     map[CustomMode]string `thrift:"customModes,60" db:"customModes" json:"customModes"`
	E2eeEnable                      bool                  `thrift:"e2eeEnable,61" db:"e2eeEnable" json:"e2eeEnable"`
	HitokotoBackupRequested         bool                  `thrift:"hitokotoBackupRequested,62" db:"hitokotoBackupRequested" json:"hitokotoBackupRequested"`
	PrivacyProfileMusicPostToMyhome bool                  `thrift:"privacyProfileMusicPostToMyhome,63" db:"privacyProfileMusicPostToMyhome" json:"privacyProfileMusicPostToMyhome"`
	// unused field # 64
	PrivacyAllowNearby                   bool   `thrift:"privacyAllowNearby,65" db:"privacyAllowNearby" json:"privacyAllowNearby"`
	AgreementNearbyTime                  int64  `thrift:"agreementNearbyTime,66" db:"agreementNearbyTime" json:"agreementNearbyTime"`
	AgreementSquareTime                  int64  `thrift:"agreementSquareTime,67" db:"agreementSquareTime" json:"agreementSquareTime"`
	NotificationMention                  bool   `thrift:"notificationMention,68" db:"notificationMention" json:"notificationMention"`
	BotUseAgreementAcceptedAt            int64  `thrift:"botUseAgreementAcceptedAt,69" db:"botUseAgreementAcceptedAt" json:"botUseAgreementAcceptedAt"`
	AgreementShakeFunction               int64  `thrift:"agreementShakeFunction,70" db:"agreementShakeFunction" json:"agreementShakeFunction"`
	AgreementMobileContactName           int64  `thrift:"agreementMobileContactName,71" db:"agreementMobileContactName" json:"agreementMobileContactName"`
	NotificationThumbnail                bool   `thrift:"notificationThumbnail,72" db:"notificationThumbnail" json:"notificationThumbnail"`
	AgreementSoundToText                 int64  `thrift:"agreementSoundToText,73" db:"agreementSoundToText" json:"agreementSoundToText"`
	PrivacyPolicyVersion                 string `thrift:"privacyPolicyVersion,74" db:"privacyPolicyVersion" json:"privacyPolicyVersion"`
	AgreementAdByWebAccess               int64  `thrift:"agreementAdByWebAccess,75" db:"agreementAdByWebAccess" json:"agreementAdByWebAccess"`
	AgreementPhoneNumberMatching         int64  `thrift:"agreementPhoneNumberMatching,76" db:"agreementPhoneNumberMatching" json:"agreementPhoneNumberMatching"`
	AgreementCommunicationInfo           int64  `thrift:"agreementCommunicationInfo,77" db:"agreementCommunicationInfo" json:"agreementCommunicationInfo"`
	PrivacySharePersonalInfoToFriends    bool   `thrift:"privacySharePersonalInfoToFriends,78" db:"privacySharePersonalInfoToFriends" json:"privacySharePersonalInfoToFriends"`
	AgreementThingsWirelessCommunication int64  `thrift:"agreementThingsWirelessCommunication,79" db:"agreementThingsWirelessCommunication" json:"agreementThingsWirelessCommunication"`
	AgreementGdpr                        int64  `thrift:"agreementGdpr,80" db:"agreementGdpr" json:"agreementGdpr"`
	PrivacyStatusMessageHistory          bool   `thrift:"privacyStatusMessageHistory,81" db:"privacyStatusMessageHistory" json:"privacyStatusMessageHistory"`
	AgreementProvideLocation             int64  `thrift:"agreementProvideLocation,82" db:"agreementProvideLocation" json:"agreementProvideLocation"`
	AgreementBeacon                      int64  `thrift:"agreementBeacon,83" db:"agreementBeacon" json:"agreementBeacon"`
	// unused field # 84
	PrivacyAllowProfileHistory             bool  `thrift:"privacyAllowProfileHistory,85" db:"privacyAllowProfileHistory" json:"privacyAllowProfileHistory"`
	AgreementContentsSuggest               int64 `thrift:"agreementContentsSuggest,86" db:"agreementContentsSuggest" json:"agreementContentsSuggest"`
	AgreementContentsSuggestDataCollection int64 `thrift:"agreementContentsSuggestDataCollection,87" db:"agreementContentsSuggestDataCollection" json:"agreementContentsSuggestDataCollection"`
	PrivacyAgeResult_                      bool  `thrift:"privacyAgeResult,88" db:"privacyAgeResult" json:"privacyAgeResult"`
	PrivacyAgeResultReceived               bool  `thrift:"privacyAgeResultReceived,89" db:"privacyAgeResultReceived" json:"privacyAgeResultReceived"`
	AgreementOcrImageCollection            int64 `thrift:"agreementOcrImageCollection,90" db:"agreementOcrImageCollection" json:"agreementOcrImageCollection"`
	PrivacyAllowFollow                     bool  `thrift:"privacyAllowFollow,91" db:"privacyAllowFollow" json:"privacyAllowFollow"`
	PrivacyShowFollowList                  bool  `thrift:"privacyShowFollowList,92" db:"privacyShowFollowList" json:"privacyShowFollowList"`
	NotificationBadgeTalkOnly              bool  `thrift:"notificationBadgeTalkOnly,93" db:"notificationBadgeTalkOnly" json:"notificationBadgeTalkOnly"`
}

func NewSettings() *Settings {
	return &Settings{}
}

func (p *Settings) GetNotificationEnable() bool {
	return p.NotificationEnable
}

func (p *Settings) GetNotificationMuteExpiration() int64 {
	return p.NotificationMuteExpiration
}

func (p *Settings) GetNotificationNewMessage() bool {
	return p.NotificationNewMessage
}

func (p *Settings) GetNotificationGroupInvitation() bool {
	return p.NotificationGroupInvitation
}

func (p *Settings) GetNotificationShowMessage() bool {
	return p.NotificationShowMessage
}

func (p *Settings) GetNotificationIncomingCall() bool {
	return p.NotificationIncomingCall
}

func (p *Settings) GetNotificationSoundMessage() string {
	return p.NotificationSoundMessage
}

func (p *Settings) GetNotificationSoundGroup() string {
	return p.NotificationSoundGroup
}

func (p *Settings) GetNotificationDisabledWithSub() bool {
	return p.NotificationDisabledWithSub
}

func (p *Settings) GetNotificationPayment() bool {
	return p.NotificationPayment
}

func (p *Settings) GetPrivacySyncContacts() bool {
	return p.PrivacySyncContacts
}

func (p *Settings) GetPrivacySearchByPhoneNumber() bool {
	return p.PrivacySearchByPhoneNumber
}

func (p *Settings) GetPrivacySearchByUserid() bool {
	return p.PrivacySearchByUserid
}

func (p *Settings) GetPrivacySearchByEmail() bool {
	return p.PrivacySearchByEmail
}

func (p *Settings) GetPrivacyAllowSecondaryDeviceLogi() bool {
	return p.PrivacyAllowSecondaryDeviceLogi
}

func (p *Settings) GetPrivacyProfileImagePostToMyhome() bool {
	return p.PrivacyProfileImagePostToMyhome
}

func (p *Settings) GetPrivacyReceiveMessagesFromNotFriend() bool {
	return p.PrivacyReceiveMessagesFromNotFriend
}

func (p *Settings) GetPrivacyAgreeUseLineCoinToPaidCall() bool {
	return p.PrivacyAgreeUseLineCoinToPaidCall
}

func (p *Settings) GetPrivacyAgreeUsePaidCall() bool {
	return p.PrivacyAgreeUsePaidCall
}

func (p *Settings) GetPrivacyAllowFriendRequest() bool {
	return p.PrivacyAllowFriendRequest
}

func (p *Settings) GetContactMyTicket() string {
	return p.ContactMyTicket
}

func (p *Settings) GetIdentityProvider() IdentityProvider {
	return p.IdentityProvider
}

func (p *Settings) GetIdentityIdentifier() string {
	return p.IdentityIdentifier
}

func (p *Settings) GetSnsAccounts() map[SnsType]string {
	return p.SnsAccounts
}

func (p *Settings) GetPhoneRegistration() bool {
	return p.PhoneRegistration
}

func (p *Settings) GetEmailConfirmationStatus() EmailConfirmationStatus {
	return p.EmailConfirmationStatus
}

func (p *Settings) GetAccountMigrationPincodeType() AccountMigrationPincodeType {
	return p.AccountMigrationPincodeType
}

func (p *Settings) GetEnforcedInputAccountMigrationPincode() bool {
	return p.EnforcedInputAccountMigrationPincode
}

func (p *Settings) GetSecurityCenterSettingsType() SecurityCenterSettingsType {
	return p.SecurityCenterSettingsType
}

func (p *Settings) GetAllowUnregistrationSecondaryDevice() bool {
	return p.AllowUnregistrationSecondaryDevice
}

func (p *Settings) GetPreferenceLocale() string {
	return p.PreferenceLocale
}

func (p *Settings) GetCustomModes() map[CustomMode]string {
	return p.CustomModes
}

func (p *Settings) GetE2eeEnable() bool {
	return p.E2eeEnable
}

func (p *Settings) GetHitokotoBackupRequested() bool {
	return p.HitokotoBackupRequested
}

func (p *Settings) GetPrivacyProfileMusicPostToMyhome() bool {
	return p.PrivacyProfileMusicPostToMyhome
}

func (p *Settings) GetPrivacyAllowNearby() bool {
	return p.PrivacyAllowNearby
}

func (p *Settings) GetAgreementNearbyTime() int64 {
	return p.AgreementNearbyTime
}

func (p *Settings) GetAgreementSquareTime() int64 {
	return p.AgreementSquareTime
}

func (p *Settings) GetNotificationMention() bool {
	return p.NotificationMention
}

func (p *Settings) GetBotUseAgreementAcceptedAt() int64 {
	return p.BotUseAgreementAcceptedAt
}

func (p *Settings) GetAgreementShakeFunction() int64 {
	return p.AgreementShakeFunction
}

func (p *Settings) GetAgreementMobileContactName() int64 {
	return p.AgreementMobileContactName
}

func (p *Settings) GetNotificationThumbnail() bool {
	return p.NotificationThumbnail
}

func (p *Settings) GetAgreementSoundToText() int64 {
	return p.AgreementSoundToText
}

func (p *Settings) GetPrivacyPolicyVersion() string {
	return p.PrivacyPolicyVersion
}

func (p *Settings) GetAgreementAdByWebAccess() int64 {
	return p.AgreementAdByWebAccess
}

func (p *Settings) GetAgreementPhoneNumberMatching() int64 {
	return p.AgreementPhoneNumberMatching
}

func (p *Settings) GetAgreementCommunicationInfo() int64 {
	return p.AgreementCommunicationInfo
}

func (p *Settings) GetPrivacySharePersonalInfoToFriends() bool {
	return p.PrivacySharePersonalInfoToFriends
}

func (p *Settings) GetAgreementThingsWirelessCommunication() int64 {
	return p.AgreementThingsWirelessCommunication
}

func (p *Settings) GetAgreementGdpr() int64 {
	return p.AgreementGdpr
}

func (p *Settings) GetPrivacyStatusMessageHistory() bool {
	return p.PrivacyStatusMessageHistory
}

func (p *Settings) GetAgreementProvideLocation() int64 {
	return p.AgreementProvideLocation
}

func (p *Settings) GetAgreementBeacon() int64 {
	return p.AgreementBeacon
}

func (p *Settings) GetPrivacyAllowProfileHistory() bool {
	return p.PrivacyAllowProfileHistory
}

func (p *Settings) GetAgreementContentsSuggest() int64 {
	return p.AgreementContentsSuggest
}

func (p *Settings) GetAgreementContentsSuggestDataCollection() int64 {
	return p.AgreementContentsSuggestDataCollection
}

func (p *Settings) GetPrivacyAgeResult_() bool {
	return p.PrivacyAgeResult_
}

func (p *Settings) GetPrivacyAgeResultReceived() bool {
	return p.PrivacyAgeResultReceived
}

func (p *Settings) GetAgreementOcrImageCollection() int64 {
	return p.AgreementOcrImageCollection
}

func (p *Settings) GetPrivacyAllowFollow() bool {
	return p.PrivacyAllowFollow
}

func (p *Settings) GetPrivacyShowFollowList() bool {
	return p.PrivacyShowFollowList
}

func (p *Settings) GetNotificationBadgeTalkOnly() bool {
	return p.NotificationBadgeTalkOnly
}
func (p *Settings) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField13(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField14(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 15:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField15(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField16(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField17(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 18:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField18(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 19:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField19(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 20:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField20(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 21:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField21(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 22:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField22(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 23:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField23(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 24:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField24(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 25:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField25(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 26:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField26(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 27:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField27(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 28:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField28(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 29:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField29(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 30:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField30(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 40:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField40(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 41:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField41(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 42:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField42(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 43:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField43(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 44:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField44(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 45:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField45(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 46:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField46(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 47:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField47(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 48:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField48(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 50:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField50(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 60:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField60(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 61:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField61(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 62:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField62(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 63:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField63(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 65:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField65(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 66:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField66(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 67:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField67(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 68:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField68(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 69:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField69(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 70:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField70(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 71:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField71(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 72:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField72(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 73:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField73(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 74:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField74(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 75:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField75(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 76:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField76(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 77:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField77(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 78:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField78(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 79:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField79(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 80:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField80(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 81:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField81(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 82:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField82(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 83:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField83(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 85:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField85(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 86:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField86(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 87:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField87(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 88:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField88(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 89:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField89(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 90:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField90(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 91:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField91(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 92:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField92(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 93:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField93(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Settings) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.NotificationEnable = v
	}
	return nil
}

func (p *Settings) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.NotificationMuteExpiration = v
	}
	return nil
}

func (p *Settings) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.NotificationNewMessage = v
	}
	return nil
}

func (p *Settings) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.NotificationGroupInvitation = v
	}
	return nil
}

func (p *Settings) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.NotificationShowMessage = v
	}
	return nil
}

func (p *Settings) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.NotificationIncomingCall = v
	}
	return nil
}

func (p *Settings) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.NotificationSoundMessage = v
	}
	return nil
}

func (p *Settings) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.NotificationSoundGroup = v
	}
	return nil
}

func (p *Settings) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.NotificationDisabledWithSub = v
	}
	return nil
}

func (p *Settings) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.NotificationPayment = v
	}
	return nil
}

func (p *Settings) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.PrivacySyncContacts = v
	}
	return nil
}

func (p *Settings) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.PrivacySearchByPhoneNumber = v
	}
	return nil
}

func (p *Settings) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		p.PrivacySearchByUserid = v
	}
	return nil
}

func (p *Settings) ReadField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		p.PrivacySearchByEmail = v
	}
	return nil
}

func (p *Settings) ReadField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 24: ", err)
	} else {
		p.PrivacyAllowSecondaryDeviceLogi = v
	}
	return nil
}

func (p *Settings) ReadField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 25: ", err)
	} else {
		p.PrivacyProfileImagePostToMyhome = v
	}
	return nil
}

func (p *Settings) ReadField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 26: ", err)
	} else {
		p.PrivacyReceiveMessagesFromNotFriend = v
	}
	return nil
}

func (p *Settings) ReadField27(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 27: ", err)
	} else {
		p.PrivacyAgreeUseLineCoinToPaidCall = v
	}
	return nil
}

func (p *Settings) ReadField28(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 28: ", err)
	} else {
		p.PrivacyAgreeUsePaidCall = v
	}
	return nil
}

func (p *Settings) ReadField29(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 29: ", err)
	} else {
		p.PrivacyAllowFriendRequest = v
	}
	return nil
}

func (p *Settings) ReadField30(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 30: ", err)
	} else {
		p.ContactMyTicket = v
	}
	return nil
}

func (p *Settings) ReadField40(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 40: ", err)
	} else {
		temp := IdentityProvider(v)
		p.IdentityProvider = temp
	}
	return nil
}

func (p *Settings) ReadField41(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 41: ", err)
	} else {
		p.IdentityIdentifier = v
	}
	return nil
}

func (p *Settings) ReadField42(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[SnsType]string, size)
	p.SnsAccounts = tMap
	for i := 0; i < size; i++ {
		var _key49 SnsType
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := SnsType(v)
			_key49 = temp
		}
		var _val50 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val50 = v
		}
		p.SnsAccounts[_key49] = _val50
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Settings) ReadField43(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 43: ", err)
	} else {
		p.PhoneRegistration = v
	}
	return nil
}

func (p *Settings) ReadField44(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 44: ", err)
	} else {
		temp := EmailConfirmationStatus(v)
		p.EmailConfirmationStatus = temp
	}
	return nil
}

func (p *Settings) ReadField45(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 45: ", err)
	} else {
		temp := AccountMigrationPincodeType(v)
		p.AccountMigrationPincodeType = temp
	}
	return nil
}

func (p *Settings) ReadField46(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 46: ", err)
	} else {
		p.EnforcedInputAccountMigrationPincode = v
	}
	return nil
}

func (p *Settings) ReadField47(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 47: ", err)
	} else {
		temp := SecurityCenterSettingsType(v)
		p.SecurityCenterSettingsType = temp
	}
	return nil
}

func (p *Settings) ReadField48(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 48: ", err)
	} else {
		p.AllowUnregistrationSecondaryDevice = v
	}
	return nil
}

func (p *Settings) ReadField50(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 50: ", err)
	} else {
		p.PreferenceLocale = v
	}
	return nil
}

func (p *Settings) ReadField60(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[CustomMode]string, size)
	p.CustomModes = tMap
	for i := 0; i < size; i++ {
		var _key51 CustomMode
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := CustomMode(v)
			_key51 = temp
		}
		var _val52 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val52 = v
		}
		p.CustomModes[_key51] = _val52
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Settings) ReadField61(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 61: ", err)
	} else {
		p.E2eeEnable = v
	}
	return nil
}

func (p *Settings) ReadField62(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 62: ", err)
	} else {
		p.HitokotoBackupRequested = v
	}
	return nil
}

func (p *Settings) ReadField63(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 63: ", err)
	} else {
		p.PrivacyProfileMusicPostToMyhome = v
	}
	return nil
}

func (p *Settings) ReadField65(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 65: ", err)
	} else {
		p.PrivacyAllowNearby = v
	}
	return nil
}

func (p *Settings) ReadField66(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 66: ", err)
	} else {
		p.AgreementNearbyTime = v
	}
	return nil
}

func (p *Settings) ReadField67(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 67: ", err)
	} else {
		p.AgreementSquareTime = v
	}
	return nil
}

func (p *Settings) ReadField68(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 68: ", err)
	} else {
		p.NotificationMention = v
	}
	return nil
}

func (p *Settings) ReadField69(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 69: ", err)
	} else {
		p.BotUseAgreementAcceptedAt = v
	}
	return nil
}

func (p *Settings) ReadField70(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 70: ", err)
	} else {
		p.AgreementShakeFunction = v
	}
	return nil
}

func (p *Settings) ReadField71(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 71: ", err)
	} else {
		p.AgreementMobileContactName = v
	}
	return nil
}

func (p *Settings) ReadField72(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 72: ", err)
	} else {
		p.NotificationThumbnail = v
	}
	return nil
}

func (p *Settings) ReadField73(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 73: ", err)
	} else {
		p.AgreementSoundToText = v
	}
	return nil
}

func (p *Settings) ReadField74(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 74: ", err)
	} else {
		p.PrivacyPolicyVersion = v
	}
	return nil
}

func (p *Settings) ReadField75(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 75: ", err)
	} else {
		p.AgreementAdByWebAccess = v
	}
	return nil
}

func (p *Settings) ReadField76(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 76: ", err)
	} else {
		p.AgreementPhoneNumberMatching = v
	}
	return nil
}

func (p *Settings) ReadField77(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 77: ", err)
	} else {
		p.AgreementCommunicationInfo = v
	}
	return nil
}

func (p *Settings) ReadField78(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 78: ", err)
	} else {
		p.PrivacySharePersonalInfoToFriends = v
	}
	return nil
}

func (p *Settings) ReadField79(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 79: ", err)
	} else {
		p.AgreementThingsWirelessCommunication = v
	}
	return nil
}

func (p *Settings) ReadField80(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 80: ", err)
	} else {
		p.AgreementGdpr = v
	}
	return nil
}

func (p *Settings) ReadField81(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 81: ", err)
	} else {
		p.PrivacyStatusMessageHistory = v
	}
	return nil
}

func (p *Settings) ReadField82(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 82: ", err)
	} else {
		p.AgreementProvideLocation = v
	}
	return nil
}

func (p *Settings) ReadField83(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 83: ", err)
	} else {
		p.AgreementBeacon = v
	}
	return nil
}

func (p *Settings) ReadField85(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 85: ", err)
	} else {
		p.PrivacyAllowProfileHistory = v
	}
	return nil
}

func (p *Settings) ReadField86(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 86: ", err)
	} else {
		p.AgreementContentsSuggest = v
	}
	return nil
}

func (p *Settings) ReadField87(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 87: ", err)
	} else {
		p.AgreementContentsSuggestDataCollection = v
	}
	return nil
}

func (p *Settings) ReadField88(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 88: ", err)
	} else {
		p.PrivacyAgeResult_ = v
	}
	return nil
}

func (p *Settings) ReadField89(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 89: ", err)
	} else {
		p.PrivacyAgeResultReceived = v
	}
	return nil
}

func (p *Settings) ReadField90(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 90: ", err)
	} else {
		p.AgreementOcrImageCollection = v
	}
	return nil
}

func (p *Settings) ReadField91(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 91: ", err)
	} else {
		p.PrivacyAllowFollow = v
	}
	return nil
}

func (p *Settings) ReadField92(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 92: ", err)
	} else {
		p.PrivacyShowFollowList = v
	}
	return nil
}

func (p *Settings) ReadField93(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 93: ", err)
	} else {
		p.NotificationBadgeTalkOnly = v
	}
	return nil
}

func (p *Settings) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Settings"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
		if err := p.writeField15(oprot); err != nil {
			return err
		}
		if err := p.writeField16(oprot); err != nil {
			return err
		}
		if err := p.writeField17(oprot); err != nil {
			return err
		}
		if err := p.writeField18(oprot); err != nil {
			return err
		}
		if err := p.writeField19(oprot); err != nil {
			return err
		}
		if err := p.writeField20(oprot); err != nil {
			return err
		}
		if err := p.writeField21(oprot); err != nil {
			return err
		}
		if err := p.writeField22(oprot); err != nil {
			return err
		}
		if err := p.writeField23(oprot); err != nil {
			return err
		}
		if err := p.writeField24(oprot); err != nil {
			return err
		}
		if err := p.writeField25(oprot); err != nil {
			return err
		}
		if err := p.writeField26(oprot); err != nil {
			return err
		}
		if err := p.writeField27(oprot); err != nil {
			return err
		}
		if err := p.writeField28(oprot); err != nil {
			return err
		}
		if err := p.writeField29(oprot); err != nil {
			return err
		}
		if err := p.writeField30(oprot); err != nil {
			return err
		}
		if err := p.writeField40(oprot); err != nil {
			return err
		}
		if err := p.writeField41(oprot); err != nil {
			return err
		}
		if err := p.writeField42(oprot); err != nil {
			return err
		}
		if err := p.writeField43(oprot); err != nil {
			return err
		}
		if err := p.writeField44(oprot); err != nil {
			return err
		}
		if err := p.writeField45(oprot); err != nil {
			return err
		}
		if err := p.writeField46(oprot); err != nil {
			return err
		}
		if err := p.writeField47(oprot); err != nil {
			return err
		}
		if err := p.writeField48(oprot); err != nil {
			return err
		}
		if err := p.writeField50(oprot); err != nil {
			return err
		}
		if err := p.writeField60(oprot); err != nil {
			return err
		}
		if err := p.writeField61(oprot); err != nil {
			return err
		}
		if err := p.writeField62(oprot); err != nil {
			return err
		}
		if err := p.writeField63(oprot); err != nil {
			return err
		}
		if err := p.writeField65(oprot); err != nil {
			return err
		}
		if err := p.writeField66(oprot); err != nil {
			return err
		}
		if err := p.writeField67(oprot); err != nil {
			return err
		}
		if err := p.writeField68(oprot); err != nil {
			return err
		}
		if err := p.writeField69(oprot); err != nil {
			return err
		}
		if err := p.writeField70(oprot); err != nil {
			return err
		}
		if err := p.writeField71(oprot); err != nil {
			return err
		}
		if err := p.writeField72(oprot); err != nil {
			return err
		}
		if err := p.writeField73(oprot); err != nil {
			return err
		}
		if err := p.writeField74(oprot); err != nil {
			return err
		}
		if err := p.writeField75(oprot); err != nil {
			return err
		}
		if err := p.writeField76(oprot); err != nil {
			return err
		}
		if err := p.writeField77(oprot); err != nil {
			return err
		}
		if err := p.writeField78(oprot); err != nil {
			return err
		}
		if err := p.writeField79(oprot); err != nil {
			return err
		}
		if err := p.writeField80(oprot); err != nil {
			return err
		}
		if err := p.writeField81(oprot); err != nil {
			return err
		}
		if err := p.writeField82(oprot); err != nil {
			return err
		}
		if err := p.writeField83(oprot); err != nil {
			return err
		}
		if err := p.writeField85(oprot); err != nil {
			return err
		}
		if err := p.writeField86(oprot); err != nil {
			return err
		}
		if err := p.writeField87(oprot); err != nil {
			return err
		}
		if err := p.writeField88(oprot); err != nil {
			return err
		}
		if err := p.writeField89(oprot); err != nil {
			return err
		}
		if err := p.writeField90(oprot); err != nil {
			return err
		}
		if err := p.writeField91(oprot); err != nil {
			return err
		}
		if err := p.writeField92(oprot); err != nil {
			return err
		}
		if err := p.writeField93(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Settings) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationEnable", thrift.BOOL, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:notificationEnable: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.NotificationEnable)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notificationEnable (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:notificationEnable: ", p), err)
	}
	return err
}

func (p *Settings) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationMuteExpiration", thrift.I64, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:notificationMuteExpiration: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NotificationMuteExpiration)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notificationMuteExpiration (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:notificationMuteExpiration: ", p), err)
	}
	return err
}

func (p *Settings) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationNewMessage", thrift.BOOL, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:notificationNewMessage: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.NotificationNewMessage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notificationNewMessage (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:notificationNewMessage: ", p), err)
	}
	return err
}

func (p *Settings) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationGroupInvitation", thrift.BOOL, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:notificationGroupInvitation: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.NotificationGroupInvitation)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notificationGroupInvitation (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:notificationGroupInvitation: ", p), err)
	}
	return err
}

func (p *Settings) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationShowMessage", thrift.BOOL, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:notificationShowMessage: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.NotificationShowMessage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notificationShowMessage (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:notificationShowMessage: ", p), err)
	}
	return err
}

func (p *Settings) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationIncomingCall", thrift.BOOL, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:notificationIncomingCall: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.NotificationIncomingCall)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notificationIncomingCall (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:notificationIncomingCall: ", p), err)
	}
	return err
}

func (p *Settings) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationSoundMessage", thrift.STRING, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:notificationSoundMessage: ", p), err)
	}
	if err := oprot.WriteString(string(p.NotificationSoundMessage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notificationSoundMessage (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:notificationSoundMessage: ", p), err)
	}
	return err
}

func (p *Settings) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationSoundGroup", thrift.STRING, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:notificationSoundGroup: ", p), err)
	}
	if err := oprot.WriteString(string(p.NotificationSoundGroup)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notificationSoundGroup (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:notificationSoundGroup: ", p), err)
	}
	return err
}

func (p *Settings) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationDisabledWithSub", thrift.BOOL, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:notificationDisabledWithSub: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.NotificationDisabledWithSub)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notificationDisabledWithSub (18) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:notificationDisabledWithSub: ", p), err)
	}
	return err
}

func (p *Settings) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationPayment", thrift.BOOL, 19); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:notificationPayment: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.NotificationPayment)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notificationPayment (19) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 19:notificationPayment: ", p), err)
	}
	return err
}

func (p *Settings) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacySyncContacts", thrift.BOOL, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:privacySyncContacts: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PrivacySyncContacts)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privacySyncContacts (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:privacySyncContacts: ", p), err)
	}
	return err
}

func (p *Settings) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacySearchByPhoneNumber", thrift.BOOL, 21); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:privacySearchByPhoneNumber: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PrivacySearchByPhoneNumber)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privacySearchByPhoneNumber (21) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 21:privacySearchByPhoneNumber: ", p), err)
	}
	return err
}

func (p *Settings) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacySearchByUserid", thrift.BOOL, 22); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:privacySearchByUserid: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PrivacySearchByUserid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privacySearchByUserid (22) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 22:privacySearchByUserid: ", p), err)
	}
	return err
}

func (p *Settings) writeField23(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacySearchByEmail", thrift.BOOL, 23); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:privacySearchByEmail: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PrivacySearchByEmail)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privacySearchByEmail (23) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 23:privacySearchByEmail: ", p), err)
	}
	return err
}

func (p *Settings) writeField24(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacyAllowSecondaryDeviceLogi", thrift.BOOL, 24); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:privacyAllowSecondaryDeviceLogi: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PrivacyAllowSecondaryDeviceLogi)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privacyAllowSecondaryDeviceLogi (24) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 24:privacyAllowSecondaryDeviceLogi: ", p), err)
	}
	return err
}

func (p *Settings) writeField25(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacyProfileImagePostToMyhome", thrift.BOOL, 25); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:privacyProfileImagePostToMyhome: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PrivacyProfileImagePostToMyhome)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privacyProfileImagePostToMyhome (25) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 25:privacyProfileImagePostToMyhome: ", p), err)
	}
	return err
}

func (p *Settings) writeField26(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacyReceiveMessagesFromNotFriend", thrift.BOOL, 26); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:privacyReceiveMessagesFromNotFriend: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PrivacyReceiveMessagesFromNotFriend)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privacyReceiveMessagesFromNotFriend (26) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 26:privacyReceiveMessagesFromNotFriend: ", p), err)
	}
	return err
}

func (p *Settings) writeField27(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacyAgreeUseLineCoinToPaidCall", thrift.BOOL, 27); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:privacyAgreeUseLineCoinToPaidCall: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PrivacyAgreeUseLineCoinToPaidCall)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privacyAgreeUseLineCoinToPaidCall (27) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 27:privacyAgreeUseLineCoinToPaidCall: ", p), err)
	}
	return err
}

func (p *Settings) writeField28(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacyAgreeUsePaidCall", thrift.BOOL, 28); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:privacyAgreeUsePaidCall: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PrivacyAgreeUsePaidCall)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privacyAgreeUsePaidCall (28) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 28:privacyAgreeUsePaidCall: ", p), err)
	}
	return err
}

func (p *Settings) writeField29(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacyAllowFriendRequest", thrift.BOOL, 29); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:privacyAllowFriendRequest: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PrivacyAllowFriendRequest)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privacyAllowFriendRequest (29) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 29:privacyAllowFriendRequest: ", p), err)
	}
	return err
}

func (p *Settings) writeField30(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contactMyTicket", thrift.STRING, 30); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:contactMyTicket: ", p), err)
	}
	if err := oprot.WriteString(string(p.ContactMyTicket)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.contactMyTicket (30) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 30:contactMyTicket: ", p), err)
	}
	return err
}

func (p *Settings) writeField40(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identityProvider", thrift.I32, 40); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:identityProvider: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.IdentityProvider)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.identityProvider (40) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 40:identityProvider: ", p), err)
	}
	return err
}

func (p *Settings) writeField41(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identityIdentifier", thrift.STRING, 41); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:identityIdentifier: ", p), err)
	}
	if err := oprot.WriteString(string(p.IdentityIdentifier)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.identityIdentifier (41) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 41:identityIdentifier: ", p), err)
	}
	return err
}

func (p *Settings) writeField42(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("snsAccounts", thrift.MAP, 42); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 42:snsAccounts: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.SnsAccounts)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.SnsAccounts {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 42:snsAccounts: ", p), err)
	}
	return err
}

func (p *Settings) writeField43(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phoneRegistration", thrift.BOOL, 43); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 43:phoneRegistration: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PhoneRegistration)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.phoneRegistration (43) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 43:phoneRegistration: ", p), err)
	}
	return err
}

func (p *Settings) writeField44(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("emailConfirmationStatus", thrift.I32, 44); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 44:emailConfirmationStatus: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.EmailConfirmationStatus)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.emailConfirmationStatus (44) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 44:emailConfirmationStatus: ", p), err)
	}
	return err
}

func (p *Settings) writeField45(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("accountMigrationPincodeType", thrift.I32, 45); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 45:accountMigrationPincodeType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.AccountMigrationPincodeType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.accountMigrationPincodeType (45) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 45:accountMigrationPincodeType: ", p), err)
	}
	return err
}

func (p *Settings) writeField46(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("enforcedInputAccountMigrationPincode", thrift.BOOL, 46); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 46:enforcedInputAccountMigrationPincode: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.EnforcedInputAccountMigrationPincode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.enforcedInputAccountMigrationPincode (46) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 46:enforcedInputAccountMigrationPincode: ", p), err)
	}
	return err
}

func (p *Settings) writeField47(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("securityCenterSettingsType", thrift.I32, 47); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 47:securityCenterSettingsType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SecurityCenterSettingsType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.securityCenterSettingsType (47) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 47:securityCenterSettingsType: ", p), err)
	}
	return err
}

func (p *Settings) writeField48(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("allowUnregistrationSecondaryDevice", thrift.BOOL, 48); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 48:allowUnregistrationSecondaryDevice: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.AllowUnregistrationSecondaryDevice)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.allowUnregistrationSecondaryDevice (48) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 48:allowUnregistrationSecondaryDevice: ", p), err)
	}
	return err
}

func (p *Settings) writeField50(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("preferenceLocale", thrift.STRING, 50); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:preferenceLocale: ", p), err)
	}
	if err := oprot.WriteString(string(p.PreferenceLocale)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.preferenceLocale (50) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 50:preferenceLocale: ", p), err)
	}
	return err
}

func (p *Settings) writeField60(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("customModes", thrift.MAP, 60); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 60:customModes: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.CustomModes)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.CustomModes {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 60:customModes: ", p), err)
	}
	return err
}

func (p *Settings) writeField61(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("e2eeEnable", thrift.BOOL, 61); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 61:e2eeEnable: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.E2eeEnable)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.e2eeEnable (61) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 61:e2eeEnable: ", p), err)
	}
	return err
}

func (p *Settings) writeField62(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hitokotoBackupRequested", thrift.BOOL, 62); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 62:hitokotoBackupRequested: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.HitokotoBackupRequested)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hitokotoBackupRequested (62) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 62:hitokotoBackupRequested: ", p), err)
	}
	return err
}

func (p *Settings) writeField63(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacyProfileMusicPostToMyhome", thrift.BOOL, 63); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 63:privacyProfileMusicPostToMyhome: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PrivacyProfileMusicPostToMyhome)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privacyProfileMusicPostToMyhome (63) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 63:privacyProfileMusicPostToMyhome: ", p), err)
	}
	return err
}

func (p *Settings) writeField65(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacyAllowNearby", thrift.BOOL, 65); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 65:privacyAllowNearby: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PrivacyAllowNearby)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privacyAllowNearby (65) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 65:privacyAllowNearby: ", p), err)
	}
	return err
}

func (p *Settings) writeField66(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("agreementNearbyTime", thrift.I64, 66); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 66:agreementNearbyTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.AgreementNearbyTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.agreementNearbyTime (66) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 66:agreementNearbyTime: ", p), err)
	}
	return err
}

func (p *Settings) writeField67(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("agreementSquareTime", thrift.I64, 67); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 67:agreementSquareTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.AgreementSquareTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.agreementSquareTime (67) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 67:agreementSquareTime: ", p), err)
	}
	return err
}

func (p *Settings) writeField68(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationMention", thrift.BOOL, 68); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 68:notificationMention: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.NotificationMention)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notificationMention (68) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 68:notificationMention: ", p), err)
	}
	return err
}

func (p *Settings) writeField69(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("botUseAgreementAcceptedAt", thrift.I64, 69); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 69:botUseAgreementAcceptedAt: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BotUseAgreementAcceptedAt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.botUseAgreementAcceptedAt (69) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 69:botUseAgreementAcceptedAt: ", p), err)
	}
	return err
}

func (p *Settings) writeField70(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("agreementShakeFunction", thrift.I64, 70); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 70:agreementShakeFunction: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.AgreementShakeFunction)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.agreementShakeFunction (70) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 70:agreementShakeFunction: ", p), err)
	}
	return err
}

func (p *Settings) writeField71(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("agreementMobileContactName", thrift.I64, 71); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 71:agreementMobileContactName: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.AgreementMobileContactName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.agreementMobileContactName (71) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 71:agreementMobileContactName: ", p), err)
	}
	return err
}

func (p *Settings) writeField72(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationThumbnail", thrift.BOOL, 72); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 72:notificationThumbnail: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.NotificationThumbnail)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notificationThumbnail (72) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 72:notificationThumbnail: ", p), err)
	}
	return err
}

func (p *Settings) writeField73(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("agreementSoundToText", thrift.I64, 73); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 73:agreementSoundToText: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.AgreementSoundToText)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.agreementSoundToText (73) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 73:agreementSoundToText: ", p), err)
	}
	return err
}

func (p *Settings) writeField74(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacyPolicyVersion", thrift.STRING, 74); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 74:privacyPolicyVersion: ", p), err)
	}
	if err := oprot.WriteString(string(p.PrivacyPolicyVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privacyPolicyVersion (74) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 74:privacyPolicyVersion: ", p), err)
	}
	return err
}

func (p *Settings) writeField75(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("agreementAdByWebAccess", thrift.I64, 75); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 75:agreementAdByWebAccess: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.AgreementAdByWebAccess)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.agreementAdByWebAccess (75) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 75:agreementAdByWebAccess: ", p), err)
	}
	return err
}

func (p *Settings) writeField76(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("agreementPhoneNumberMatching", thrift.I64, 76); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 76:agreementPhoneNumberMatching: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.AgreementPhoneNumberMatching)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.agreementPhoneNumberMatching (76) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 76:agreementPhoneNumberMatching: ", p), err)
	}
	return err
}

func (p *Settings) writeField77(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("agreementCommunicationInfo", thrift.I64, 77); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 77:agreementCommunicationInfo: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.AgreementCommunicationInfo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.agreementCommunicationInfo (77) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 77:agreementCommunicationInfo: ", p), err)
	}
	return err
}

func (p *Settings) writeField78(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacySharePersonalInfoToFriends", thrift.BOOL, 78); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 78:privacySharePersonalInfoToFriends: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PrivacySharePersonalInfoToFriends)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privacySharePersonalInfoToFriends (78) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 78:privacySharePersonalInfoToFriends: ", p), err)
	}
	return err
}

func (p *Settings) writeField79(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("agreementThingsWirelessCommunication", thrift.I64, 79); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 79:agreementThingsWirelessCommunication: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.AgreementThingsWirelessCommunication)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.agreementThingsWirelessCommunication (79) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 79:agreementThingsWirelessCommunication: ", p), err)
	}
	return err
}

func (p *Settings) writeField80(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("agreementGdpr", thrift.I64, 80); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 80:agreementGdpr: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.AgreementGdpr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.agreementGdpr (80) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 80:agreementGdpr: ", p), err)
	}
	return err
}

func (p *Settings) writeField81(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacyStatusMessageHistory", thrift.BOOL, 81); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 81:privacyStatusMessageHistory: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PrivacyStatusMessageHistory)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privacyStatusMessageHistory (81) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 81:privacyStatusMessageHistory: ", p), err)
	}
	return err
}

func (p *Settings) writeField82(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("agreementProvideLocation", thrift.I64, 82); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 82:agreementProvideLocation: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.AgreementProvideLocation)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.agreementProvideLocation (82) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 82:agreementProvideLocation: ", p), err)
	}
	return err
}

func (p *Settings) writeField83(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("agreementBeacon", thrift.I64, 83); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 83:agreementBeacon: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.AgreementBeacon)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.agreementBeacon (83) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 83:agreementBeacon: ", p), err)
	}
	return err
}

func (p *Settings) writeField85(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacyAllowProfileHistory", thrift.BOOL, 85); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 85:privacyAllowProfileHistory: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PrivacyAllowProfileHistory)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privacyAllowProfileHistory (85) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 85:privacyAllowProfileHistory: ", p), err)
	}
	return err
}

func (p *Settings) writeField86(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("agreementContentsSuggest", thrift.I64, 86); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 86:agreementContentsSuggest: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.AgreementContentsSuggest)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.agreementContentsSuggest (86) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 86:agreementContentsSuggest: ", p), err)
	}
	return err
}

func (p *Settings) writeField87(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("agreementContentsSuggestDataCollection", thrift.I64, 87); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 87:agreementContentsSuggestDataCollection: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.AgreementContentsSuggestDataCollection)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.agreementContentsSuggestDataCollection (87) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 87:agreementContentsSuggestDataCollection: ", p), err)
	}
	return err
}

func (p *Settings) writeField88(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacyAgeResult", thrift.BOOL, 88); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 88:privacyAgeResult: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PrivacyAgeResult_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privacyAgeResult (88) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 88:privacyAgeResult: ", p), err)
	}
	return err
}

func (p *Settings) writeField89(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacyAgeResultReceived", thrift.BOOL, 89); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 89:privacyAgeResultReceived: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PrivacyAgeResultReceived)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privacyAgeResultReceived (89) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 89:privacyAgeResultReceived: ", p), err)
	}
	return err
}

func (p *Settings) writeField90(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("agreementOcrImageCollection", thrift.I64, 90); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 90:agreementOcrImageCollection: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.AgreementOcrImageCollection)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.agreementOcrImageCollection (90) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 90:agreementOcrImageCollection: ", p), err)
	}
	return err
}

func (p *Settings) writeField91(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacyAllowFollow", thrift.BOOL, 91); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 91:privacyAllowFollow: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PrivacyAllowFollow)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privacyAllowFollow (91) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 91:privacyAllowFollow: ", p), err)
	}
	return err
}

func (p *Settings) writeField92(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacyShowFollowList", thrift.BOOL, 92); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 92:privacyShowFollowList: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PrivacyShowFollowList)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privacyShowFollowList (92) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 92:privacyShowFollowList: ", p), err)
	}
	return err
}

func (p *Settings) writeField93(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationBadgeTalkOnly", thrift.BOOL, 93); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 93:notificationBadgeTalkOnly: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.NotificationBadgeTalkOnly)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notificationBadgeTalkOnly (93) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 93:notificationBadgeTalkOnly: ", p), err)
	}
	return err
}

func (p *Settings) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Settings(%+v)", *p)
}

type UpdateChatResponse struct {
}

func NewUpdateChatResponse() *UpdateChatResponse {
	return &UpdateChatResponse{}
}

func (p *UpdateChatResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UpdateChatResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateChatResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateChatResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateChatResponse(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Chat
//  - UpdatedAttribute
type UpdateChatRequest struct {
	ReqSeq           int32         `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	Chat             *Chat         `thrift:"chat,2" db:"chat" json:"chat"`
	UpdatedAttribute ChatAttribute `thrift:"updatedAttribute,3" db:"updatedAttribute" json:"updatedAttribute"`
}

func NewUpdateChatRequest() *UpdateChatRequest {
	return &UpdateChatRequest{}
}

func (p *UpdateChatRequest) GetReqSeq() int32 {
	return p.ReqSeq
}

var UpdateChatRequest_Chat_DEFAULT *Chat

func (p *UpdateChatRequest) GetChat() *Chat {
	if !p.IsSetChat() {
		return UpdateChatRequest_Chat_DEFAULT
	}
	return p.Chat
}

func (p *UpdateChatRequest) GetUpdatedAttribute() ChatAttribute {
	return p.UpdatedAttribute
}
func (p *UpdateChatRequest) IsSetChat() bool {
	return p.Chat != nil
}

func (p *UpdateChatRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UpdateChatRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *UpdateChatRequest) ReadField2(iprot thrift.TProtocol) error {
	p.Chat = &Chat{}
	if err := p.Chat.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Chat), err)
	}
	return nil
}

func (p *UpdateChatRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := ChatAttribute(v)
		p.UpdatedAttribute = temp
	}
	return nil
}

func (p *UpdateChatRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateChatRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateChatRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *UpdateChatRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chat", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chat: ", p), err)
	}
	if err := p.Chat.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Chat), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chat: ", p), err)
	}
	return err
}

func (p *UpdateChatRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updatedAttribute", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:updatedAttribute: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UpdatedAttribute)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.updatedAttribute (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:updatedAttribute: ", p), err)
	}
	return err
}

func (p *UpdateChatRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateChatRequest(%+v)", *p)
}

// Attributes:
//  - TotalIncomingCount
//  - TotalOutgoingCount
//  - RecentIncomings
//  - RecentOutgoings
//  - TotalIncomingLimit
//  - TotalOutgoingLimit
type FriendRequestsInfo struct {
	TotalIncomingCount int32            `thrift:"totalIncomingCount,1" db:"totalIncomingCount" json:"totalIncomingCount"`
	TotalOutgoingCount int32            `thrift:"totalOutgoingCount,2" db:"totalOutgoingCount" json:"totalOutgoingCount"`
	RecentIncomings    []*FriendRequest `thrift:"recentIncomings,3" db:"recentIncomings" json:"recentIncomings"`
	RecentOutgoings    []*FriendRequest `thrift:"recentOutgoings,4" db:"recentOutgoings" json:"recentOutgoings"`
	TotalIncomingLimit int32            `thrift:"totalIncomingLimit,5" db:"totalIncomingLimit" json:"totalIncomingLimit"`
	TotalOutgoingLimit int32            `thrift:"totalOutgoingLimit,6" db:"totalOutgoingLimit" json:"totalOutgoingLimit"`
}

func NewFriendRequestsInfo() *FriendRequestsInfo {
	return &FriendRequestsInfo{}
}

func (p *FriendRequestsInfo) GetTotalIncomingCount() int32 {
	return p.TotalIncomingCount
}

func (p *FriendRequestsInfo) GetTotalOutgoingCount() int32 {
	return p.TotalOutgoingCount
}

func (p *FriendRequestsInfo) GetRecentIncomings() []*FriendRequest {
	return p.RecentIncomings
}

func (p *FriendRequestsInfo) GetRecentOutgoings() []*FriendRequest {
	return p.RecentOutgoings
}

func (p *FriendRequestsInfo) GetTotalIncomingLimit() int32 {
	return p.TotalIncomingLimit
}

func (p *FriendRequestsInfo) GetTotalOutgoingLimit() int32 {
	return p.TotalOutgoingLimit
}
func (p *FriendRequestsInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FriendRequestsInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TotalIncomingCount = v
	}
	return nil
}

func (p *FriendRequestsInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TotalOutgoingCount = v
	}
	return nil
}

func (p *FriendRequestsInfo) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*FriendRequest, 0, size)
	p.RecentIncomings = tSlice
	for i := 0; i < size; i++ {
		_elem53 := &FriendRequest{}
		if err := _elem53.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem53), err)
		}
		p.RecentIncomings = append(p.RecentIncomings, _elem53)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *FriendRequestsInfo) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*FriendRequest, 0, size)
	p.RecentOutgoings = tSlice
	for i := 0; i < size; i++ {
		_elem54 := &FriendRequest{}
		if err := _elem54.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem54), err)
		}
		p.RecentOutgoings = append(p.RecentOutgoings, _elem54)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *FriendRequestsInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.TotalIncomingLimit = v
	}
	return nil
}

func (p *FriendRequestsInfo) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.TotalOutgoingLimit = v
	}
	return nil
}

func (p *FriendRequestsInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FriendRequestsInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FriendRequestsInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalIncomingCount", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:totalIncomingCount: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TotalIncomingCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalIncomingCount (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:totalIncomingCount: ", p), err)
	}
	return err
}

func (p *FriendRequestsInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalOutgoingCount", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:totalOutgoingCount: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TotalOutgoingCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalOutgoingCount (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:totalOutgoingCount: ", p), err)
	}
	return err
}

func (p *FriendRequestsInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("recentIncomings", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:recentIncomings: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RecentIncomings)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.RecentIncomings {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:recentIncomings: ", p), err)
	}
	return err
}

func (p *FriendRequestsInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("recentOutgoings", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:recentOutgoings: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RecentOutgoings)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.RecentOutgoings {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:recentOutgoings: ", p), err)
	}
	return err
}

func (p *FriendRequestsInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalIncomingLimit", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:totalIncomingLimit: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TotalIncomingLimit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalIncomingLimit (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:totalIncomingLimit: ", p), err)
	}
	return err
}

func (p *FriendRequestsInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalOutgoingLimit", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:totalOutgoingLimit: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TotalOutgoingLimit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalOutgoingLimit (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:totalOutgoingLimit: ", p), err)
	}
	return err
}

func (p *FriendRequestsInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FriendRequestsInfo(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
//  - TargetUserMids
type DeleteOtherFromChatRequest struct {
	ReqSeq         int32    `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	ChatMid        string   `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
	TargetUserMids []string `thrift:"targetUserMids,3" db:"targetUserMids" json:"targetUserMids"`
}

func NewDeleteOtherFromChatRequest() *DeleteOtherFromChatRequest {
	return &DeleteOtherFromChatRequest{}
}

func (p *DeleteOtherFromChatRequest) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *DeleteOtherFromChatRequest) GetChatMid() string {
	return p.ChatMid
}

func (p *DeleteOtherFromChatRequest) GetTargetUserMids() []string {
	return p.TargetUserMids
}
func (p *DeleteOtherFromChatRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DeleteOtherFromChatRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *DeleteOtherFromChatRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChatMid = v
	}
	return nil
}

func (p *DeleteOtherFromChatRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]string, 0, size)
	p.TargetUserMids = tSet
	for i := 0; i < size; i++ {
		var _elem55 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem55 = v
		}
		p.TargetUserMids = append(p.TargetUserMids, _elem55)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *DeleteOtherFromChatRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteOtherFromChatRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DeleteOtherFromChatRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *DeleteOtherFromChatRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChatMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err)
	}
	return err
}

func (p *DeleteOtherFromChatRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("targetUserMids", thrift.SET, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:targetUserMids: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.TargetUserMids)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for i := 0; i < len(p.TargetUserMids); i++ {
		for j := i + 1; j < len(p.TargetUserMids); j++ {
			if reflect.DeepEqual(p.TargetUserMids[i], p.TargetUserMids[j]) {
				return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.TargetUserMids[i]))
			}
		}
	}
	for _, v := range p.TargetUserMids {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:targetUserMids: ", p), err)
	}
	return err
}

func (p *DeleteOtherFromChatRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteOtherFromChatRequest(%+v)", *p)
}

// Attributes:
//  - Luid
//  - ContactType
//  - ContactKey
//  - Contact
type ContactRegistration struct {
	// unused fields # 1 to 9
	Luid        string   `thrift:"luid,10" db:"luid" json:"luid"`
	ContactType MIDType  `thrift:"contactType,11" db:"contactType" json:"contactType"`
	ContactKey  string   `thrift:"contactKey,12" db:"contactKey" json:"contactKey"`
	Contact     *Contact `thrift:"contact,13" db:"contact" json:"contact"`
}

func NewContactRegistration() *ContactRegistration {
	return &ContactRegistration{}
}

func (p *ContactRegistration) GetLuid() string {
	return p.Luid
}

func (p *ContactRegistration) GetContactType() MIDType {
	return p.ContactType
}

func (p *ContactRegistration) GetContactKey() string {
	return p.ContactKey
}

var ContactRegistration_Contact_DEFAULT *Contact

func (p *ContactRegistration) GetContact() *Contact {
	if !p.IsSetContact() {
		return ContactRegistration_Contact_DEFAULT
	}
	return p.Contact
}
func (p *ContactRegistration) IsSetContact() bool {
	return p.Contact != nil
}

func (p *ContactRegistration) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 10:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField13(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ContactRegistration) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Luid = v
	}
	return nil
}

func (p *ContactRegistration) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		temp := MIDType(v)
		p.ContactType = temp
	}
	return nil
}

func (p *ContactRegistration) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.ContactKey = v
	}
	return nil
}

func (p *ContactRegistration) ReadField13(iprot thrift.TProtocol) error {
	p.Contact = &Contact{}
	if err := p.Contact.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Contact), err)
	}
	return nil
}

func (p *ContactRegistration) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ContactRegistration"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ContactRegistration) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("luid", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:luid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Luid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.luid (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:luid: ", p), err)
	}
	return err
}

func (p *ContactRegistration) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contactType", thrift.I32, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:contactType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ContactType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.contactType (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:contactType: ", p), err)
	}
	return err
}

func (p *ContactRegistration) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contactKey", thrift.STRING, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:contactKey: ", p), err)
	}
	if err := oprot.WriteString(string(p.ContactKey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.contactKey (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:contactKey: ", p), err)
	}
	return err
}

func (p *ContactRegistration) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contact", thrift.STRUCT, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:contact: ", p), err)
	}
	if err := p.Contact.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Contact), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:contact: ", p), err)
	}
	return err
}

func (p *ContactRegistration) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContactRegistration(%+v)", *p)
}

type DeleteOtherFromChatResponse struct {
}

func NewDeleteOtherFromChatResponse() *DeleteOtherFromChatResponse {
	return &DeleteOtherFromChatResponse{}
}

func (p *DeleteOtherFromChatResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DeleteOtherFromChatResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteOtherFromChatResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DeleteOtherFromChatResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteOtherFromChatResponse(%+v)", *p)
}

type DeleteSelfFromChatResponse struct {
}

func NewDeleteSelfFromChatResponse() *DeleteSelfFromChatResponse {
	return &DeleteSelfFromChatResponse{}
}

func (p *DeleteSelfFromChatResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DeleteSelfFromChatResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteSelfFromChatResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DeleteSelfFromChatResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteSelfFromChatResponse(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
//  - LastSeenMessageDeliveredTime
//  - LastSeenMessageId
//  - LastMessageDeliveredTime
//  - LastMessageId
type DeleteSelfFromChatRequest struct {
	ReqSeq                       int32  `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	ChatMid                      string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
	LastSeenMessageDeliveredTime int64  `thrift:"lastSeenMessageDeliveredTime,3" db:"lastSeenMessageDeliveredTime" json:"lastSeenMessageDeliveredTime"`
	LastSeenMessageId            string `thrift:"lastSeenMessageId,4" db:"lastSeenMessageId" json:"lastSeenMessageId"`
	LastMessageDeliveredTime     int64  `thrift:"lastMessageDeliveredTime,5" db:"lastMessageDeliveredTime" json:"lastMessageDeliveredTime"`
	LastMessageId                string `thrift:"lastMessageId,6" db:"lastMessageId" json:"lastMessageId"`
}

func NewDeleteSelfFromChatRequest() *DeleteSelfFromChatRequest {
	return &DeleteSelfFromChatRequest{}
}

func (p *DeleteSelfFromChatRequest) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *DeleteSelfFromChatRequest) GetChatMid() string {
	return p.ChatMid
}

func (p *DeleteSelfFromChatRequest) GetLastSeenMessageDeliveredTime() int64 {
	return p.LastSeenMessageDeliveredTime
}

func (p *DeleteSelfFromChatRequest) GetLastSeenMessageId() string {
	return p.LastSeenMessageId
}

func (p *DeleteSelfFromChatRequest) GetLastMessageDeliveredTime() int64 {
	return p.LastMessageDeliveredTime
}

func (p *DeleteSelfFromChatRequest) GetLastMessageId() string {
	return p.LastMessageId
}
func (p *DeleteSelfFromChatRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DeleteSelfFromChatRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *DeleteSelfFromChatRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChatMid = v
	}
	return nil
}

func (p *DeleteSelfFromChatRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.LastSeenMessageDeliveredTime = v
	}
	return nil
}

func (p *DeleteSelfFromChatRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.LastSeenMessageId = v
	}
	return nil
}

func (p *DeleteSelfFromChatRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.LastMessageDeliveredTime = v
	}
	return nil
}

func (p *DeleteSelfFromChatRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.LastMessageId = v
	}
	return nil
}

func (p *DeleteSelfFromChatRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteSelfFromChatRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DeleteSelfFromChatRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *DeleteSelfFromChatRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChatMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err)
	}
	return err
}

func (p *DeleteSelfFromChatRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastSeenMessageDeliveredTime", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastSeenMessageDeliveredTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LastSeenMessageDeliveredTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lastSeenMessageDeliveredTime (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastSeenMessageDeliveredTime: ", p), err)
	}
	return err
}

func (p *DeleteSelfFromChatRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastSeenMessageId", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:lastSeenMessageId: ", p), err)
	}
	if err := oprot.WriteString(string(p.LastSeenMessageId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lastSeenMessageId (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:lastSeenMessageId: ", p), err)
	}
	return err
}

func (p *DeleteSelfFromChatRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastMessageDeliveredTime", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:lastMessageDeliveredTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LastMessageDeliveredTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lastMessageDeliveredTime (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:lastMessageDeliveredTime: ", p), err)
	}
	return err
}

func (p *DeleteSelfFromChatRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastMessageId", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:lastMessageId: ", p), err)
	}
	if err := oprot.WriteString(string(p.LastMessageId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lastMessageId (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:lastMessageId: ", p), err)
	}
	return err
}

func (p *DeleteSelfFromChatRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteSelfFromChatRequest(%+v)", *p)
}

type RejectChatInvitationResponse struct {
}

func NewRejectChatInvitationResponse() *RejectChatInvitationResponse {
	return &RejectChatInvitationResponse{}
}

func (p *RejectChatInvitationResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RejectChatInvitationResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RejectChatInvitationResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RejectChatInvitationResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RejectChatInvitationResponse(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
type RejectChatInvitationRequest struct {
	ReqSeq  int32  `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
}

func NewRejectChatInvitationRequest() *RejectChatInvitationRequest {
	return &RejectChatInvitationRequest{}
}

func (p *RejectChatInvitationRequest) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *RejectChatInvitationRequest) GetChatMid() string {
	return p.ChatMid
}
func (p *RejectChatInvitationRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RejectChatInvitationRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *RejectChatInvitationRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChatMid = v
	}
	return nil
}

func (p *RejectChatInvitationRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RejectChatInvitationRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RejectChatInvitationRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *RejectChatInvitationRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChatMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err)
	}
	return err
}

func (p *RejectChatInvitationRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RejectChatInvitationRequest(%+v)", *p)
}

// Attributes:
//  - StartMessageId
//  - EndMessageId
//  - StartTime
//  - EndTime
type TMessageReadRangeEntry struct {
	StartMessageId int64 `thrift:"startMessageId,1" db:"startMessageId" json:"startMessageId"`
	EndMessageId   int64 `thrift:"endMessageId,2" db:"endMessageId" json:"endMessageId"`
	StartTime      int64 `thrift:"startTime,3" db:"startTime" json:"startTime"`
	EndTime        int64 `thrift:"endTime,4" db:"endTime" json:"endTime"`
}

func NewTMessageReadRangeEntry() *TMessageReadRangeEntry {
	return &TMessageReadRangeEntry{}
}

func (p *TMessageReadRangeEntry) GetStartMessageId() int64 {
	return p.StartMessageId
}

func (p *TMessageReadRangeEntry) GetEndMessageId() int64 {
	return p.EndMessageId
}

func (p *TMessageReadRangeEntry) GetStartTime() int64 {
	return p.StartTime
}

func (p *TMessageReadRangeEntry) GetEndTime() int64 {
	return p.EndTime
}
func (p *TMessageReadRangeEntry) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMessageReadRangeEntry) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.StartMessageId = v
	}
	return nil
}

func (p *TMessageReadRangeEntry) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.EndMessageId = v
	}
	return nil
}

func (p *TMessageReadRangeEntry) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.StartTime = v
	}
	return nil
}

func (p *TMessageReadRangeEntry) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.EndTime = v
	}
	return nil
}

func (p *TMessageReadRangeEntry) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMessageReadRangeEntry"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMessageReadRangeEntry) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startMessageId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:startMessageId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.StartMessageId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startMessageId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:startMessageId: ", p), err)
	}
	return err
}

func (p *TMessageReadRangeEntry) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endMessageId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:endMessageId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.EndMessageId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.endMessageId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:endMessageId: ", p), err)
	}
	return err
}

func (p *TMessageReadRangeEntry) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startTime", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:startTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startTime (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:startTime: ", p), err)
	}
	return err
}

func (p *TMessageReadRangeEntry) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endTime", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:endTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.EndTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.endTime (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:endTime: ", p), err)
	}
	return err
}

func (p *TMessageReadRangeEntry) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMessageReadRangeEntry(%+v)", *p)
}

// Attributes:
//  - ChatMid
//  - Ranges
type TMessageReadRange struct {
	ChatMid string                               `thrift:"chatMid,1" db:"chatMid" json:"chatMid"`
	Ranges  map[string][]*TMessageReadRangeEntry `thrift:"ranges,2" db:"ranges" json:"ranges"`
}

func NewTMessageReadRange() *TMessageReadRange {
	return &TMessageReadRange{}
}

func (p *TMessageReadRange) GetChatMid() string {
	return p.ChatMid
}

func (p *TMessageReadRange) GetRanges() map[string][]*TMessageReadRangeEntry {
	return p.Ranges
}
func (p *TMessageReadRange) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMessageReadRange) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ChatMid = v
	}
	return nil
}

func (p *TMessageReadRange) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string][]*TMessageReadRangeEntry, size)
	p.Ranges = tMap
	for i := 0; i < size; i++ {
		var _key56 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key56 = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]*TMessageReadRangeEntry, 0, size)
		_val57 := tSlice
		for i := 0; i < size; i++ {
			_elem58 := &TMessageReadRangeEntry{}
			if err := _elem58.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem58), err)
			}
			_val57 = append(_val57, _elem58)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.Ranges[_key56] = _val57
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TMessageReadRange) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMessageReadRange"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMessageReadRange) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chatMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChatMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatMid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chatMid: ", p), err)
	}
	return err
}

func (p *TMessageReadRange) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ranges", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ranges: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.Ranges)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Ranges {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ranges: ", p), err)
	}
	return err
}

func (p *TMessageReadRange) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMessageReadRange(%+v)", *p)
}

type TalkService interface {
	// Parameters:
	//  - MidOrEMid
	//  - Method
	//  - FriendRequestParams
	TryFriendRequest(ctx context.Context, midOrEMid string, method Method_, friendRequestParams string) (err error)
	// Parameters:
	//  - ReqSeq
	//  - Attr
	//  - ExtendedProfile
	UpdateExtendedProfileAttribute(ctx context.Context, reqSeq int32, attr UpdateExtendedProfileAttributeAttr, extendedProfile *ExtendedProfile) (err error)
	// Parameters:
	//  - MigrationSessionId
	VerifyAccountMigration(ctx context.Context, migrationSessionId string) (err error)
	// Parameters:
	//  - Location
	//  - Trigger
	//  - NetworkStatus
	ReportLocation(ctx context.Context, location *Geolocation, trigger Trigger, networkStatus *ClientNetworkStatus) (err error)
	// Parameters:
	//  - Language
	GetPaidCallBalanceList(ctx context.Context, language string) (r []*PaidCallBalance, err error)
	// Parameters:
	//  - Requests
	CreateChat(ctx context.Context, requests *CreateChatRequest) (r *CreateChatResponse, err error)
	// Parameters:
	//  - ReqSeq
	//  - Mid
	//  - Type
	//  - Reference
	FindAndAddContactsByMid(ctx context.Context, reqSeq int32, mid string, type_a1 MIDType, reference string) (r map[string]*Contact, err error)
	// Parameters:
	//  - ExpirationTime
	//  - MaxUseCount
	GenerateUserTicket(ctx context.Context, expirationTime int64, maxUseCount int32) (r *Ticket, err error)
	// Parameters:
	//  - Ids
	GetContacts(ctx context.Context, ids []string) (r []*Contact, err error)
	// Parameters:
	//  - GetFollowersRequest
	GetFollowers(ctx context.Context, getFollowersRequest *GetFollowersRequest) (r *GetFollowersResponse, err error)
	// Parameters:
	//  - ChatMid
	GetLastE2EEPublicKeys(ctx context.Context, chatMid string) (r map[string]*E2EEPublicKey, err error)
	// Parameters:
	//  - ReqSeq
	//  - RoomId
	LeaveRoom(ctx context.Context, reqSeq int32, roomId string) (err error)
	// Parameters:
	//  - UdidHash
	//  - ApplicationTypeWithExtensions
	NotifyRegistrationComplete(ctx context.Context, udidHash string, applicationTypeWithExtensions string) (err error)
	// Parameters:
	//  - ReqSeq
	//  - ChatRoomMid
	//  - AnnouncementSeq
	RemoveChatRoomAnnouncement(ctx context.Context, reqSeq int32, chatRoomMid string, announcementSeq int64) (err error)
	// Parameters:
	//  - Seq
	//  - ChatMid
	//  - LastMessageId
	//  - SessionId
	SendChatRemoved(ctx context.Context, seq int32, chatMid string, lastMessageId string, sessionId int8) (err error)
	// Parameters:
	//  - AuthSessionId
	//  - Request
	UpdatePassword(ctx context.Context, authSessionId string, request *IdentityCredentialRequest) (r *IdentityCredentialResponse, err error)
	// Parameters:
	//  - ReqSeq
	//  - ID
	//  - Reference
	UnblockContact(ctx context.Context, reqSeq int32, id string, reference string) (err error)
	// Parameters:
	//  - IdentityCredential
	//  - MigrationPincodeSessionId
	VerifyIdentityCredentialWithResult_(ctx context.Context, identityCredential *IdentityCredential, migrationPincodeSessionId string) (r *UserAuthStatus, err error)
	// Parameters:
	//  - DataTypes
	RequestCleanupUserProvidedData(ctx context.Context, dataTypes []DataTypes) (err error)
	// Parameters:
	//  - Request
	GetBuddyStatusBarV2(ctx context.Context, request *GetBuddyStatusBarV2Request) (r *BuddyStatusBar, err error)
	// Parameters:
	//  - Start
	//  - Size
	//  - Language
	GetPaidCallHistory(ctx context.Context, start int64, size int32, language string) (r *PaidCallHistoryResult_, err error)
	// Parameters:
	//  - ReqSeq
	//  - ID
	BlockContact(ctx context.Context, reqSeq int32, id string) (err error)
	// Parameters:
	//  - Seq
	//  - Name
	//  - ContactIds
	CreateGroupV2(ctx context.Context, seq int32, name string, contactIds []string) (r *Group, err error)
	// Parameters:
	//  - ReqSeq
	//  - Phones
	//  - Reference
	FindAndAddContactsByPhone(ctx context.Context, reqSeq int32, phones []string, reference string) (r map[string]*Contact, err error)
	// Parameters:
	//  - SessionId
	GetAcceptedProximityMatches(ctx context.Context, sessionId string) (r []string, err error)
	// Parameters:
	//  - ChatRoomMids
	//  - SyncReason
	GetChatRoomAnnouncementsBulk(ctx context.Context, chatRoomMids []string, syncReason SyncReason) (r map[string][]*ChatRoomAnnouncement, err error)
	// Parameters:
	//  - SyncReason
	GetRecommendationIds(ctx context.Context, syncReason SyncReason) (r []string, err error)
	// Parameters:
	//  - CountryGroup
	GetCountries(ctx context.Context, countryGroup CountryGroup) (r []string, err error)
	// Parameters:
	//  - GetFollowingsRequest
	GetFollowings(ctx context.Context, getFollowingsRequest *GetFollowingsRequest) (r *GetFollowingsResponse, err error)
	GetLastOpRevision(ctx context.Context) (r int64, err error)
	GetRingbackTone(ctx context.Context) (r int64, err error)
	// Parameters:
	//  - SessionId
	//  - MigrationPincodeSessionId
	RegisterWithPhoneNumber(ctx context.Context, sessionId string, migrationPincodeSessionId string) (r *RegisterWithPhoneNumberResult_, err error)
	// Parameters:
	//  - SyncOpRevision
	//  - Category
	//  - Report
	Report(ctx context.Context, syncOpRevision int64, category ReportCategory, report string) (err error)
	// Parameters:
	//  - ReqSeq
	//  - ID
	UnblockRecommendation(ctx context.Context, reqSeq int32, id string) (err error)
	// Parameters:
	//  - ReqSeq
	//  - Group
	UpdateGroup(ctx context.Context, reqSeq int32, group *Group) (err error)
	// Parameters:
	//  - Language
	//  - Country
	//  - Query
	//  - FromIndex
	//  - Count
	//  - RequestSource
	FindBuddyContactsByQuery(ctx context.Context, language string, country string, query string, fromIndex int32, count int32, requestSource RequestsSource) (r []*BuddySearchResult_, err error)
	// Parameters:
	//  - Language
	GetPaidCallMetadata(ctx context.Context, language string) (r *PaidCallMetadataResult_, err error)
	// Parameters:
	//  - ReqSeq
	//  - ID
	BlockRecommendation(ctx context.Context, reqSeq int32, id string) (err error)
	// Parameters:
	//  - ReqSeq
	//  - SearchId
	//  - Reference
	FindAndAddContactsByUserid(ctx context.Context, reqSeq int32, searchId string, reference string) (r map[string]*Contact, err error)
	// Parameters:
	//  - Request
	//  - SyncReason
	GetAllChatMids(ctx context.Context, request *GetAllChatMidsRequest, syncReason SyncReason) (r *GetAllChatMidsResponse, err error)
	// Parameters:
	//  - ChatRoomMids
	GetChatRoomAnnouncements(ctx context.Context, chatRoomMids string) (r []*ChatRoomAnnouncement, err error)
	GetCountryWithRequestIp(ctx context.Context) (r string, err error)
	// Parameters:
	//  - Direction
	//  - LastSeenSeqId
	GetFriendRequests(ctx context.Context, direction Direction, lastSeenSeqId int64) (r []*FriendRequest, err error)
	GetRingtone(ctx context.Context) (r *Ringtone, err error)
	// Parameters:
	//  - ReqSeq
	//  - Profile
	UpdateProfile(ctx context.Context, reqSeq int32, profile *Profile) (err error)
	// Parameters:
	//  - LastRev
	//  - Badge
	NotifySleep(ctx context.Context, lastRev int64, badge int32) (err error)
	// Parameters:
	//  - SnsIdType
	//  - SnsAccessToken
	//  - IdentityCredential
	//  - Region
	//  - UdidHash
	//  - DeviceInfo
	//  - MigrationPincodeSessionId
	RegisterWithSnsIdAndIdentityCredential(ctx context.Context, snsIdType SnSIdTyoe, snsAccessToken string, identityCredential *IdentityCredential, region string, udidHash string, deviceInfo *DeviceInfo, migrationPincodeSessionId string) (r string, err error)
	// Parameters:
	//  - RemoveFollowerRequest
	RemoveFollower(ctx context.Context, removeFollowerRequest *RemoveFollowerRequest) (err error)
	// Parameters:
	//  - Provider
	//  - Identifier
	//  - Locale
	RequestAccountPasswordReset(ctx context.Context, provider Provider, identifier string, locale string) (err error)
	// Parameters:
	//  - Text
	SendEchoPush(ctx context.Context, text string) (err error)
	// Parameters:
	//  - UnfollowRequest
	Unfollow(ctx context.Context, unfollowRequest *UnfollowRequest) (err error)
	// Parameters:
	//  - ChatMid
	//  - MemberMids
	//  - MediaType
	InviteIntoGroupCall(ctx context.Context, chatMid string, memberMids []string, mediaType MediaType) (err error)
	// Parameters:
	//  - Request
	CancelChatInvitation(ctx context.Context, request *CancelChatInvitationRequest) (r *CancelChatInvitationResponse, err error)
	// Parameters:
	//  - Request
	FindChatByTicket(ctx context.Context, request *FindChatByTicketRequest) (r *FindChatByTicketResponse, err error)
	// Parameters:
	//  - SyncReason
	GetAllContactIds(ctx context.Context, syncReason SyncReason) (r []string, err error)
	// Parameters:
	//  - ChatRoomMids
	//  - SyncReason
	GetChatRoomBGMs(ctx context.Context, chatRoomMids []string, syncReason SyncReason) (r map[string]*ChatRoomBGM, err error)
	// Parameters:
	//  - KeyVersion
	//  - ChatMid
	//  - GroupKeyId
	GetE2EEGroupSharedKey(ctx context.Context, keyVersion int32, chatMid string, groupKeyId int32) (r *E2EEGroupSharedKey, err error)
	// Parameters:
	//  - SyncReason
	GetGroupIdsInvited(ctx context.Context, syncReason SyncReason) (r []string, err error)
	// Parameters:
	//  - SyncReason
	GetProfile(ctx context.Context, syncReason SyncReason) (r *Profile, err error)
	// Parameters:
	//  - LastRev
	//  - DeviceInfo
	//  - UdidHash
	//  - OldUdidHash
	NotifyUpdated(ctx context.Context, lastRev int64, deviceInfo *DeviceInfo, udidHash string, oldUdidHash string) (err error)
	// Parameters:
	//  - SnsIdType
	//  - SnsAccessToken
	//  - Region
	//  - UdidHash
	//  - DeviceInfo
	//  - Mid
	//  - MigrationPincodeSessionId
	RegisterWithSnsId(ctx context.Context, snsIdType SnSIdTyoe, snsAccessToken string, region string, udidHash string, deviceInfo *DeviceInfo, mid string, migrationPincodeSessionId string) (r *RegisterWithSnsIdResult_, err error)
	// Parameters:
	//  - Direction
	//  - MidOrEMid
	RemoveFriendRequest(ctx context.Context, direction Direction, midOrEMid string) (err error)
	// Parameters:
	//  - Request
	OpenAuthSession(ctx context.Context, request *AuthSessionRequest) (r string, err error)
	// Parameters:
	//  - Verifier
	//  - PinCode
	//  - ErrorCode
	//  - PublicKey
	//  - EncryptedKeyChain
	//  - HashKeyChain
	VerifyQrcodeWithE2EE(ctx context.Context, verifier string, pinCode string, errorCode ErrorCode, publicKey *E2EEPublicKey, encryptedKeyChain []byte, hashKeyChain []byte) (r string, err error)
	// Parameters:
	//  - Request
	GetBalance(ctx context.Context, request *GetBalanceRequest) (r *GetBalanceResponse, err error)
	UnregisterUserAndDevice(ctx context.Context) (r string, err error)
	// Parameters:
	//  - Type
	//  - Token
	UpdateNotificationToken(ctx context.Context, type_a1 UpdateNotificationType, token string) (err error)
	// Parameters:
	//  - SessionId
	//  - PinCode
	//  - UdidHash
	//  - MigrationPincodeSessionId
	//  - OldUdidHash
	VerifyPhoneNumber(ctx context.Context, sessionId string, pinCode string, udidHash string, migrationPincodeSessionId string, oldUdidHash string) (r *PhoneVerificationResult_, err error)
	// Parameters:
	//  - ReqSeq
	//  - GroupId
	//  - ContactIds
	CancelGroupInvitation(ctx context.Context, reqSeq int32, groupId string, contactIds []string) (err error)
	// Parameters:
	//  - ReqSeq
	//  - ContactIds
	CreateRoomV2(ctx context.Context, reqSeq int32, contactIds []string) (r *Room, err error)
	// Parameters:
	//  - SearchId
	//  - Reference
	FindContactByMetaTag(ctx context.Context, searchId string, reference string) (r *Contact, err error)
	// Parameters:
	//  - Request
	GetChats(ctx context.Context, request *GetChatsRequest) (r *GetChatsResponse, err error)
	// Parameters:
	//  - SyncReason
	GetGroupIdsJoined(ctx context.Context, syncReason SyncReason) (r []string, err error)
	// Parameters:
	//  - RoomIds
	GetRoomsV2(ctx context.Context, roomIds []string) (r []*Room, err error)
	// Parameters:
	//  - Request
	ReissueChatTicket(ctx context.Context, request *ReissueChatTicketRequest) (r *ReissueChatTicketResponse, err error)
	// Parameters:
	//  - Seq
	//  - Message
	SendMessage(ctx context.Context, seq int32, message *Message) (r *Message, err error)
	// Parameters:
	//  - Seq
	//  - MessageId
	UnsendMessage(ctx context.Context, seq int32, messageId string) (err error)
	// Parameters:
	//  - ChatMid
	//  - MediaType
	//  - IsInitialHost
	//  - Capabilities
	AcquireGroupCallRoute(ctx context.Context, chatMid string, mediaType MediaType, isInitialHost bool, capabilities []string) (r *GroupCallRoute, err error)
	// Parameters:
	//  - Request
	AcceptChatInvitationByTicket(ctx context.Context, request *AcceptChatInvitationByTicketRequest) (r *AcceptChatInvitationByTicketResponse, err error)
	// Parameters:
	//  - TicketIdWithTag
	FindContactByUserTicket(ctx context.Context, ticketIdWithTag string) (r *Contact, err error)
	// Parameters:
	//  - Mid
	//  - KeyVersion
	//  - KeyId
	GetE2EEPublicKey(ctx context.Context, mid string, keyVersion int32, keyId int32) (r []*E2EEPublicKey, err error)
	// Parameters:
	//  - SessionId
	//  - Provider
	//  - Identifier
	//  - Verifier
	//  - MigrationPincodeSessionId
	RegisterDeviceWithIdentityCredential(ctx context.Context, sessionId string, provider Provider, identifier string, verifier string, migrationPincodeSessionId string) (r string, err error)
	// Parameters:
	//  - GroupMid
	ReissueGroupTicket(ctx context.Context, groupMid string) (r string, err error)
	// Parameters:
	//  - ReqSeq
	//  - Request
	UpdateProfileAttributes(ctx context.Context, reqSeq int32, request *UpdateProfileAttributesRequest) (err error)
	// Parameters:
	//  - Verifier
	//  - PinCode
	VerifyQrcode(ctx context.Context, verifier string, pinCode string) (r string, err error)
	// Parameters:
	//  - Request
	AcceptChatInvitation(ctx context.Context, request *AcceptChatInvitationRequest) (r *AcceptChatInvitationResponse, err error)
	// Parameters:
	//  - EMid
	DecryptFollowEMid(ctx context.Context, eMid string) (r string, err error)
	// Parameters:
	//  - SearchId
	FindContactByUserid(ctx context.Context, searchId string) (r *Contact, err error)
	GetServerTime(ctx context.Context) (r int64, err error)
	// Parameters:
	//  - Request
	InviteIntoChat(ctx context.Context, request *InviteIntoChatRequest) (r *InviteIntoChatResponse, err error)
	// Parameters:
	//  - ClientRevision
	WakeUpLongPolling(ctx context.Context, clientRevision int64) (r bool, err error)
	// Parameters:
	//  - ReqSeq
	//  - GroupMid
	//  - TicketId
	AcceptGroupInvitationByTicket(ctx context.Context, reqSeq int32, groupMid string, ticketId string) (err error)
	// Parameters:
	//  - Request
	DeleteOtherFromChat(ctx context.Context, request *DeleteOtherFromChatRequest) (r *DeleteOtherFromChatResponse, err error)
	// Parameters:
	//  - Phones
	FindContactsByPhone(ctx context.Context, phones []string) (r map[string]*Contact, err error)
	// Parameters:
	//  - GroupId
	GetGroupsV2(ctx context.Context, groupId []string) (r []*Group, err error)
	// Parameters:
	//  - GroupId
	GetGroups(ctx context.Context, groupId []string) (r []*Group, err error)
	// Parameters:
	//  - GroupId
	GetGroup(ctx context.Context, groupId string) (r *Group, err error)
	// Parameters:
	//  - GroupId
	GetCompactGroup(ctx context.Context, groupId string) (r *Group, err error)
	// Parameters:
	//  - GroupId
	GetGroupWithoutMembers(ctx context.Context, groupId string) (r *Group, err error)
	// Parameters:
	//  - ReqSeq
	//  - GroupId
	//  - ContactIds
	InviteIntoGroup(ctx context.Context, reqSeq int32, groupId string, contactIds []string) (err error)
	// Parameters:
	//  - ReqSeq
	//  - GroupId
	AcceptGroupInvitation(ctx context.Context, reqSeq int32, groupId string) (err error)
	// Parameters:
	//  - ChatIds
	//  - SyncReason
	GetMessageReadRange(ctx context.Context, chatIds []string, syncReason SyncReason) (r []*TMessageReadRange, err error)
	// Parameters:
	//  - Request
	DeleteSelfFromChat(ctx context.Context, request *DeleteSelfFromChatRequest) (r *DeleteSelfFromChatResponse, err error)
	// Parameters:
	//  - SyncReason
	GetBlockedContactIds(ctx context.Context, syncReason SyncReason) (r []string, err error)
	// Parameters:
	//  - AttributesToRetrieve
	GetSettingsAttributes2(ctx context.Context, attributesToRetrieve []SettingsAttributes) (r *Settings, err error)
	// Parameters:
	//  - ReqSeq
	//  - RoomId
	//  - ContactIds
	InviteIntoRoom(ctx context.Context, reqSeq int32, roomId string, contactIds []string) (err error)
	// Parameters:
	//  - Request
	RejectChatInvitation(ctx context.Context, request *RejectChatInvitationRequest) (r *RejectChatInvitationResponse, err error)
	// Parameters:
	//  - SyncReason
	GetBlockedRecommendationIds(ctx context.Context, syncReason SyncReason) (r []string, err error)
	// Parameters:
	//  - ReqSeq
	//  - ChatRoomMid
	//  - ChatRoomBGMInfo
	UpdateChatRoomBGM(ctx context.Context, reqSeq int32, chatRoomMid string, chatRoomBGMInfo string) (r *ChatRoomBGM, err error)
	// Parameters:
	//  - TicketId
	FindGroupByTicket(ctx context.Context, ticketId string) (r *Group, err error)
	// Parameters:
	//  - SyncReason
	GetRecentFriendRequests(ctx context.Context, syncReason SyncReason) (r *FriendRequestsInfo, err error)
	// Parameters:
	//  - AttrBitset
	GetSettingsAttributes(ctx context.Context, attrBitset int32) (r *Settings, err error)
	// Parameters:
	//  - ReqSeq
	//  - GroupId
	RejectGroupInvitation(ctx context.Context, reqSeq int32, groupId string) (err error)
	// Parameters:
	//  - Request
	UpdateChat(ctx context.Context, request *UpdateChatRequest) (r *UpdateChatResponse, err error)
	// Parameters:
	//  - ReqSeq
	//  - AttributesToUpdate
	//  - Settings
	UpdateSettingsAttributes2(ctx context.Context, reqSeq int32, attributesToUpdate []SettingsAttributes, settings *Settings) (r []SettingsAttributes, err error)
	// Parameters:
	//  - ID
	//  - Type
	GetContactRegistration(ctx context.Context, id string, type_a1 MIDType) (r *ContactRegistration, err error)
	// Parameters:
	//  - SyncReason
	GetSettings(ctx context.Context, syncReason SyncReason) (r *Settings, err error)
	Noop(ctx context.Context) (err error)
	// Parameters:
	//  - Seq
	//  - LastMessageId
	RemoveAllMessages(ctx context.Context, seq int32, lastMessageId string) (err error)
	// Parameters:
	//  - ReqSeq
	//  - Mid
	//  - Flag
	//  - Value
	UpdateContactSetting(ctx context.Context, reqSeq int32, mid string, flag ContactFlag, value string) (err error)
	// Parameters:
	//  - ChatMid
	GetGroupCall(ctx context.Context, chatMid string) (r *GroupCall, err error)
	// Parameters:
	//  - LocalRev
	//  - Count
	//  - GlobalRev
	//  - IndividualRev
	FetchOps(ctx context.Context, localRev int64, count int32, globalRev int64, individualRev int64) (r []*Operation, err error)
	// Parameters:
	//  - LocalRev
	//  - Count
	FetchOperations(ctx context.Context, localRev int64, count int32) (r []*Operation, err error)
	// Parameters:
	//  - ReqSeq
	//  - GroupId
	//  - ContactIds
	KickoutFromGroup(ctx context.Context, reqSeq int32, groupId string, contactIds []string) (err error)
	// Parameters:
	//  - SyncReason
	GetExtendedProfile(ctx context.Context, syncReason SyncReason) (r *ExtendedProfile, err error)
	// Parameters:
	//  - FeatureType
	AcquireEncryptedAccessToken(ctx context.Context, featureType FeatureType) (r string, err error)
	// Parameters:
	//  - ReqSeq
	//  - ChatRoomMid
	//  - Type
	//  - Contents
	CreateChatRoomAnnouncement(ctx context.Context, reqSeq int32, chatRoomMid string, type_a1 ChatRoomAnnouncementType, contents *ChatRoomAnnouncementContents) (r *ChatRoomAnnouncement, err error)
	// Parameters:
	//  - ReqSeq
	//  - SearchId
	//  - Reference
	FindAndAddContactByMetaTag(ctx context.Context, reqSeq int32, searchId string, reference string) (r *Contact, err error)
	// Parameters:
	//  - FollowRequest
	Follow(ctx context.Context, followRequest *FollowRequest) (err error)
	// Parameters:
	//  - ID
	GetContact(ctx context.Context, id string) (r *Contact, err error)
	// Parameters:
	//  - ReqSeq
	//  - GroupId
	LeaveGroup(ctx context.Context, reqSeq int32, groupId string) (err error)
	// Parameters:
	//  - Seq
	//  - ChatMid
	//  - LastMessageId
	//  - SessionId
	SendChatChecked(ctx context.Context, seq int32, chatMid string, lastMessageId string, sessionId int8) (err error)
	// Parameters:
	//  - AuthSessionId
	//  - Request
	UpdateIdentifier(ctx context.Context, authSessionId string, request *IdentityCredentialRequest) (r *IdentityCredentialResponse, err error)
}

type TalkServiceClient struct {
	c thrift.TClient
}

func NewTalkServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TalkServiceClient {
	return &TalkServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewTalkServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TalkServiceClient {
	return &TalkServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewTalkServiceClient(c thrift.TClient) *TalkServiceClient {
	return &TalkServiceClient{
		c: c,
	}
}

func (p *TalkServiceClient) Client_() thrift.TClient {
	return p.c
}

// Parameters:
//  - MidOrEMid
//  - Method
//  - FriendRequestParams
func (p *TalkServiceClient) TryFriendRequest(ctx context.Context, midOrEMid string, method Method_, friendRequestParams string) (err error) {
	var _args59 TalkServiceTryFriendRequestArgs
	_args59.MidOrEMid = midOrEMid
	_args59.Method = method
	_args59.FriendRequestParams = friendRequestParams
	var _result60 TalkServiceTryFriendRequestResult
	if err = p.Client_().Call(ctx, "tryFriendRequest", &_args59, &_result60); err != nil {
		return
	}
	switch {
	case _result60.E != nil:
		return _result60.E
	}

	return nil
}

// Parameters:
//  - ReqSeq
//  - Attr
//  - ExtendedProfile
func (p *TalkServiceClient) UpdateExtendedProfileAttribute(ctx context.Context, reqSeq int32, attr UpdateExtendedProfileAttributeAttr, extendedProfile *ExtendedProfile) (err error) {
	var _args61 TalkServiceUpdateExtendedProfileAttributeArgs
	_args61.ReqSeq = reqSeq
	_args61.Attr = attr
	_args61.ExtendedProfile = extendedProfile
	var _result62 TalkServiceUpdateExtendedProfileAttributeResult
	if err = p.Client_().Call(ctx, "updateExtendedProfileAttribute", &_args61, &_result62); err != nil {
		return
	}
	switch {
	case _result62.E != nil:
		return _result62.E
	}

	return nil
}

// Parameters:
//  - MigrationSessionId
func (p *TalkServiceClient) VerifyAccountMigration(ctx context.Context, migrationSessionId string) (err error) {
	var _args63 TalkServiceVerifyAccountMigrationArgs
	_args63.MigrationSessionId = migrationSessionId
	var _result64 TalkServiceVerifyAccountMigrationResult
	if err = p.Client_().Call(ctx, "verifyAccountMigration", &_args63, &_result64); err != nil {
		return
	}
	switch {
	case _result64.E != nil:
		return _result64.E
	}

	return nil
}

// Parameters:
//  - Location
//  - Trigger
//  - NetworkStatus
func (p *TalkServiceClient) ReportLocation(ctx context.Context, location *Geolocation, trigger Trigger, networkStatus *ClientNetworkStatus) (err error) {
	var _args65 TalkServiceReportLocationArgs
	_args65.Location = location
	_args65.Trigger = trigger
	_args65.NetworkStatus = networkStatus
	var _result66 TalkServiceReportLocationResult
	if err = p.Client_().Call(ctx, "reportLocation", &_args65, &_result66); err != nil {
		return
	}
	switch {
	case _result66.E != nil:
		return _result66.E
	}

	return nil
}

// Parameters:
//  - Language
func (p *TalkServiceClient) GetPaidCallBalanceList(ctx context.Context, language string) (r []*PaidCallBalance, err error) {
	var _args67 TalkServiceGetPaidCallBalanceListArgs
	_args67.Language = language
	var _result68 TalkServiceGetPaidCallBalanceListResult
	if err = p.Client_().Call(ctx, "getPaidCallBalanceList", &_args67, &_result68); err != nil {
		return
	}
	switch {
	case _result68.E != nil:
		return r, _result68.E
	}

	return _result68.GetSuccess(), nil
}

// Parameters:
//  - Requests
func (p *TalkServiceClient) CreateChat(ctx context.Context, requests *CreateChatRequest) (r *CreateChatResponse, err error) {
	var _args69 TalkServiceCreateChatArgs
	_args69.Requests = requests
	var _result70 TalkServiceCreateChatResult
	if err = p.Client_().Call(ctx, "createChat", &_args69, &_result70); err != nil {
		return
	}
	switch {
	case _result70.E != nil:
		return r, _result70.E
	}

	return _result70.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - Mid
//  - Type
//  - Reference
func (p *TalkServiceClient) FindAndAddContactsByMid(ctx context.Context, reqSeq int32, mid string, type_a1 MIDType, reference string) (r map[string]*Contact, err error) {
	var _args71 TalkServiceFindAndAddContactsByMidArgs
	_args71.ReqSeq = reqSeq
	_args71.Mid = mid
	_args71.Type = type_a1
	_args71.Reference = reference
	var _result72 TalkServiceFindAndAddContactsByMidResult
	if err = p.Client_().Call(ctx, "findAndAddContactsByMid", &_args71, &_result72); err != nil {
		return
	}
	switch {
	case _result72.E != nil:
		return r, _result72.E
	}

	return _result72.GetSuccess(), nil
}

// Parameters:
//  - ExpirationTime
//  - MaxUseCount
func (p *TalkServiceClient) GenerateUserTicket(ctx context.Context, expirationTime int64, maxUseCount int32) (r *Ticket, err error) {
	var _args73 TalkServiceGenerateUserTicketArgs
	_args73.ExpirationTime = expirationTime
	_args73.MaxUseCount = maxUseCount
	var _result74 TalkServiceGenerateUserTicketResult
	if err = p.Client_().Call(ctx, "generateUserTicket", &_args73, &_result74); err != nil {
		return
	}
	switch {
	case _result74.E != nil:
		return r, _result74.E
	}

	return _result74.GetSuccess(), nil
}

// Parameters:
//  - Ids
func (p *TalkServiceClient) GetContacts(ctx context.Context, ids []string) (r []*Contact, err error) {
	var _args75 TalkServiceGetContactsArgs
	_args75.Ids = ids
	var _result76 TalkServiceGetContactsResult
	if err = p.Client_().Call(ctx, "getContacts", &_args75, &_result76); err != nil {
		return
	}
	switch {
	case _result76.E != nil:
		return r, _result76.E
	}

	return _result76.GetSuccess(), nil
}

// Parameters:
//  - GetFollowersRequest
func (p *TalkServiceClient) GetFollowers(ctx context.Context, getFollowersRequest *GetFollowersRequest) (r *GetFollowersResponse, err error) {
	var _args77 TalkServiceGetFollowersArgs
	_args77.GetFollowersRequest = getFollowersRequest
	var _result78 TalkServiceGetFollowersResult
	if err = p.Client_().Call(ctx, "getFollowers", &_args77, &_result78); err != nil {
		return
	}
	switch {
	case _result78.E != nil:
		return r, _result78.E
	}

	return _result78.GetSuccess(), nil
}

// Parameters:
//  - ChatMid
func (p *TalkServiceClient) GetLastE2EEPublicKeys(ctx context.Context, chatMid string) (r map[string]*E2EEPublicKey, err error) {
	var _args79 TalkServiceGetLastE2EEPublicKeysArgs
	_args79.ChatMid = chatMid
	var _result80 TalkServiceGetLastE2EEPublicKeysResult
	if err = p.Client_().Call(ctx, "getLastE2EEPublicKeys", &_args79, &_result80); err != nil {
		return
	}
	switch {
	case _result80.E != nil:
		return r, _result80.E
	}

	return _result80.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - RoomId
func (p *TalkServiceClient) LeaveRoom(ctx context.Context, reqSeq int32, roomId string) (err error) {
	var _args81 TalkServiceLeaveRoomArgs
	_args81.ReqSeq = reqSeq
	_args81.RoomId = roomId
	var _result82 TalkServiceLeaveRoomResult
	if err = p.Client_().Call(ctx, "leaveRoom", &_args81, &_result82); err != nil {
		return
	}
	switch {
	case _result82.E != nil:
		return _result82.E
	}

	return nil
}

// Parameters:
//  - UdidHash
//  - ApplicationTypeWithExtensions
func (p *TalkServiceClient) NotifyRegistrationComplete(ctx context.Context, udidHash string, applicationTypeWithExtensions string) (err error) {
	var _args83 TalkServiceNotifyRegistrationCompleteArgs
	_args83.UdidHash = udidHash
	_args83.ApplicationTypeWithExtensions = applicationTypeWithExtensions
	var _result84 TalkServiceNotifyRegistrationCompleteResult
	if err = p.Client_().Call(ctx, "notifyRegistrationComplete", &_args83, &_result84); err != nil {
		return
	}
	switch {
	case _result84.E != nil:
		return _result84.E
	}

	return nil
}

// Parameters:
//  - ReqSeq
//  - ChatRoomMid
//  - AnnouncementSeq
func (p *TalkServiceClient) RemoveChatRoomAnnouncement(ctx context.Context, reqSeq int32, chatRoomMid string, announcementSeq int64) (err error) {
	var _args85 TalkServiceRemoveChatRoomAnnouncementArgs
	_args85.ReqSeq = reqSeq
	_args85.ChatRoomMid = chatRoomMid
	_args85.AnnouncementSeq = announcementSeq
	var _result86 TalkServiceRemoveChatRoomAnnouncementResult
	if err = p.Client_().Call(ctx, "removeChatRoomAnnouncement", &_args85, &_result86); err != nil {
		return
	}
	switch {
	case _result86.E != nil:
		return _result86.E
	}

	return nil
}

// Parameters:
//  - Seq
//  - ChatMid
//  - LastMessageId
//  - SessionId
func (p *TalkServiceClient) SendChatRemoved(ctx context.Context, seq int32, chatMid string, lastMessageId string, sessionId int8) (err error) {
	var _args87 TalkServiceSendChatRemovedArgs
	_args87.Seq = seq
	_args87.ChatMid = chatMid
	_args87.LastMessageId = lastMessageId
	_args87.SessionId = sessionId
	var _result88 TalkServiceSendChatRemovedResult
	if err = p.Client_().Call(ctx, "sendChatRemoved", &_args87, &_result88); err != nil {
		return
	}
	switch {
	case _result88.E != nil:
		return _result88.E
	}

	return nil
}

// Parameters:
//  - AuthSessionId
//  - Request
func (p *TalkServiceClient) UpdatePassword(ctx context.Context, authSessionId string, request *IdentityCredentialRequest) (r *IdentityCredentialResponse, err error) {
	var _args89 TalkServiceUpdatePasswordArgs
	_args89.AuthSessionId = authSessionId
	_args89.Request = request
	var _result90 TalkServiceUpdatePasswordResult
	if err = p.Client_().Call(ctx, "updatePassword", &_args89, &_result90); err != nil {
		return
	}
	switch {
	case _result90.E != nil:
		return r, _result90.E
	}

	return _result90.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - ID
//  - Reference
func (p *TalkServiceClient) UnblockContact(ctx context.Context, reqSeq int32, id string, reference string) (err error) {
	var _args91 TalkServiceUnblockContactArgs
	_args91.ReqSeq = reqSeq
	_args91.ID = id
	_args91.Reference = reference
	var _result92 TalkServiceUnblockContactResult
	if err = p.Client_().Call(ctx, "unblockContact", &_args91, &_result92); err != nil {
		return
	}
	switch {
	case _result92.E != nil:
		return _result92.E
	}

	return nil
}

// Parameters:
//  - IdentityCredential
//  - MigrationPincodeSessionId
func (p *TalkServiceClient) VerifyIdentityCredentialWithResult_(ctx context.Context, identityCredential *IdentityCredential, migrationPincodeSessionId string) (r *UserAuthStatus, err error) {
	var _args93 TalkServiceVerifyIdentityCredentialWithResultArgs
	_args93.IdentityCredential = identityCredential
	_args93.MigrationPincodeSessionId = migrationPincodeSessionId
	var _result94 TalkServiceVerifyIdentityCredentialWithResultResult
	if err = p.Client_().Call(ctx, "verifyIdentityCredentialWithResult", &_args93, &_result94); err != nil {
		return
	}
	switch {
	case _result94.E != nil:
		return r, _result94.E
	}

	return _result94.GetSuccess(), nil
}

// Parameters:
//  - DataTypes
func (p *TalkServiceClient) RequestCleanupUserProvidedData(ctx context.Context, dataTypes []DataTypes) (err error) {
	var _args95 TalkServiceRequestCleanupUserProvidedDataArgs
	_args95.DataTypes = dataTypes
	var _result96 TalkServiceRequestCleanupUserProvidedDataResult
	if err = p.Client_().Call(ctx, "requestCleanupUserProvidedData", &_args95, &_result96); err != nil {
		return
	}
	switch {
	case _result96.E != nil:
		return _result96.E
	}

	return nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) GetBuddyStatusBarV2(ctx context.Context, request *GetBuddyStatusBarV2Request) (r *BuddyStatusBar, err error) {
	var _args97 TalkServiceGetBuddyStatusBarV2Args
	_args97.Request = request
	var _result98 TalkServiceGetBuddyStatusBarV2Result
	if err = p.Client_().Call(ctx, "getBuddyStatusBarV2", &_args97, &_result98); err != nil {
		return
	}
	switch {
	case _result98.E != nil:
		return r, _result98.E
	}

	return _result98.GetSuccess(), nil
}

// Parameters:
//  - Start
//  - Size
//  - Language
func (p *TalkServiceClient) GetPaidCallHistory(ctx context.Context, start int64, size int32, language string) (r *PaidCallHistoryResult_, err error) {
	var _args99 TalkServiceGetPaidCallHistoryArgs
	_args99.Start = start
	_args99.Size = size
	_args99.Language = language
	var _result100 TalkServiceGetPaidCallHistoryResult
	if err = p.Client_().Call(ctx, "getPaidCallHistory", &_args99, &_result100); err != nil {
		return
	}
	switch {
	case _result100.E != nil:
		return r, _result100.E
	}

	return _result100.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - ID
func (p *TalkServiceClient) BlockContact(ctx context.Context, reqSeq int32, id string) (err error) {
	var _args101 TalkServiceBlockContactArgs
	_args101.ReqSeq = reqSeq
	_args101.ID = id
	var _result102 TalkServiceBlockContactResult
	if err = p.Client_().Call(ctx, "blockContact", &_args101, &_result102); err != nil {
		return
	}
	switch {
	case _result102.E != nil:
		return _result102.E
	}

	return nil
}

// Parameters:
//  - Seq
//  - Name
//  - ContactIds
func (p *TalkServiceClient) CreateGroupV2(ctx context.Context, seq int32, name string, contactIds []string) (r *Group, err error) {
	var _args103 TalkServiceCreateGroupV2Args
	_args103.Seq = seq
	_args103.Name = name
	_args103.ContactIds = contactIds
	var _result104 TalkServiceCreateGroupV2Result
	if err = p.Client_().Call(ctx, "createGroupV2", &_args103, &_result104); err != nil {
		return
	}
	switch {
	case _result104.E != nil:
		return r, _result104.E
	}

	return _result104.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - Phones
//  - Reference
func (p *TalkServiceClient) FindAndAddContactsByPhone(ctx context.Context, reqSeq int32, phones []string, reference string) (r map[string]*Contact, err error) {
	var _args105 TalkServiceFindAndAddContactsByPhoneArgs
	_args105.ReqSeq = reqSeq
	_args105.Phones = phones
	_args105.Reference = reference
	var _result106 TalkServiceFindAndAddContactsByPhoneResult
	if err = p.Client_().Call(ctx, "findAndAddContactsByPhone", &_args105, &_result106); err != nil {
		return
	}
	switch {
	case _result106.E != nil:
		return r, _result106.E
	}

	return _result106.GetSuccess(), nil
}

// Parameters:
//  - SessionId
func (p *TalkServiceClient) GetAcceptedProximityMatches(ctx context.Context, sessionId string) (r []string, err error) {
	var _args107 TalkServiceGetAcceptedProximityMatchesArgs
	_args107.SessionId = sessionId
	var _result108 TalkServiceGetAcceptedProximityMatchesResult
	if err = p.Client_().Call(ctx, "getAcceptedProximityMatches", &_args107, &_result108); err != nil {
		return
	}
	switch {
	case _result108.E != nil:
		return r, _result108.E
	}

	return _result108.GetSuccess(), nil
}

// Parameters:
//  - ChatRoomMids
//  - SyncReason
func (p *TalkServiceClient) GetChatRoomAnnouncementsBulk(ctx context.Context, chatRoomMids []string, syncReason SyncReason) (r map[string][]*ChatRoomAnnouncement, err error) {
	var _args109 TalkServiceGetChatRoomAnnouncementsBulkArgs
	_args109.ChatRoomMids = chatRoomMids
	_args109.SyncReason = syncReason
	var _result110 TalkServiceGetChatRoomAnnouncementsBulkResult
	if err = p.Client_().Call(ctx, "getChatRoomAnnouncementsBulk", &_args109, &_result110); err != nil {
		return
	}
	switch {
	case _result110.E != nil:
		return r, _result110.E
	}

	return _result110.GetSuccess(), nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetRecommendationIds(ctx context.Context, syncReason SyncReason) (r []string, err error) {
	var _args111 TalkServiceGetRecommendationIdsArgs
	_args111.SyncReason = syncReason
	var _result112 TalkServiceGetRecommendationIdsResult
	if err = p.Client_().Call(ctx, "getRecommendationIds", &_args111, &_result112); err != nil {
		return
	}
	switch {
	case _result112.E != nil:
		return r, _result112.E
	}

	return _result112.GetSuccess(), nil
}

// Parameters:
//  - CountryGroup
func (p *TalkServiceClient) GetCountries(ctx context.Context, countryGroup CountryGroup) (r []string, err error) {
	var _args113 TalkServiceGetCountriesArgs
	_args113.CountryGroup = countryGroup
	var _result114 TalkServiceGetCountriesResult
	if err = p.Client_().Call(ctx, "getCountries", &_args113, &_result114); err != nil {
		return
	}
	switch {
	case _result114.E != nil:
		return r, _result114.E
	}

	return _result114.GetSuccess(), nil
}

// Parameters:
//  - GetFollowingsRequest
func (p *TalkServiceClient) GetFollowings(ctx context.Context, getFollowingsRequest *GetFollowingsRequest) (r *GetFollowingsResponse, err error) {
	var _args115 TalkServiceGetFollowingsArgs
	_args115.GetFollowingsRequest = getFollowingsRequest
	var _result116 TalkServiceGetFollowingsResult
	if err = p.Client_().Call(ctx, "getFollowings", &_args115, &_result116); err != nil {
		return
	}
	switch {
	case _result116.E != nil:
		return r, _result116.E
	}

	return _result116.GetSuccess(), nil
}

func (p *TalkServiceClient) GetLastOpRevision(ctx context.Context) (r int64, err error) {
	var _args117 TalkServiceGetLastOpRevisionArgs
	var _result118 TalkServiceGetLastOpRevisionResult
	if err = p.Client_().Call(ctx, "getLastOpRevision", &_args117, &_result118); err != nil {
		return
	}
	switch {
	case _result118.E != nil:
		return r, _result118.E
	}

	return _result118.GetSuccess(), nil
}

func (p *TalkServiceClient) GetRingbackTone(ctx context.Context) (r int64, err error) {
	var _args119 TalkServiceGetRingbackToneArgs
	var _result120 TalkServiceGetRingbackToneResult
	if err = p.Client_().Call(ctx, "getRingbackTone", &_args119, &_result120); err != nil {
		return
	}
	switch {
	case _result120.E != nil:
		return r, _result120.E
	}

	return _result120.GetSuccess(), nil
}

// Parameters:
//  - SessionId
//  - MigrationPincodeSessionId
func (p *TalkServiceClient) RegisterWithPhoneNumber(ctx context.Context, sessionId string, migrationPincodeSessionId string) (r *RegisterWithPhoneNumberResult_, err error) {
	var _args121 TalkServiceRegisterWithPhoneNumberArgs
	_args121.SessionId = sessionId
	_args121.MigrationPincodeSessionId = migrationPincodeSessionId
	var _result122 TalkServiceRegisterWithPhoneNumberResult
	if err = p.Client_().Call(ctx, "registerWithPhoneNumber", &_args121, &_result122); err != nil {
		return
	}
	switch {
	case _result122.E != nil:
		return r, _result122.E
	}

	return _result122.GetSuccess(), nil
}

// Parameters:
//  - SyncOpRevision
//  - Category
//  - Report
func (p *TalkServiceClient) Report(ctx context.Context, syncOpRevision int64, category ReportCategory, report string) (err error) {
	var _args123 TalkServiceReportArgs
	_args123.SyncOpRevision = syncOpRevision
	_args123.Category = category
	_args123.Report = report
	var _result124 TalkServiceReportResult
	if err = p.Client_().Call(ctx, "report", &_args123, &_result124); err != nil {
		return
	}
	switch {
	case _result124.E != nil:
		return _result124.E
	}

	return nil
}

// Parameters:
//  - ReqSeq
//  - ID
func (p *TalkServiceClient) UnblockRecommendation(ctx context.Context, reqSeq int32, id string) (err error) {
	var _args125 TalkServiceUnblockRecommendationArgs
	_args125.ReqSeq = reqSeq
	_args125.ID = id
	var _result126 TalkServiceUnblockRecommendationResult
	if err = p.Client_().Call(ctx, "unblockRecommendation", &_args125, &_result126); err != nil {
		return
	}
	switch {
	case _result126.E != nil:
		return _result126.E
	}

	return nil
}

// Parameters:
//  - ReqSeq
//  - Group
func (p *TalkServiceClient) UpdateGroup(ctx context.Context, reqSeq int32, group *Group) (err error) {
	var _args127 TalkServiceUpdateGroupArgs
	_args127.ReqSeq = reqSeq
	_args127.Group = group
	var _result128 TalkServiceUpdateGroupResult
	if err = p.Client_().Call(ctx, "updateGroup", &_args127, &_result128); err != nil {
		return
	}
	switch {
	case _result128.E != nil:
		return _result128.E
	}

	return nil
}

// Parameters:
//  - Language
//  - Country
//  - Query
//  - FromIndex
//  - Count
//  - RequestSource
func (p *TalkServiceClient) FindBuddyContactsByQuery(ctx context.Context, language string, country string, query string, fromIndex int32, count int32, requestSource RequestsSource) (r []*BuddySearchResult_, err error) {
	var _args129 TalkServiceFindBuddyContactsByQueryArgs
	_args129.Language = language
	_args129.Country = country
	_args129.Query = query
	_args129.FromIndex = fromIndex
	_args129.Count = count
	_args129.RequestSource = requestSource
	var _result130 TalkServiceFindBuddyContactsByQueryResult
	if err = p.Client_().Call(ctx, "findBuddyContactsByQuery", &_args129, &_result130); err != nil {
		return
	}
	switch {
	case _result130.E != nil:
		return r, _result130.E
	}

	return _result130.GetSuccess(), nil
}

// Parameters:
//  - Language
func (p *TalkServiceClient) GetPaidCallMetadata(ctx context.Context, language string) (r *PaidCallMetadataResult_, err error) {
	var _args131 TalkServiceGetPaidCallMetadataArgs
	_args131.Language = language
	var _result132 TalkServiceGetPaidCallMetadataResult
	if err = p.Client_().Call(ctx, "getPaidCallMetadata", &_args131, &_result132); err != nil {
		return
	}
	switch {
	case _result132.E != nil:
		return r, _result132.E
	}

	return _result132.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - ID
func (p *TalkServiceClient) BlockRecommendation(ctx context.Context, reqSeq int32, id string) (err error) {
	var _args133 TalkServiceBlockRecommendationArgs
	_args133.ReqSeq = reqSeq
	_args133.ID = id
	var _result134 TalkServiceBlockRecommendationResult
	if err = p.Client_().Call(ctx, "blockRecommendation", &_args133, &_result134); err != nil {
		return
	}
	switch {
	case _result134.E != nil:
		return _result134.E
	}

	return nil
}

// Parameters:
//  - ReqSeq
//  - SearchId
//  - Reference
func (p *TalkServiceClient) FindAndAddContactsByUserid(ctx context.Context, reqSeq int32, searchId string, reference string) (r map[string]*Contact, err error) {
	var _args135 TalkServiceFindAndAddContactsByUseridArgs
	_args135.ReqSeq = reqSeq
	_args135.SearchId = searchId
	_args135.Reference = reference
	var _result136 TalkServiceFindAndAddContactsByUseridResult
	if err = p.Client_().Call(ctx, "findAndAddContactsByUserid", &_args135, &_result136); err != nil {
		return
	}
	switch {
	case _result136.E != nil:
		return r, _result136.E
	}

	return _result136.GetSuccess(), nil
}

// Parameters:
//  - Request
//  - SyncReason
func (p *TalkServiceClient) GetAllChatMids(ctx context.Context, request *GetAllChatMidsRequest, syncReason SyncReason) (r *GetAllChatMidsResponse, err error) {
	var _args137 TalkServiceGetAllChatMidsArgs
	_args137.Request = request
	_args137.SyncReason = syncReason
	var _result138 TalkServiceGetAllChatMidsResult
	if err = p.Client_().Call(ctx, "getAllChatMids", &_args137, &_result138); err != nil {
		return
	}
	switch {
	case _result138.E != nil:
		return r, _result138.E
	}

	return _result138.GetSuccess(), nil
}

// Parameters:
//  - ChatRoomMids
func (p *TalkServiceClient) GetChatRoomAnnouncements(ctx context.Context, chatRoomMids string) (r []*ChatRoomAnnouncement, err error) {
	var _args139 TalkServiceGetChatRoomAnnouncementsArgs
	_args139.ChatRoomMids = chatRoomMids
	var _result140 TalkServiceGetChatRoomAnnouncementsResult
	if err = p.Client_().Call(ctx, "getChatRoomAnnouncements", &_args139, &_result140); err != nil {
		return
	}
	switch {
	case _result140.E != nil:
		return r, _result140.E
	}

	return _result140.GetSuccess(), nil
}

func (p *TalkServiceClient) GetCountryWithRequestIp(ctx context.Context) (r string, err error) {
	var _args141 TalkServiceGetCountryWithRequestIpArgs
	var _result142 TalkServiceGetCountryWithRequestIpResult
	if err = p.Client_().Call(ctx, "getCountryWithRequestIp", &_args141, &_result142); err != nil {
		return
	}
	switch {
	case _result142.E != nil:
		return r, _result142.E
	}

	return _result142.GetSuccess(), nil
}

// Parameters:
//  - Direction
//  - LastSeenSeqId
func (p *TalkServiceClient) GetFriendRequests(ctx context.Context, direction Direction, lastSeenSeqId int64) (r []*FriendRequest, err error) {
	var _args143 TalkServiceGetFriendRequestsArgs
	_args143.Direction = direction
	_args143.LastSeenSeqId = lastSeenSeqId
	var _result144 TalkServiceGetFriendRequestsResult
	if err = p.Client_().Call(ctx, "getFriendRequests", &_args143, &_result144); err != nil {
		return
	}
	switch {
	case _result144.E != nil:
		return r, _result144.E
	}

	return _result144.GetSuccess(), nil
}

func (p *TalkServiceClient) GetRingtone(ctx context.Context) (r *Ringtone, err error) {
	var _args145 TalkServiceGetRingtoneArgs
	var _result146 TalkServiceGetRingtoneResult
	if err = p.Client_().Call(ctx, "getRingtone", &_args145, &_result146); err != nil {
		return
	}
	switch {
	case _result146.E != nil:
		return r, _result146.E
	}

	return _result146.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - Profile
func (p *TalkServiceClient) UpdateProfile(ctx context.Context, reqSeq int32, profile *Profile) (err error) {
	var _args147 TalkServiceUpdateProfileArgs
	_args147.ReqSeq = reqSeq
	_args147.Profile = profile
	var _result148 TalkServiceUpdateProfileResult
	if err = p.Client_().Call(ctx, "updateProfile", &_args147, &_result148); err != nil {
		return
	}
	switch {
	case _result148.E != nil:
		return _result148.E
	}

	return nil
}

// Parameters:
//  - LastRev
//  - Badge
func (p *TalkServiceClient) NotifySleep(ctx context.Context, lastRev int64, badge int32) (err error) {
	var _args149 TalkServiceNotifySleepArgs
	_args149.LastRev = lastRev
	_args149.Badge = badge
	var _result150 TalkServiceNotifySleepResult
	if err = p.Client_().Call(ctx, "notifySleep", &_args149, &_result150); err != nil {
		return
	}
	switch {
	case _result150.E != nil:
		return _result150.E
	}

	return nil
}

// Parameters:
//  - SnsIdType
//  - SnsAccessToken
//  - IdentityCredential
//  - Region
//  - UdidHash
//  - DeviceInfo
//  - MigrationPincodeSessionId
func (p *TalkServiceClient) RegisterWithSnsIdAndIdentityCredential(ctx context.Context, snsIdType SnSIdTyoe, snsAccessToken string, identityCredential *IdentityCredential, region string, udidHash string, deviceInfo *DeviceInfo, migrationPincodeSessionId string) (r string, err error) {
	var _args151 TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs
	_args151.SnsIdType = snsIdType
	_args151.SnsAccessToken = snsAccessToken
	_args151.IdentityCredential = identityCredential
	_args151.Region = region
	_args151.UdidHash = udidHash
	_args151.DeviceInfo = deviceInfo
	_args151.MigrationPincodeSessionId = migrationPincodeSessionId
	var _result152 TalkServiceRegisterWithSnsIdAndIdentityCredentialResult
	if err = p.Client_().Call(ctx, "registerWithSnsIdAndIdentityCredential", &_args151, &_result152); err != nil {
		return
	}
	switch {
	case _result152.E != nil:
		return r, _result152.E
	}

	return _result152.GetSuccess(), nil
}

// Parameters:
//  - RemoveFollowerRequest
func (p *TalkServiceClient) RemoveFollower(ctx context.Context, removeFollowerRequest *RemoveFollowerRequest) (err error) {
	var _args153 TalkServiceRemoveFollowerArgs
	_args153.RemoveFollowerRequest = removeFollowerRequest
	var _result154 TalkServiceRemoveFollowerResult
	if err = p.Client_().Call(ctx, "removeFollower", &_args153, &_result154); err != nil {
		return
	}
	switch {
	case _result154.E != nil:
		return _result154.E
	}

	return nil
}

// Parameters:
//  - Provider
//  - Identifier
//  - Locale
func (p *TalkServiceClient) RequestAccountPasswordReset(ctx context.Context, provider Provider, identifier string, locale string) (err error) {
	var _args155 TalkServiceRequestAccountPasswordResetArgs
	_args155.Provider = provider
	_args155.Identifier = identifier
	_args155.Locale = locale
	var _result156 TalkServiceRequestAccountPasswordResetResult
	if err = p.Client_().Call(ctx, "requestAccountPasswordReset", &_args155, &_result156); err != nil {
		return
	}
	switch {
	case _result156.E != nil:
		return _result156.E
	}

	return nil
}

// Parameters:
//  - Text
func (p *TalkServiceClient) SendEchoPush(ctx context.Context, text string) (err error) {
	var _args157 TalkServiceSendEchoPushArgs
	_args157.Text = text
	var _result158 TalkServiceSendEchoPushResult
	if err = p.Client_().Call(ctx, "sendEchoPush", &_args157, &_result158); err != nil {
		return
	}
	switch {
	case _result158.E != nil:
		return _result158.E
	}

	return nil
}

// Parameters:
//  - UnfollowRequest
func (p *TalkServiceClient) Unfollow(ctx context.Context, unfollowRequest *UnfollowRequest) (err error) {
	var _args159 TalkServiceUnfollowArgs
	_args159.UnfollowRequest = unfollowRequest
	var _result160 TalkServiceUnfollowResult
	if err = p.Client_().Call(ctx, "unfollow", &_args159, &_result160); err != nil {
		return
	}
	switch {
	case _result160.E != nil:
		return _result160.E
	}

	return nil
}

// Parameters:
//  - ChatMid
//  - MemberMids
//  - MediaType
func (p *TalkServiceClient) InviteIntoGroupCall(ctx context.Context, chatMid string, memberMids []string, mediaType MediaType) (err error) {
	var _args161 TalkServiceInviteIntoGroupCallArgs
	_args161.ChatMid = chatMid
	_args161.MemberMids = memberMids
	_args161.MediaType = mediaType
	var _result162 TalkServiceInviteIntoGroupCallResult
	if err = p.Client_().Call(ctx, "inviteIntoGroupCall", &_args161, &_result162); err != nil {
		return
	}
	switch {
	case _result162.E != nil:
		return _result162.E
	}

	return nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) CancelChatInvitation(ctx context.Context, request *CancelChatInvitationRequest) (r *CancelChatInvitationResponse, err error) {
	var _args163 TalkServiceCancelChatInvitationArgs
	_args163.Request = request
	var _result164 TalkServiceCancelChatInvitationResult
	if err = p.Client_().Call(ctx, "cancelChatInvitation", &_args163, &_result164); err != nil {
		return
	}
	switch {
	case _result164.E != nil:
		return r, _result164.E
	}

	return _result164.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) FindChatByTicket(ctx context.Context, request *FindChatByTicketRequest) (r *FindChatByTicketResponse, err error) {
	var _args165 TalkServiceFindChatByTicketArgs
	_args165.Request = request
	var _result166 TalkServiceFindChatByTicketResult
	if err = p.Client_().Call(ctx, "findChatByTicket", &_args165, &_result166); err != nil {
		return
	}
	switch {
	case _result166.E != nil:
		return r, _result166.E
	}

	return _result166.GetSuccess(), nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetAllContactIds(ctx context.Context, syncReason SyncReason) (r []string, err error) {
	var _args167 TalkServiceGetAllContactIdsArgs
	_args167.SyncReason = syncReason
	var _result168 TalkServiceGetAllContactIdsResult
	if err = p.Client_().Call(ctx, "getAllContactIds", &_args167, &_result168); err != nil {
		return
	}
	switch {
	case _result168.E != nil:
		return r, _result168.E
	}

	return _result168.GetSuccess(), nil
}

// Parameters:
//  - ChatRoomMids
//  - SyncReason
func (p *TalkServiceClient) GetChatRoomBGMs(ctx context.Context, chatRoomMids []string, syncReason SyncReason) (r map[string]*ChatRoomBGM, err error) {
	var _args169 TalkServiceGetChatRoomBGMsArgs
	_args169.ChatRoomMids = chatRoomMids
	_args169.SyncReason = syncReason
	var _result170 TalkServiceGetChatRoomBGMsResult
	if err = p.Client_().Call(ctx, "getChatRoomBGMs", &_args169, &_result170); err != nil {
		return
	}
	switch {
	case _result170.E != nil:
		return r, _result170.E
	}

	return _result170.GetSuccess(), nil
}

// Parameters:
//  - KeyVersion
//  - ChatMid
//  - GroupKeyId
func (p *TalkServiceClient) GetE2EEGroupSharedKey(ctx context.Context, keyVersion int32, chatMid string, groupKeyId int32) (r *E2EEGroupSharedKey, err error) {
	var _args171 TalkServiceGetE2EEGroupSharedKeyArgs
	_args171.KeyVersion = keyVersion
	_args171.ChatMid = chatMid
	_args171.GroupKeyId = groupKeyId
	var _result172 TalkServiceGetE2EEGroupSharedKeyResult
	if err = p.Client_().Call(ctx, "getE2EEGroupSharedKey", &_args171, &_result172); err != nil {
		return
	}
	switch {
	case _result172.E != nil:
		return r, _result172.E
	}

	return _result172.GetSuccess(), nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetGroupIdsInvited(ctx context.Context, syncReason SyncReason) (r []string, err error) {
	var _args173 TalkServiceGetGroupIdsInvitedArgs
	_args173.SyncReason = syncReason
	var _result174 TalkServiceGetGroupIdsInvitedResult
	if err = p.Client_().Call(ctx, "getGroupIdsInvited", &_args173, &_result174); err != nil {
		return
	}
	switch {
	case _result174.E != nil:
		return r, _result174.E
	}

	return _result174.GetSuccess(), nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetProfile(ctx context.Context, syncReason SyncReason) (r *Profile, err error) {
	var _args175 TalkServiceGetProfileArgs
	_args175.SyncReason = syncReason
	var _result176 TalkServiceGetProfileResult
	if err = p.Client_().Call(ctx, "getProfile", &_args175, &_result176); err != nil {
		return
	}
	switch {
	case _result176.E != nil:
		return r, _result176.E
	}

	return _result176.GetSuccess(), nil
}

// Parameters:
//  - LastRev
//  - DeviceInfo
//  - UdidHash
//  - OldUdidHash
func (p *TalkServiceClient) NotifyUpdated(ctx context.Context, lastRev int64, deviceInfo *DeviceInfo, udidHash string, oldUdidHash string) (err error) {
	var _args177 TalkServiceNotifyUpdatedArgs
	_args177.LastRev = lastRev
	_args177.DeviceInfo = deviceInfo
	_args177.UdidHash = udidHash
	_args177.OldUdidHash = oldUdidHash
	var _result178 TalkServiceNotifyUpdatedResult
	if err = p.Client_().Call(ctx, "notifyUpdated", &_args177, &_result178); err != nil {
		return
	}
	switch {
	case _result178.E != nil:
		return _result178.E
	}

	return nil
}

// Parameters:
//  - SnsIdType
//  - SnsAccessToken
//  - Region
//  - UdidHash
//  - DeviceInfo
//  - Mid
//  - MigrationPincodeSessionId
func (p *TalkServiceClient) RegisterWithSnsId(ctx context.Context, snsIdType SnSIdTyoe, snsAccessToken string, region string, udidHash string, deviceInfo *DeviceInfo, mid string, migrationPincodeSessionId string) (r *RegisterWithSnsIdResult_, err error) {
	var _args179 TalkServiceRegisterWithSnsIdArgs
	_args179.SnsIdType = snsIdType
	_args179.SnsAccessToken = snsAccessToken
	_args179.Region = region
	_args179.UdidHash = udidHash
	_args179.DeviceInfo = deviceInfo
	_args179.Mid = mid
	_args179.MigrationPincodeSessionId = migrationPincodeSessionId
	var _result180 TalkServiceRegisterWithSnsIdResult
	if err = p.Client_().Call(ctx, "registerWithSnsId", &_args179, &_result180); err != nil {
		return
	}
	switch {
	case _result180.E != nil:
		return r, _result180.E
	}

	return _result180.GetSuccess(), nil
}

// Parameters:
//  - Direction
//  - MidOrEMid
func (p *TalkServiceClient) RemoveFriendRequest(ctx context.Context, direction Direction, midOrEMid string) (err error) {
	var _args181 TalkServiceRemoveFriendRequestArgs
	_args181.Direction = direction
	_args181.MidOrEMid = midOrEMid
	var _result182 TalkServiceRemoveFriendRequestResult
	if err = p.Client_().Call(ctx, "removeFriendRequest", &_args181, &_result182); err != nil {
		return
	}
	switch {
	case _result182.E != nil:
		return _result182.E
	}

	return nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) OpenAuthSession(ctx context.Context, request *AuthSessionRequest) (r string, err error) {
	var _args183 TalkServiceOpenAuthSessionArgs
	_args183.Request = request
	var _result184 TalkServiceOpenAuthSessionResult
	if err = p.Client_().Call(ctx, "openAuthSession", &_args183, &_result184); err != nil {
		return
	}
	switch {
	case _result184.E != nil:
		return r, _result184.E
	}

	return _result184.GetSuccess(), nil
}

// Parameters:
//  - Verifier
//  - PinCode
//  - ErrorCode
//  - PublicKey
//  - EncryptedKeyChain
//  - HashKeyChain
func (p *TalkServiceClient) VerifyQrcodeWithE2EE(ctx context.Context, verifier string, pinCode string, errorCode ErrorCode, publicKey *E2EEPublicKey, encryptedKeyChain []byte, hashKeyChain []byte) (r string, err error) {
	var _args185 TalkServiceVerifyQrcodeWithE2EEArgs
	_args185.Verifier = verifier
	_args185.PinCode = pinCode
	_args185.ErrorCode = errorCode
	_args185.PublicKey = publicKey
	_args185.EncryptedKeyChain = encryptedKeyChain
	_args185.HashKeyChain = hashKeyChain
	var _result186 TalkServiceVerifyQrcodeWithE2EEResult
	if err = p.Client_().Call(ctx, "verifyQrcodeWithE2EE", &_args185, &_result186); err != nil {
		return
	}
	switch {
	case _result186.E != nil:
		return r, _result186.E
	}

	return _result186.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) GetBalance(ctx context.Context, request *GetBalanceRequest) (r *GetBalanceResponse, err error) {
	var _args187 TalkServiceGetBalanceArgs
	_args187.Request = request
	var _result188 TalkServiceGetBalanceResult
	if err = p.Client_().Call(ctx, "getBalance", &_args187, &_result188); err != nil {
		return
	}
	switch {
	case _result188.E != nil:
		return r, _result188.E
	}

	return _result188.GetSuccess(), nil
}

func (p *TalkServiceClient) UnregisterUserAndDevice(ctx context.Context) (r string, err error) {
	var _args189 TalkServiceUnregisterUserAndDeviceArgs
	var _result190 TalkServiceUnregisterUserAndDeviceResult
	if err = p.Client_().Call(ctx, "unregisterUserAndDevice", &_args189, &_result190); err != nil {
		return
	}
	switch {
	case _result190.E != nil:
		return r, _result190.E
	}

	return _result190.GetSuccess(), nil
}

// Parameters:
//  - Type
//  - Token
func (p *TalkServiceClient) UpdateNotificationToken(ctx context.Context, type_a1 UpdateNotificationType, token string) (err error) {
	var _args191 TalkServiceUpdateNotificationTokenArgs
	_args191.Type = type_a1
	_args191.Token = token
	var _result192 TalkServiceUpdateNotificationTokenResult
	if err = p.Client_().Call(ctx, "updateNotificationToken", &_args191, &_result192); err != nil {
		return
	}
	switch {
	case _result192.E != nil:
		return _result192.E
	}

	return nil
}

// Parameters:
//  - SessionId
//  - PinCode
//  - UdidHash
//  - MigrationPincodeSessionId
//  - OldUdidHash
func (p *TalkServiceClient) VerifyPhoneNumber(ctx context.Context, sessionId string, pinCode string, udidHash string, migrationPincodeSessionId string, oldUdidHash string) (r *PhoneVerificationResult_, err error) {
	var _args193 TalkServiceVerifyPhoneNumberArgs
	_args193.SessionId = sessionId
	_args193.PinCode = pinCode
	_args193.UdidHash = udidHash
	_args193.MigrationPincodeSessionId = migrationPincodeSessionId
	_args193.OldUdidHash = oldUdidHash
	var _result194 TalkServiceVerifyPhoneNumberResult
	if err = p.Client_().Call(ctx, "verifyPhoneNumber", &_args193, &_result194); err != nil {
		return
	}
	switch {
	case _result194.E != nil:
		return r, _result194.E
	}

	return _result194.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - GroupId
//  - ContactIds
func (p *TalkServiceClient) CancelGroupInvitation(ctx context.Context, reqSeq int32, groupId string, contactIds []string) (err error) {
	var _args195 TalkServiceCancelGroupInvitationArgs
	_args195.ReqSeq = reqSeq
	_args195.GroupId = groupId
	_args195.ContactIds = contactIds
	var _result196 TalkServiceCancelGroupInvitationResult
	if err = p.Client_().Call(ctx, "cancelGroupInvitation", &_args195, &_result196); err != nil {
		return
	}
	switch {
	case _result196.E != nil:
		return _result196.E
	}

	return nil
}

// Parameters:
//  - ReqSeq
//  - ContactIds
func (p *TalkServiceClient) CreateRoomV2(ctx context.Context, reqSeq int32, contactIds []string) (r *Room, err error) {
	var _args197 TalkServiceCreateRoomV2Args
	_args197.ReqSeq = reqSeq
	_args197.ContactIds = contactIds
	var _result198 TalkServiceCreateRoomV2Result
	if err = p.Client_().Call(ctx, "createRoomV2", &_args197, &_result198); err != nil {
		return
	}
	switch {
	case _result198.E != nil:
		return r, _result198.E
	}

	return _result198.GetSuccess(), nil
}

// Parameters:
//  - SearchId
//  - Reference
func (p *TalkServiceClient) FindContactByMetaTag(ctx context.Context, searchId string, reference string) (r *Contact, err error) {
	var _args199 TalkServiceFindContactByMetaTagArgs
	_args199.SearchId = searchId
	_args199.Reference = reference
	var _result200 TalkServiceFindContactByMetaTagResult
	if err = p.Client_().Call(ctx, "findContactByMetaTag", &_args199, &_result200); err != nil {
		return
	}
	switch {
	case _result200.E != nil:
		return r, _result200.E
	}

	return _result200.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) GetChats(ctx context.Context, request *GetChatsRequest) (r *GetChatsResponse, err error) {
	var _args201 TalkServiceGetChatsArgs
	_args201.Request = request
	var _result202 TalkServiceGetChatsResult
	if err = p.Client_().Call(ctx, "getChats", &_args201, &_result202); err != nil {
		return
	}
	switch {
	case _result202.E != nil:
		return r, _result202.E
	}

	return _result202.GetSuccess(), nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetGroupIdsJoined(ctx context.Context, syncReason SyncReason) (r []string, err error) {
	var _args203 TalkServiceGetGroupIdsJoinedArgs
	_args203.SyncReason = syncReason
	var _result204 TalkServiceGetGroupIdsJoinedResult
	if err = p.Client_().Call(ctx, "getGroupIdsJoined", &_args203, &_result204); err != nil {
		return
	}
	switch {
	case _result204.E != nil:
		return r, _result204.E
	}

	return _result204.GetSuccess(), nil
}

// Parameters:
//  - RoomIds
func (p *TalkServiceClient) GetRoomsV2(ctx context.Context, roomIds []string) (r []*Room, err error) {
	var _args205 TalkServiceGetRoomsV2Args
	_args205.RoomIds = roomIds
	var _result206 TalkServiceGetRoomsV2Result
	if err = p.Client_().Call(ctx, "getRoomsV2", &_args205, &_result206); err != nil {
		return
	}
	switch {
	case _result206.E != nil:
		return r, _result206.E
	}

	return _result206.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) ReissueChatTicket(ctx context.Context, request *ReissueChatTicketRequest) (r *ReissueChatTicketResponse, err error) {
	var _args207 TalkServiceReissueChatTicketArgs
	_args207.Request = request
	var _result208 TalkServiceReissueChatTicketResult
	if err = p.Client_().Call(ctx, "reissueChatTicket", &_args207, &_result208); err != nil {
		return
	}
	switch {
	case _result208.E != nil:
		return r, _result208.E
	}

	return _result208.GetSuccess(), nil
}

// Parameters:
//  - Seq
//  - Message
func (p *TalkServiceClient) SendMessage(ctx context.Context, seq int32, message *Message) (r *Message, err error) {
	var _args209 TalkServiceSendMessageArgs
	_args209.Seq = seq
	_args209.Message = message
	var _result210 TalkServiceSendMessageResult
	if err = p.Client_().Call(ctx, "sendMessage", &_args209, &_result210); err != nil {
		return
	}
	switch {
	case _result210.E != nil:
		return r, _result210.E
	}

	return _result210.GetSuccess(), nil
}

// Parameters:
//  - Seq
//  - MessageId
func (p *TalkServiceClient) UnsendMessage(ctx context.Context, seq int32, messageId string) (err error) {
	var _args211 TalkServiceUnsendMessageArgs
	_args211.Seq = seq
	_args211.MessageId = messageId
	var _result212 TalkServiceUnsendMessageResult
	if err = p.Client_().Call(ctx, "unsendMessage", &_args211, &_result212); err != nil {
		return
	}
	switch {
	case _result212.E != nil:
		return _result212.E
	}

	return nil
}

// Parameters:
//  - ChatMid
//  - MediaType
//  - IsInitialHost
//  - Capabilities
func (p *TalkServiceClient) AcquireGroupCallRoute(ctx context.Context, chatMid string, mediaType MediaType, isInitialHost bool, capabilities []string) (r *GroupCallRoute, err error) {
	var _args213 TalkServiceAcquireGroupCallRouteArgs
	_args213.ChatMid = chatMid
	_args213.MediaType = mediaType
	_args213.IsInitialHost = isInitialHost
	_args213.Capabilities = capabilities
	var _result214 TalkServiceAcquireGroupCallRouteResult
	if err = p.Client_().Call(ctx, "acquireGroupCallRoute", &_args213, &_result214); err != nil {
		return
	}
	switch {
	case _result214.E != nil:
		return r, _result214.E
	}

	return _result214.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) AcceptChatInvitationByTicket(ctx context.Context, request *AcceptChatInvitationByTicketRequest) (r *AcceptChatInvitationByTicketResponse, err error) {
	var _args215 TalkServiceAcceptChatInvitationByTicketArgs
	_args215.Request = request
	var _result216 TalkServiceAcceptChatInvitationByTicketResult
	if err = p.Client_().Call(ctx, "acceptChatInvitationByTicket", &_args215, &_result216); err != nil {
		return
	}
	switch {
	case _result216.E != nil:
		return r, _result216.E
	}

	return _result216.GetSuccess(), nil
}

// Parameters:
//  - TicketIdWithTag
func (p *TalkServiceClient) FindContactByUserTicket(ctx context.Context, ticketIdWithTag string) (r *Contact, err error) {
	var _args217 TalkServiceFindContactByUserTicketArgs
	_args217.TicketIdWithTag = ticketIdWithTag
	var _result218 TalkServiceFindContactByUserTicketResult
	if err = p.Client_().Call(ctx, "findContactByUserTicket", &_args217, &_result218); err != nil {
		return
	}
	switch {
	case _result218.E != nil:
		return r, _result218.E
	}

	return _result218.GetSuccess(), nil
}

// Parameters:
//  - Mid
//  - KeyVersion
//  - KeyId
func (p *TalkServiceClient) GetE2EEPublicKey(ctx context.Context, mid string, keyVersion int32, keyId int32) (r []*E2EEPublicKey, err error) {
	var _args219 TalkServiceGetE2EEPublicKeyArgs
	_args219.Mid = mid
	_args219.KeyVersion = keyVersion
	_args219.KeyId = keyId
	var _result220 TalkServiceGetE2EEPublicKeyResult
	if err = p.Client_().Call(ctx, "getE2EEPublicKey", &_args219, &_result220); err != nil {
		return
	}
	switch {
	case _result220.E != nil:
		return r, _result220.E
	}

	return _result220.GetSuccess(), nil
}

// Parameters:
//  - SessionId
//  - Provider
//  - Identifier
//  - Verifier
//  - MigrationPincodeSessionId
func (p *TalkServiceClient) RegisterDeviceWithIdentityCredential(ctx context.Context, sessionId string, provider Provider, identifier string, verifier string, migrationPincodeSessionId string) (r string, err error) {
	var _args221 TalkServiceRegisterDeviceWithIdentityCredentialArgs
	_args221.SessionId = sessionId
	_args221.Provider = provider
	_args221.Identifier = identifier
	_args221.Verifier = verifier
	_args221.MigrationPincodeSessionId = migrationPincodeSessionId
	var _result222 TalkServiceRegisterDeviceWithIdentityCredentialResult
	if err = p.Client_().Call(ctx, "registerDeviceWithIdentityCredential", &_args221, &_result222); err != nil {
		return
	}
	switch {
	case _result222.E != nil:
		return r, _result222.E
	}

	return _result222.GetSuccess(), nil
}

// Parameters:
//  - GroupMid
func (p *TalkServiceClient) ReissueGroupTicket(ctx context.Context, groupMid string) (r string, err error) {
	var _args223 TalkServiceReissueGroupTicketArgs
	_args223.GroupMid = groupMid
	var _result224 TalkServiceReissueGroupTicketResult
	if err = p.Client_().Call(ctx, "reissueGroupTicket", &_args223, &_result224); err != nil {
		return
	}
	switch {
	case _result224.E != nil:
		return r, _result224.E
	}

	return _result224.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - Request
func (p *TalkServiceClient) UpdateProfileAttributes(ctx context.Context, reqSeq int32, request *UpdateProfileAttributesRequest) (err error) {
	var _args225 TalkServiceUpdateProfileAttributesArgs
	_args225.ReqSeq = reqSeq
	_args225.Request = request
	var _result226 TalkServiceUpdateProfileAttributesResult
	if err = p.Client_().Call(ctx, "updateProfileAttributes", &_args225, &_result226); err != nil {
		return
	}
	switch {
	case _result226.E != nil:
		return _result226.E
	}

	return nil
}

// Parameters:
//  - Verifier
//  - PinCode
func (p *TalkServiceClient) VerifyQrcode(ctx context.Context, verifier string, pinCode string) (r string, err error) {
	var _args227 TalkServiceVerifyQrcodeArgs
	_args227.Verifier = verifier
	_args227.PinCode = pinCode
	var _result228 TalkServiceVerifyQrcodeResult
	if err = p.Client_().Call(ctx, "verifyQrcode", &_args227, &_result228); err != nil {
		return
	}
	switch {
	case _result228.E != nil:
		return r, _result228.E
	}

	return _result228.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) AcceptChatInvitation(ctx context.Context, request *AcceptChatInvitationRequest) (r *AcceptChatInvitationResponse, err error) {
	var _args229 TalkServiceAcceptChatInvitationArgs
	_args229.Request = request
	var _result230 TalkServiceAcceptChatInvitationResult
	if err = p.Client_().Call(ctx, "acceptChatInvitation", &_args229, &_result230); err != nil {
		return
	}
	switch {
	case _result230.E != nil:
		return r, _result230.E
	}

	return _result230.GetSuccess(), nil
}

// Parameters:
//  - EMid
func (p *TalkServiceClient) DecryptFollowEMid(ctx context.Context, eMid string) (r string, err error) {
	var _args231 TalkServiceDecryptFollowEMidArgs
	_args231.EMid = eMid
	var _result232 TalkServiceDecryptFollowEMidResult
	if err = p.Client_().Call(ctx, "decryptFollowEMid", &_args231, &_result232); err != nil {
		return
	}
	switch {
	case _result232.E != nil:
		return r, _result232.E
	}

	return _result232.GetSuccess(), nil
}

// Parameters:
//  - SearchId
func (p *TalkServiceClient) FindContactByUserid(ctx context.Context, searchId string) (r *Contact, err error) {
	var _args233 TalkServiceFindContactByUseridArgs
	_args233.SearchId = searchId
	var _result234 TalkServiceFindContactByUseridResult
	if err = p.Client_().Call(ctx, "findContactByUserid", &_args233, &_result234); err != nil {
		return
	}
	switch {
	case _result234.E != nil:
		return r, _result234.E
	}

	return _result234.GetSuccess(), nil
}

func (p *TalkServiceClient) GetServerTime(ctx context.Context) (r int64, err error) {
	var _args235 TalkServiceGetServerTimeArgs
	var _result236 TalkServiceGetServerTimeResult
	if err = p.Client_().Call(ctx, "getServerTime", &_args235, &_result236); err != nil {
		return
	}
	switch {
	case _result236.E != nil:
		return r, _result236.E
	}

	return _result236.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) InviteIntoChat(ctx context.Context, request *InviteIntoChatRequest) (r *InviteIntoChatResponse, err error) {
	var _args237 TalkServiceInviteIntoChatArgs
	_args237.Request = request
	var _result238 TalkServiceInviteIntoChatResult
	if err = p.Client_().Call(ctx, "inviteIntoChat", &_args237, &_result238); err != nil {
		return
	}
	switch {
	case _result238.E != nil:
		return r, _result238.E
	}

	return _result238.GetSuccess(), nil
}

// Parameters:
//  - ClientRevision
func (p *TalkServiceClient) WakeUpLongPolling(ctx context.Context, clientRevision int64) (r bool, err error) {
	var _args239 TalkServiceWakeUpLongPollingArgs
	_args239.ClientRevision = clientRevision
	var _result240 TalkServiceWakeUpLongPollingResult
	if err = p.Client_().Call(ctx, "wakeUpLongPolling", &_args239, &_result240); err != nil {
		return
	}
	switch {
	case _result240.E != nil:
		return r, _result240.E
	}

	return _result240.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - GroupMid
//  - TicketId
func (p *TalkServiceClient) AcceptGroupInvitationByTicket(ctx context.Context, reqSeq int32, groupMid string, ticketId string) (err error) {
	var _args241 TalkServiceAcceptGroupInvitationByTicketArgs
	_args241.ReqSeq = reqSeq
	_args241.GroupMid = groupMid
	_args241.TicketId = ticketId
	var _result242 TalkServiceAcceptGroupInvitationByTicketResult
	if err = p.Client_().Call(ctx, "acceptGroupInvitationByTicket", &_args241, &_result242); err != nil {
		return
	}
	switch {
	case _result242.E != nil:
		return _result242.E
	}

	return nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) DeleteOtherFromChat(ctx context.Context, request *DeleteOtherFromChatRequest) (r *DeleteOtherFromChatResponse, err error) {
	var _args243 TalkServiceDeleteOtherFromChatArgs
	_args243.Request = request
	var _result244 TalkServiceDeleteOtherFromChatResult
	if err = p.Client_().Call(ctx, "deleteOtherFromChat", &_args243, &_result244); err != nil {
		return
	}
	switch {
	case _result244.E != nil:
		return r, _result244.E
	}

	return _result244.GetSuccess(), nil
}

// Parameters:
//  - Phones
func (p *TalkServiceClient) FindContactsByPhone(ctx context.Context, phones []string) (r map[string]*Contact, err error) {
	var _args245 TalkServiceFindContactsByPhoneArgs
	_args245.Phones = phones
	var _result246 TalkServiceFindContactsByPhoneResult
	if err = p.Client_().Call(ctx, "findContactsByPhone", &_args245, &_result246); err != nil {
		return
	}
	switch {
	case _result246.E != nil:
		return r, _result246.E
	}

	return _result246.GetSuccess(), nil
}

// Parameters:
//  - GroupId
func (p *TalkServiceClient) GetGroupsV2(ctx context.Context, groupId []string) (r []*Group, err error) {
	var _args247 TalkServiceGetGroupsV2Args
	_args247.GroupId = groupId
	var _result248 TalkServiceGetGroupsV2Result
	if err = p.Client_().Call(ctx, "getGroupsV2", &_args247, &_result248); err != nil {
		return
	}
	switch {
	case _result248.E != nil:
		return r, _result248.E
	}

	return _result248.GetSuccess(), nil
}

// Parameters:
//  - GroupId
func (p *TalkServiceClient) GetGroups(ctx context.Context, groupId []string) (r []*Group, err error) {
	var _args249 TalkServiceGetGroupsArgs
	_args249.GroupId = groupId
	var _result250 TalkServiceGetGroupsResult
	if err = p.Client_().Call(ctx, "getGroups", &_args249, &_result250); err != nil {
		return
	}
	switch {
	case _result250.E != nil:
		return r, _result250.E
	}

	return _result250.GetSuccess(), nil
}

// Parameters:
//  - GroupId
func (p *TalkServiceClient) GetGroup(ctx context.Context, groupId string) (r *Group, err error) {
	var _args251 TalkServiceGetGroupArgs
	_args251.GroupId = groupId
	var _result252 TalkServiceGetGroupResult
	if err = p.Client_().Call(ctx, "getGroup", &_args251, &_result252); err != nil {
		return
	}
	switch {
	case _result252.E != nil:
		return r, _result252.E
	}

	return _result252.GetSuccess(), nil
}

// Parameters:
//  - GroupId
func (p *TalkServiceClient) GetCompactGroup(ctx context.Context, groupId string) (r *Group, err error) {
	var _args253 TalkServiceGetCompactGroupArgs
	_args253.GroupId = groupId
	var _result254 TalkServiceGetCompactGroupResult
	if err = p.Client_().Call(ctx, "getCompactGroup", &_args253, &_result254); err != nil {
		return
	}
	switch {
	case _result254.E != nil:
		return r, _result254.E
	}

	return _result254.GetSuccess(), nil
}

// Parameters:
//  - GroupId
func (p *TalkServiceClient) GetGroupWithoutMembers(ctx context.Context, groupId string) (r *Group, err error) {
	var _args255 TalkServiceGetGroupWithoutMembersArgs
	_args255.GroupId = groupId
	var _result256 TalkServiceGetGroupWithoutMembersResult
	if err = p.Client_().Call(ctx, "getGroupWithoutMembers", &_args255, &_result256); err != nil {
		return
	}
	switch {
	case _result256.E != nil:
		return r, _result256.E
	}

	return _result256.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - GroupId
//  - ContactIds
func (p *TalkServiceClient) InviteIntoGroup(ctx context.Context, reqSeq int32, groupId string, contactIds []string) (err error) {
	var _args257 TalkServiceInviteIntoGroupArgs
	_args257.ReqSeq = reqSeq
	_args257.GroupId = groupId
	_args257.ContactIds = contactIds
	var _result258 TalkServiceInviteIntoGroupResult
	if err = p.Client_().Call(ctx, "inviteIntoGroup", &_args257, &_result258); err != nil {
		return
	}
	switch {
	case _result258.E != nil:
		return _result258.E
	}

	return nil
}

// Parameters:
//  - ReqSeq
//  - GroupId
func (p *TalkServiceClient) AcceptGroupInvitation(ctx context.Context, reqSeq int32, groupId string) (err error) {
	var _args259 TalkServiceAcceptGroupInvitationArgs
	_args259.ReqSeq = reqSeq
	_args259.GroupId = groupId
	var _result260 TalkServiceAcceptGroupInvitationResult
	if err = p.Client_().Call(ctx, "acceptGroupInvitation", &_args259, &_result260); err != nil {
		return
	}
	switch {
	case _result260.E != nil:
		return _result260.E
	}

	return nil
}

// Parameters:
//  - ChatIds
//  - SyncReason
func (p *TalkServiceClient) GetMessageReadRange(ctx context.Context, chatIds []string, syncReason SyncReason) (r []*TMessageReadRange, err error) {
	var _args261 TalkServiceGetMessageReadRangeArgs
	_args261.ChatIds = chatIds
	_args261.SyncReason = syncReason
	var _result262 TalkServiceGetMessageReadRangeResult
	if err = p.Client_().Call(ctx, "getMessageReadRange", &_args261, &_result262); err != nil {
		return
	}
	switch {
	case _result262.E != nil:
		return r, _result262.E
	}

	return _result262.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) DeleteSelfFromChat(ctx context.Context, request *DeleteSelfFromChatRequest) (r *DeleteSelfFromChatResponse, err error) {
	var _args263 TalkServiceDeleteSelfFromChatArgs
	_args263.Request = request
	var _result264 TalkServiceDeleteSelfFromChatResult
	if err = p.Client_().Call(ctx, "deleteSelfFromChat", &_args263, &_result264); err != nil {
		return
	}
	switch {
	case _result264.E != nil:
		return r, _result264.E
	}

	return _result264.GetSuccess(), nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetBlockedContactIds(ctx context.Context, syncReason SyncReason) (r []string, err error) {
	var _args265 TalkServiceGetBlockedContactIdsArgs
	_args265.SyncReason = syncReason
	var _result266 TalkServiceGetBlockedContactIdsResult
	if err = p.Client_().Call(ctx, "getBlockedContactIds", &_args265, &_result266); err != nil {
		return
	}
	switch {
	case _result266.E != nil:
		return r, _result266.E
	}

	return _result266.GetSuccess(), nil
}

// Parameters:
//  - AttributesToRetrieve
func (p *TalkServiceClient) GetSettingsAttributes2(ctx context.Context, attributesToRetrieve []SettingsAttributes) (r *Settings, err error) {
	var _args267 TalkServiceGetSettingsAttributes2Args
	_args267.AttributesToRetrieve = attributesToRetrieve
	var _result268 TalkServiceGetSettingsAttributes2Result
	if err = p.Client_().Call(ctx, "getSettingsAttributes2", &_args267, &_result268); err != nil {
		return
	}
	switch {
	case _result268.E != nil:
		return r, _result268.E
	}

	return _result268.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - RoomId
//  - ContactIds
func (p *TalkServiceClient) InviteIntoRoom(ctx context.Context, reqSeq int32, roomId string, contactIds []string) (err error) {
	var _args269 TalkServiceInviteIntoRoomArgs
	_args269.ReqSeq = reqSeq
	_args269.RoomId = roomId
	_args269.ContactIds = contactIds
	var _result270 TalkServiceInviteIntoRoomResult
	if err = p.Client_().Call(ctx, "inviteIntoRoom", &_args269, &_result270); err != nil {
		return
	}
	switch {
	case _result270.E != nil:
		return _result270.E
	}

	return nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) RejectChatInvitation(ctx context.Context, request *RejectChatInvitationRequest) (r *RejectChatInvitationResponse, err error) {
	var _args271 TalkServiceRejectChatInvitationArgs
	_args271.Request = request
	var _result272 TalkServiceRejectChatInvitationResult
	if err = p.Client_().Call(ctx, "rejectChatInvitation", &_args271, &_result272); err != nil {
		return
	}
	switch {
	case _result272.E != nil:
		return r, _result272.E
	}

	return _result272.GetSuccess(), nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetBlockedRecommendationIds(ctx context.Context, syncReason SyncReason) (r []string, err error) {
	var _args273 TalkServiceGetBlockedRecommendationIdsArgs
	_args273.SyncReason = syncReason
	var _result274 TalkServiceGetBlockedRecommendationIdsResult
	if err = p.Client_().Call(ctx, "getBlockedRecommendationIds", &_args273, &_result274); err != nil {
		return
	}
	switch {
	case _result274.E != nil:
		return r, _result274.E
	}

	return _result274.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - ChatRoomMid
//  - ChatRoomBGMInfo
func (p *TalkServiceClient) UpdateChatRoomBGM(ctx context.Context, reqSeq int32, chatRoomMid string, chatRoomBGMInfo string) (r *ChatRoomBGM, err error) {
	var _args275 TalkServiceUpdateChatRoomBGMArgs
	_args275.ReqSeq = reqSeq
	_args275.ChatRoomMid = chatRoomMid
	_args275.ChatRoomBGMInfo = chatRoomBGMInfo
	var _result276 TalkServiceUpdateChatRoomBGMResult
	if err = p.Client_().Call(ctx, "updateChatRoomBGM", &_args275, &_result276); err != nil {
		return
	}
	switch {
	case _result276.E != nil:
		return r, _result276.E
	}

	return _result276.GetSuccess(), nil
}

// Parameters:
//  - TicketId
func (p *TalkServiceClient) FindGroupByTicket(ctx context.Context, ticketId string) (r *Group, err error) {
	var _args277 TalkServiceFindGroupByTicketArgs
	_args277.TicketId = ticketId
	var _result278 TalkServiceFindGroupByTicketResult
	if err = p.Client_().Call(ctx, "findGroupByTicket", &_args277, &_result278); err != nil {
		return
	}
	switch {
	case _result278.E != nil:
		return r, _result278.E
	}

	return _result278.GetSuccess(), nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetRecentFriendRequests(ctx context.Context, syncReason SyncReason) (r *FriendRequestsInfo, err error) {
	var _args279 TalkServiceGetRecentFriendRequestsArgs
	_args279.SyncReason = syncReason
	var _result280 TalkServiceGetRecentFriendRequestsResult
	if err = p.Client_().Call(ctx, "getRecentFriendRequests", &_args279, &_result280); err != nil {
		return
	}
	switch {
	case _result280.E != nil:
		return r, _result280.E
	}

	return _result280.GetSuccess(), nil
}

// Parameters:
//  - AttrBitset
func (p *TalkServiceClient) GetSettingsAttributes(ctx context.Context, attrBitset int32) (r *Settings, err error) {
	var _args281 TalkServiceGetSettingsAttributesArgs
	_args281.AttrBitset = attrBitset
	var _result282 TalkServiceGetSettingsAttributesResult
	if err = p.Client_().Call(ctx, "getSettingsAttributes", &_args281, &_result282); err != nil {
		return
	}
	switch {
	case _result282.E != nil:
		return r, _result282.E
	}

	return _result282.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - GroupId
func (p *TalkServiceClient) RejectGroupInvitation(ctx context.Context, reqSeq int32, groupId string) (err error) {
	var _args283 TalkServiceRejectGroupInvitationArgs
	_args283.ReqSeq = reqSeq
	_args283.GroupId = groupId
	var _result284 TalkServiceRejectGroupInvitationResult
	if err = p.Client_().Call(ctx, "rejectGroupInvitation", &_args283, &_result284); err != nil {
		return
	}
	switch {
	case _result284.E != nil:
		return _result284.E
	}

	return nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) UpdateChat(ctx context.Context, request *UpdateChatRequest) (r *UpdateChatResponse, err error) {
	var _args285 TalkServiceUpdateChatArgs
	_args285.Request = request
	var _result286 TalkServiceUpdateChatResult
	if err = p.Client_().Call(ctx, "updateChat", &_args285, &_result286); err != nil {
		return
	}
	switch {
	case _result286.E != nil:
		return r, _result286.E
	}

	return _result286.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - AttributesToUpdate
//  - Settings
func (p *TalkServiceClient) UpdateSettingsAttributes2(ctx context.Context, reqSeq int32, attributesToUpdate []SettingsAttributes, settings *Settings) (r []SettingsAttributes, err error) {
	var _args287 TalkServiceUpdateSettingsAttributes2Args
	_args287.ReqSeq = reqSeq
	_args287.AttributesToUpdate = attributesToUpdate
	_args287.Settings = settings
	var _result288 TalkServiceUpdateSettingsAttributes2Result
	if err = p.Client_().Call(ctx, "updateSettingsAttributes2", &_args287, &_result288); err != nil {
		return
	}
	switch {
	case _result288.E != nil:
		return r, _result288.E
	}

	return _result288.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Type
func (p *TalkServiceClient) GetContactRegistration(ctx context.Context, id string, type_a1 MIDType) (r *ContactRegistration, err error) {
	var _args289 TalkServiceGetContactRegistrationArgs
	_args289.ID = id
	_args289.Type = type_a1
	var _result290 TalkServiceGetContactRegistrationResult
	if err = p.Client_().Call(ctx, "getContactRegistration", &_args289, &_result290); err != nil {
		return
	}
	switch {
	case _result290.E != nil:
		return r, _result290.E
	}

	return _result290.GetSuccess(), nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetSettings(ctx context.Context, syncReason SyncReason) (r *Settings, err error) {
	var _args291 TalkServiceGetSettingsArgs
	_args291.SyncReason = syncReason
	var _result292 TalkServiceGetSettingsResult
	if err = p.Client_().Call(ctx, "getSettings", &_args291, &_result292); err != nil {
		return
	}
	switch {
	case _result292.E != nil:
		return r, _result292.E
	}

	return _result292.GetSuccess(), nil
}

func (p *TalkServiceClient) Noop(ctx context.Context) (err error) {
	var _args293 TalkServiceNoopArgs
	var _result294 TalkServiceNoopResult
	if err = p.Client_().Call(ctx, "noop", &_args293, &_result294); err != nil {
		return
	}
	switch {
	case _result294.E != nil:
		return _result294.E
	}

	return nil
}

// Parameters:
//  - Seq
//  - LastMessageId
func (p *TalkServiceClient) RemoveAllMessages(ctx context.Context, seq int32, lastMessageId string) (err error) {
	var _args295 TalkServiceRemoveAllMessagesArgs
	_args295.Seq = seq
	_args295.LastMessageId = lastMessageId
	var _result296 TalkServiceRemoveAllMessagesResult
	if err = p.Client_().Call(ctx, "removeAllMessages", &_args295, &_result296); err != nil {
		return
	}
	switch {
	case _result296.E != nil:
		return _result296.E
	}

	return nil
}

// Parameters:
//  - ReqSeq
//  - Mid
//  - Flag
//  - Value
func (p *TalkServiceClient) UpdateContactSetting(ctx context.Context, reqSeq int32, mid string, flag ContactFlag, value string) (err error) {
	var _args297 TalkServiceUpdateContactSettingArgs
	_args297.ReqSeq = reqSeq
	_args297.Mid = mid
	_args297.Flag = flag
	_args297.Value = value
	var _result298 TalkServiceUpdateContactSettingResult
	if err = p.Client_().Call(ctx, "updateContactSetting", &_args297, &_result298); err != nil {
		return
	}
	switch {
	case _result298.E != nil:
		return _result298.E
	}

	return nil
}

// Parameters:
//  - ChatMid
func (p *TalkServiceClient) GetGroupCall(ctx context.Context, chatMid string) (r *GroupCall, err error) {
	var _args299 TalkServiceGetGroupCallArgs
	_args299.ChatMid = chatMid
	var _result300 TalkServiceGetGroupCallResult
	if err = p.Client_().Call(ctx, "getGroupCall", &_args299, &_result300); err != nil {
		return
	}
	switch {
	case _result300.E != nil:
		return r, _result300.E
	}

	return _result300.GetSuccess(), nil
}

// Parameters:
//  - LocalRev
//  - Count
//  - GlobalRev
//  - IndividualRev
func (p *TalkServiceClient) FetchOps(ctx context.Context, localRev int64, count int32, globalRev int64, individualRev int64) (r []*Operation, err error) {
	var _args301 TalkServiceFetchOpsArgs
	_args301.LocalRev = localRev
	_args301.Count = count
	_args301.GlobalRev = globalRev
	_args301.IndividualRev = individualRev
	var _result302 TalkServiceFetchOpsResult
	if err = p.Client_().Call(ctx, "fetchOps", &_args301, &_result302); err != nil {
		return
	}
	switch {
	case _result302.E != nil:
		return r, _result302.E
	}

	return _result302.GetSuccess(), nil
}

// Parameters:
//  - LocalRev
//  - Count
func (p *TalkServiceClient) FetchOperations(ctx context.Context, localRev int64, count int32) (r []*Operation, err error) {
	var _args303 TalkServiceFetchOperationsArgs
	_args303.LocalRev = localRev
	_args303.Count = count
	var _result304 TalkServiceFetchOperationsResult
	if err = p.Client_().Call(ctx, "fetchOperations", &_args303, &_result304); err != nil {
		return
	}
	switch {
	case _result304.E != nil:
		return r, _result304.E
	}

	return _result304.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - GroupId
//  - ContactIds
func (p *TalkServiceClient) KickoutFromGroup(ctx context.Context, reqSeq int32, groupId string, contactIds []string) (err error) {
	var _args305 TalkServiceKickoutFromGroupArgs
	_args305.ReqSeq = reqSeq
	_args305.GroupId = groupId
	_args305.ContactIds = contactIds
	var _result306 TalkServiceKickoutFromGroupResult
	if err = p.Client_().Call(ctx, "kickoutFromGroup", &_args305, &_result306); err != nil {
		return
	}
	switch {
	case _result306.E != nil:
		return _result306.E
	}

	return nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetExtendedProfile(ctx context.Context, syncReason SyncReason) (r *ExtendedProfile, err error) {
	var _args307 TalkServiceGetExtendedProfileArgs
	_args307.SyncReason = syncReason
	var _result308 TalkServiceGetExtendedProfileResult
	if err = p.Client_().Call(ctx, "getExtendedProfile", &_args307, &_result308); err != nil {
		return
	}
	switch {
	case _result308.E != nil:
		return r, _result308.E
	}

	return _result308.GetSuccess(), nil
}

// Parameters:
//  - FeatureType
func (p *TalkServiceClient) AcquireEncryptedAccessToken(ctx context.Context, featureType FeatureType) (r string, err error) {
	var _args309 TalkServiceAcquireEncryptedAccessTokenArgs
	_args309.FeatureType = featureType
	var _result310 TalkServiceAcquireEncryptedAccessTokenResult
	if err = p.Client_().Call(ctx, "acquireEncryptedAccessToken", &_args309, &_result310); err != nil {
		return
	}
	switch {
	case _result310.E != nil:
		return r, _result310.E
	}

	return _result310.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - ChatRoomMid
//  - Type
//  - Contents
func (p *TalkServiceClient) CreateChatRoomAnnouncement(ctx context.Context, reqSeq int32, chatRoomMid string, type_a1 ChatRoomAnnouncementType, contents *ChatRoomAnnouncementContents) (r *ChatRoomAnnouncement, err error) {
	var _args311 TalkServiceCreateChatRoomAnnouncementArgs
	_args311.ReqSeq = reqSeq
	_args311.ChatRoomMid = chatRoomMid
	_args311.Type = type_a1
	_args311.Contents = contents
	var _result312 TalkServiceCreateChatRoomAnnouncementResult
	if err = p.Client_().Call(ctx, "createChatRoomAnnouncement", &_args311, &_result312); err != nil {
		return
	}
	switch {
	case _result312.E != nil:
		return r, _result312.E
	}

	return _result312.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - SearchId
//  - Reference
func (p *TalkServiceClient) FindAndAddContactByMetaTag(ctx context.Context, reqSeq int32, searchId string, reference string) (r *Contact, err error) {
	var _args313 TalkServiceFindAndAddContactByMetaTagArgs
	_args313.ReqSeq = reqSeq
	_args313.SearchId = searchId
	_args313.Reference = reference
	var _result314 TalkServiceFindAndAddContactByMetaTagResult
	if err = p.Client_().Call(ctx, "findAndAddContactByMetaTag", &_args313, &_result314); err != nil {
		return
	}
	switch {
	case _result314.E != nil:
		return r, _result314.E
	}

	return _result314.GetSuccess(), nil
}

// Parameters:
//  - FollowRequest
func (p *TalkServiceClient) Follow(ctx context.Context, followRequest *FollowRequest) (err error) {
	var _args315 TalkServiceFollowArgs
	_args315.FollowRequest = followRequest
	var _result316 TalkServiceFollowResult
	if err = p.Client_().Call(ctx, "follow", &_args315, &_result316); err != nil {
		return
	}
	switch {
	case _result316.E != nil:
		return _result316.E
	}

	return nil
}

// Parameters:
//  - ID
func (p *TalkServiceClient) GetContact(ctx context.Context, id string) (r *Contact, err error) {
	var _args317 TalkServiceGetContactArgs
	_args317.ID = id
	var _result318 TalkServiceGetContactResult
	if err = p.Client_().Call(ctx, "getContact", &_args317, &_result318); err != nil {
		return
	}
	switch {
	case _result318.E != nil:
		return r, _result318.E
	}

	return _result318.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - GroupId
func (p *TalkServiceClient) LeaveGroup(ctx context.Context, reqSeq int32, groupId string) (err error) {
	var _args319 TalkServiceLeaveGroupArgs
	_args319.ReqSeq = reqSeq
	_args319.GroupId = groupId
	var _result320 TalkServiceLeaveGroupResult
	if err = p.Client_().Call(ctx, "leaveGroup", &_args319, &_result320); err != nil {
		return
	}
	switch {
	case _result320.E != nil:
		return _result320.E
	}

	return nil
}

// Parameters:
//  - Seq
//  - ChatMid
//  - LastMessageId
//  - SessionId
func (p *TalkServiceClient) SendChatChecked(ctx context.Context, seq int32, chatMid string, lastMessageId string, sessionId int8) (err error) {
	var _args321 TalkServiceSendChatCheckedArgs
	_args321.Seq = seq
	_args321.ChatMid = chatMid
	_args321.LastMessageId = lastMessageId
	_args321.SessionId = sessionId
	var _result322 TalkServiceSendChatCheckedResult
	if err = p.Client_().Call(ctx, "sendChatChecked", &_args321, &_result322); err != nil {
		return
	}
	switch {
	case _result322.E != nil:
		return _result322.E
	}

	return nil
}

// Parameters:
//  - AuthSessionId
//  - Request
func (p *TalkServiceClient) UpdateIdentifier(ctx context.Context, authSessionId string, request *IdentityCredentialRequest) (r *IdentityCredentialResponse, err error) {
	var _args323 TalkServiceUpdateIdentifierArgs
	_args323.AuthSessionId = authSessionId
	_args323.Request = request
	var _result324 TalkServiceUpdateIdentifierResult
	if err = p.Client_().Call(ctx, "updateIdentifier", &_args323, &_result324); err != nil {
		return
	}
	switch {
	case _result324.E != nil:
		return r, _result324.E
	}

	return _result324.GetSuccess(), nil
}

type TalkServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      TalkService
}

func (p *TalkServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *TalkServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *TalkServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewTalkServiceProcessor(handler TalkService) *TalkServiceProcessor {

	self325 := &TalkServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self325.processorMap["tryFriendRequest"] = &talkServiceProcessorTryFriendRequest{handler: handler}
	self325.processorMap["updateExtendedProfileAttribute"] = &talkServiceProcessorUpdateExtendedProfileAttribute{handler: handler}
	self325.processorMap["verifyAccountMigration"] = &talkServiceProcessorVerifyAccountMigration{handler: handler}
	self325.processorMap["reportLocation"] = &talkServiceProcessorReportLocation{handler: handler}
	self325.processorMap["getPaidCallBalanceList"] = &talkServiceProcessorGetPaidCallBalanceList{handler: handler}
	self325.processorMap["createChat"] = &talkServiceProcessorCreateChat{handler: handler}
	self325.processorMap["findAndAddContactsByMid"] = &talkServiceProcessorFindAndAddContactsByMid{handler: handler}
	self325.processorMap["generateUserTicket"] = &talkServiceProcessorGenerateUserTicket{handler: handler}
	self325.processorMap["getContacts"] = &talkServiceProcessorGetContacts{handler: handler}
	self325.processorMap["getFollowers"] = &talkServiceProcessorGetFollowers{handler: handler}
	self325.processorMap["getLastE2EEPublicKeys"] = &talkServiceProcessorGetLastE2EEPublicKeys{handler: handler}
	self325.processorMap["leaveRoom"] = &talkServiceProcessorLeaveRoom{handler: handler}
	self325.processorMap["notifyRegistrationComplete"] = &talkServiceProcessorNotifyRegistrationComplete{handler: handler}
	self325.processorMap["removeChatRoomAnnouncement"] = &talkServiceProcessorRemoveChatRoomAnnouncement{handler: handler}
	self325.processorMap["sendChatRemoved"] = &talkServiceProcessorSendChatRemoved{handler: handler}
	self325.processorMap["updatePassword"] = &talkServiceProcessorUpdatePassword{handler: handler}
	self325.processorMap["unblockContact"] = &talkServiceProcessorUnblockContact{handler: handler}
	self325.processorMap["verifyIdentityCredentialWithResult"] = &talkServiceProcessorVerifyIdentityCredentialWithResult_{handler: handler}
	self325.processorMap["requestCleanupUserProvidedData"] = &talkServiceProcessorRequestCleanupUserProvidedData{handler: handler}
	self325.processorMap["getBuddyStatusBarV2"] = &talkServiceProcessorGetBuddyStatusBarV2{handler: handler}
	self325.processorMap["getPaidCallHistory"] = &talkServiceProcessorGetPaidCallHistory{handler: handler}
	self325.processorMap["blockContact"] = &talkServiceProcessorBlockContact{handler: handler}
	self325.processorMap["createGroupV2"] = &talkServiceProcessorCreateGroupV2{handler: handler}
	self325.processorMap["findAndAddContactsByPhone"] = &talkServiceProcessorFindAndAddContactsByPhone{handler: handler}
	self325.processorMap["getAcceptedProximityMatches"] = &talkServiceProcessorGetAcceptedProximityMatches{handler: handler}
	self325.processorMap["getChatRoomAnnouncementsBulk"] = &talkServiceProcessorGetChatRoomAnnouncementsBulk{handler: handler}
	self325.processorMap["getRecommendationIds"] = &talkServiceProcessorGetRecommendationIds{handler: handler}
	self325.processorMap["getCountries"] = &talkServiceProcessorGetCountries{handler: handler}
	self325.processorMap["getFollowings"] = &talkServiceProcessorGetFollowings{handler: handler}
	self325.processorMap["getLastOpRevision"] = &talkServiceProcessorGetLastOpRevision{handler: handler}
	self325.processorMap["getRingbackTone"] = &talkServiceProcessorGetRingbackTone{handler: handler}
	self325.processorMap["registerWithPhoneNumber"] = &talkServiceProcessorRegisterWithPhoneNumber{handler: handler}
	self325.processorMap["report"] = &talkServiceProcessorReport{handler: handler}
	self325.processorMap["unblockRecommendation"] = &talkServiceProcessorUnblockRecommendation{handler: handler}
	self325.processorMap["updateGroup"] = &talkServiceProcessorUpdateGroup{handler: handler}
	self325.processorMap["findBuddyContactsByQuery"] = &talkServiceProcessorFindBuddyContactsByQuery{handler: handler}
	self325.processorMap["getPaidCallMetadata"] = &talkServiceProcessorGetPaidCallMetadata{handler: handler}
	self325.processorMap["blockRecommendation"] = &talkServiceProcessorBlockRecommendation{handler: handler}
	self325.processorMap["findAndAddContactsByUserid"] = &talkServiceProcessorFindAndAddContactsByUserid{handler: handler}
	self325.processorMap["getAllChatMids"] = &talkServiceProcessorGetAllChatMids{handler: handler}
	self325.processorMap["getChatRoomAnnouncements"] = &talkServiceProcessorGetChatRoomAnnouncements{handler: handler}
	self325.processorMap["getCountryWithRequestIp"] = &talkServiceProcessorGetCountryWithRequestIp{handler: handler}
	self325.processorMap["getFriendRequests"] = &talkServiceProcessorGetFriendRequests{handler: handler}
	self325.processorMap["getRingtone"] = &talkServiceProcessorGetRingtone{handler: handler}
	self325.processorMap["updateProfile"] = &talkServiceProcessorUpdateProfile{handler: handler}
	self325.processorMap["notifySleep"] = &talkServiceProcessorNotifySleep{handler: handler}
	self325.processorMap["registerWithSnsIdAndIdentityCredential"] = &talkServiceProcessorRegisterWithSnsIdAndIdentityCredential{handler: handler}
	self325.processorMap["removeFollower"] = &talkServiceProcessorRemoveFollower{handler: handler}
	self325.processorMap["requestAccountPasswordReset"] = &talkServiceProcessorRequestAccountPasswordReset{handler: handler}
	self325.processorMap["sendEchoPush"] = &talkServiceProcessorSendEchoPush{handler: handler}
	self325.processorMap["unfollow"] = &talkServiceProcessorUnfollow{handler: handler}
	self325.processorMap["inviteIntoGroupCall"] = &talkServiceProcessorInviteIntoGroupCall{handler: handler}
	self325.processorMap["cancelChatInvitation"] = &talkServiceProcessorCancelChatInvitation{handler: handler}
	self325.processorMap["findChatByTicket"] = &talkServiceProcessorFindChatByTicket{handler: handler}
	self325.processorMap["getAllContactIds"] = &talkServiceProcessorGetAllContactIds{handler: handler}
	self325.processorMap["getChatRoomBGMs"] = &talkServiceProcessorGetChatRoomBGMs{handler: handler}
	self325.processorMap["getE2EEGroupSharedKey"] = &talkServiceProcessorGetE2EEGroupSharedKey{handler: handler}
	self325.processorMap["getGroupIdsInvited"] = &talkServiceProcessorGetGroupIdsInvited{handler: handler}
	self325.processorMap["getProfile"] = &talkServiceProcessorGetProfile{handler: handler}
	self325.processorMap["notifyUpdated"] = &talkServiceProcessorNotifyUpdated{handler: handler}
	self325.processorMap["registerWithSnsId"] = &talkServiceProcessorRegisterWithSnsId{handler: handler}
	self325.processorMap["removeFriendRequest"] = &talkServiceProcessorRemoveFriendRequest{handler: handler}
	self325.processorMap["openAuthSession"] = &talkServiceProcessorOpenAuthSession{handler: handler}
	self325.processorMap["verifyQrcodeWithE2EE"] = &talkServiceProcessorVerifyQrcodeWithE2EE{handler: handler}
	self325.processorMap["getBalance"] = &talkServiceProcessorGetBalance{handler: handler}
	self325.processorMap["unregisterUserAndDevice"] = &talkServiceProcessorUnregisterUserAndDevice{handler: handler}
	self325.processorMap["updateNotificationToken"] = &talkServiceProcessorUpdateNotificationToken{handler: handler}
	self325.processorMap["verifyPhoneNumber"] = &talkServiceProcessorVerifyPhoneNumber{handler: handler}
	self325.processorMap["cancelGroupInvitation"] = &talkServiceProcessorCancelGroupInvitation{handler: handler}
	self325.processorMap["createRoomV2"] = &talkServiceProcessorCreateRoomV2{handler: handler}
	self325.processorMap["findContactByMetaTag"] = &talkServiceProcessorFindContactByMetaTag{handler: handler}
	self325.processorMap["getChats"] = &talkServiceProcessorGetChats{handler: handler}
	self325.processorMap["getGroupIdsJoined"] = &talkServiceProcessorGetGroupIdsJoined{handler: handler}
	self325.processorMap["getRoomsV2"] = &talkServiceProcessorGetRoomsV2{handler: handler}
	self325.processorMap["reissueChatTicket"] = &talkServiceProcessorReissueChatTicket{handler: handler}
	self325.processorMap["sendMessage"] = &talkServiceProcessorSendMessage{handler: handler}
	self325.processorMap["unsendMessage"] = &talkServiceProcessorUnsendMessage{handler: handler}
	self325.processorMap["acquireGroupCallRoute"] = &talkServiceProcessorAcquireGroupCallRoute{handler: handler}
	self325.processorMap["acceptChatInvitationByTicket"] = &talkServiceProcessorAcceptChatInvitationByTicket{handler: handler}
	self325.processorMap["findContactByUserTicket"] = &talkServiceProcessorFindContactByUserTicket{handler: handler}
	self325.processorMap["getE2EEPublicKey"] = &talkServiceProcessorGetE2EEPublicKey{handler: handler}
	self325.processorMap["registerDeviceWithIdentityCredential"] = &talkServiceProcessorRegisterDeviceWithIdentityCredential{handler: handler}
	self325.processorMap["reissueGroupTicket"] = &talkServiceProcessorReissueGroupTicket{handler: handler}
	self325.processorMap["updateProfileAttributes"] = &talkServiceProcessorUpdateProfileAttributes{handler: handler}
	self325.processorMap["verifyQrcode"] = &talkServiceProcessorVerifyQrcode{handler: handler}
	self325.processorMap["acceptChatInvitation"] = &talkServiceProcessorAcceptChatInvitation{handler: handler}
	self325.processorMap["decryptFollowEMid"] = &talkServiceProcessorDecryptFollowEMid{handler: handler}
	self325.processorMap["findContactByUserid"] = &talkServiceProcessorFindContactByUserid{handler: handler}
	self325.processorMap["getServerTime"] = &talkServiceProcessorGetServerTime{handler: handler}
	self325.processorMap["inviteIntoChat"] = &talkServiceProcessorInviteIntoChat{handler: handler}
	self325.processorMap["wakeUpLongPolling"] = &talkServiceProcessorWakeUpLongPolling{handler: handler}
	self325.processorMap["acceptGroupInvitationByTicket"] = &talkServiceProcessorAcceptGroupInvitationByTicket{handler: handler}
	self325.processorMap["deleteOtherFromChat"] = &talkServiceProcessorDeleteOtherFromChat{handler: handler}
	self325.processorMap["findContactsByPhone"] = &talkServiceProcessorFindContactsByPhone{handler: handler}
	self325.processorMap["getGroupsV2"] = &talkServiceProcessorGetGroupsV2{handler: handler}
	self325.processorMap["getGroups"] = &talkServiceProcessorGetGroups{handler: handler}
	self325.processorMap["getGroup"] = &talkServiceProcessorGetGroup{handler: handler}
	self325.processorMap["getCompactGroup"] = &talkServiceProcessorGetCompactGroup{handler: handler}
	self325.processorMap["getGroupWithoutMembers"] = &talkServiceProcessorGetGroupWithoutMembers{handler: handler}
	self325.processorMap["inviteIntoGroup"] = &talkServiceProcessorInviteIntoGroup{handler: handler}
	self325.processorMap["acceptGroupInvitation"] = &talkServiceProcessorAcceptGroupInvitation{handler: handler}
	self325.processorMap["getMessageReadRange"] = &talkServiceProcessorGetMessageReadRange{handler: handler}
	self325.processorMap["deleteSelfFromChat"] = &talkServiceProcessorDeleteSelfFromChat{handler: handler}
	self325.processorMap["getBlockedContactIds"] = &talkServiceProcessorGetBlockedContactIds{handler: handler}
	self325.processorMap["getSettingsAttributes2"] = &talkServiceProcessorGetSettingsAttributes2{handler: handler}
	self325.processorMap["inviteIntoRoom"] = &talkServiceProcessorInviteIntoRoom{handler: handler}
	self325.processorMap["rejectChatInvitation"] = &talkServiceProcessorRejectChatInvitation{handler: handler}
	self325.processorMap["getBlockedRecommendationIds"] = &talkServiceProcessorGetBlockedRecommendationIds{handler: handler}
	self325.processorMap["updateChatRoomBGM"] = &talkServiceProcessorUpdateChatRoomBGM{handler: handler}
	self325.processorMap["findGroupByTicket"] = &talkServiceProcessorFindGroupByTicket{handler: handler}
	self325.processorMap["getRecentFriendRequests"] = &talkServiceProcessorGetRecentFriendRequests{handler: handler}
	self325.processorMap["getSettingsAttributes"] = &talkServiceProcessorGetSettingsAttributes{handler: handler}
	self325.processorMap["rejectGroupInvitation"] = &talkServiceProcessorRejectGroupInvitation{handler: handler}
	self325.processorMap["updateChat"] = &talkServiceProcessorUpdateChat{handler: handler}
	self325.processorMap["updateSettingsAttributes2"] = &talkServiceProcessorUpdateSettingsAttributes2{handler: handler}
	self325.processorMap["getContactRegistration"] = &talkServiceProcessorGetContactRegistration{handler: handler}
	self325.processorMap["getSettings"] = &talkServiceProcessorGetSettings{handler: handler}
	self325.processorMap["noop"] = &talkServiceProcessorNoop{handler: handler}
	self325.processorMap["removeAllMessages"] = &talkServiceProcessorRemoveAllMessages{handler: handler}
	self325.processorMap["updateContactSetting"] = &talkServiceProcessorUpdateContactSetting{handler: handler}
	self325.processorMap["getGroupCall"] = &talkServiceProcessorGetGroupCall{handler: handler}
	self325.processorMap["fetchOps"] = &talkServiceProcessorFetchOps{handler: handler}
	self325.processorMap["fetchOperations"] = &talkServiceProcessorFetchOperations{handler: handler}
	self325.processorMap["kickoutFromGroup"] = &talkServiceProcessorKickoutFromGroup{handler: handler}
	self325.processorMap["getExtendedProfile"] = &talkServiceProcessorGetExtendedProfile{handler: handler}
	self325.processorMap["acquireEncryptedAccessToken"] = &talkServiceProcessorAcquireEncryptedAccessToken{handler: handler}
	self325.processorMap["createChatRoomAnnouncement"] = &talkServiceProcessorCreateChatRoomAnnouncement{handler: handler}
	self325.processorMap["findAndAddContactByMetaTag"] = &talkServiceProcessorFindAndAddContactByMetaTag{handler: handler}
	self325.processorMap["follow"] = &talkServiceProcessorFollow{handler: handler}
	self325.processorMap["getContact"] = &talkServiceProcessorGetContact{handler: handler}
	self325.processorMap["leaveGroup"] = &talkServiceProcessorLeaveGroup{handler: handler}
	self325.processorMap["sendChatChecked"] = &talkServiceProcessorSendChatChecked{handler: handler}
	self325.processorMap["updateIdentifier"] = &talkServiceProcessorUpdateIdentifier{handler: handler}
	return self325
}

func (p *TalkServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x326 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x326.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x326

}

type talkServiceProcessorTryFriendRequest struct {
	handler TalkService
}

func (p *talkServiceProcessorTryFriendRequest) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceTryFriendRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("tryFriendRequest", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceTryFriendRequestResult{}
	var err2 error
	if err2 = p.handler.TryFriendRequest(ctx, args.MidOrEMid, args.Method, args.FriendRequestParams); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing tryFriendRequest: "+err2.Error())
			oprot.WriteMessageBegin("tryFriendRequest", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("tryFriendRequest", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateExtendedProfileAttribute struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateExtendedProfileAttribute) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceUpdateExtendedProfileAttributeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateExtendedProfileAttribute", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceUpdateExtendedProfileAttributeResult{}
	var err2 error
	if err2 = p.handler.UpdateExtendedProfileAttribute(ctx, args.ReqSeq, args.Attr, args.ExtendedProfile); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateExtendedProfileAttribute: "+err2.Error())
			oprot.WriteMessageBegin("updateExtendedProfileAttribute", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateExtendedProfileAttribute", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorVerifyAccountMigration struct {
	handler TalkService
}

func (p *talkServiceProcessorVerifyAccountMigration) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceVerifyAccountMigrationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("verifyAccountMigration", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceVerifyAccountMigrationResult{}
	var err2 error
	if err2 = p.handler.VerifyAccountMigration(ctx, args.MigrationSessionId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyAccountMigration: "+err2.Error())
			oprot.WriteMessageBegin("verifyAccountMigration", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("verifyAccountMigration", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorReportLocation struct {
	handler TalkService
}

func (p *talkServiceProcessorReportLocation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceReportLocationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("reportLocation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceReportLocationResult{}
	var err2 error
	if err2 = p.handler.ReportLocation(ctx, args.Location, args.Trigger, args.NetworkStatus); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportLocation: "+err2.Error())
			oprot.WriteMessageBegin("reportLocation", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("reportLocation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetPaidCallBalanceList struct {
	handler TalkService
}

func (p *talkServiceProcessorGetPaidCallBalanceList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetPaidCallBalanceListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getPaidCallBalanceList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetPaidCallBalanceListResult{}
	var retval []*PaidCallBalance
	var err2 error
	if retval, err2 = p.handler.GetPaidCallBalanceList(ctx, args.Language); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPaidCallBalanceList: "+err2.Error())
			oprot.WriteMessageBegin("getPaidCallBalanceList", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getPaidCallBalanceList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorCreateChat struct {
	handler TalkService
}

func (p *talkServiceProcessorCreateChat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceCreateChatArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createChat", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceCreateChatResult{}
	var retval *CreateChatResponse
	var err2 error
	if retval, err2 = p.handler.CreateChat(ctx, args.Requests); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createChat: "+err2.Error())
			oprot.WriteMessageBegin("createChat", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createChat", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFindAndAddContactsByMid struct {
	handler TalkService
}

func (p *talkServiceProcessorFindAndAddContactsByMid) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceFindAndAddContactsByMidArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findAndAddContactsByMid", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceFindAndAddContactsByMidResult{}
	var retval map[string]*Contact
	var err2 error
	if retval, err2 = p.handler.FindAndAddContactsByMid(ctx, args.ReqSeq, args.Mid, args.Type, args.Reference); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAndAddContactsByMid: "+err2.Error())
			oprot.WriteMessageBegin("findAndAddContactsByMid", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findAndAddContactsByMid", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGenerateUserTicket struct {
	handler TalkService
}

func (p *talkServiceProcessorGenerateUserTicket) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGenerateUserTicketArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("generateUserTicket", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGenerateUserTicketResult{}
	var retval *Ticket
	var err2 error
	if retval, err2 = p.handler.GenerateUserTicket(ctx, args.ExpirationTime, args.MaxUseCount); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing generateUserTicket: "+err2.Error())
			oprot.WriteMessageBegin("generateUserTicket", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("generateUserTicket", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetContacts struct {
	handler TalkService
}

func (p *talkServiceProcessorGetContacts) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetContactsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getContacts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetContactsResult{}
	var retval []*Contact
	var err2 error
	if retval, err2 = p.handler.GetContacts(ctx, args.Ids); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getContacts: "+err2.Error())
			oprot.WriteMessageBegin("getContacts", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getContacts", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetFollowers struct {
	handler TalkService
}

func (p *talkServiceProcessorGetFollowers) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetFollowersArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getFollowers", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetFollowersResult{}
	var retval *GetFollowersResponse
	var err2 error
	if retval, err2 = p.handler.GetFollowers(ctx, args.GetFollowersRequest); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getFollowers: "+err2.Error())
			oprot.WriteMessageBegin("getFollowers", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getFollowers", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetLastE2EEPublicKeys struct {
	handler TalkService
}

func (p *talkServiceProcessorGetLastE2EEPublicKeys) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetLastE2EEPublicKeysArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getLastE2EEPublicKeys", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetLastE2EEPublicKeysResult{}
	var retval map[string]*E2EEPublicKey
	var err2 error
	if retval, err2 = p.handler.GetLastE2EEPublicKeys(ctx, args.ChatMid); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLastE2EEPublicKeys: "+err2.Error())
			oprot.WriteMessageBegin("getLastE2EEPublicKeys", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getLastE2EEPublicKeys", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorLeaveRoom struct {
	handler TalkService
}

func (p *talkServiceProcessorLeaveRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceLeaveRoomArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("leaveRoom", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceLeaveRoomResult{}
	var err2 error
	if err2 = p.handler.LeaveRoom(ctx, args.ReqSeq, args.RoomId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing leaveRoom: "+err2.Error())
			oprot.WriteMessageBegin("leaveRoom", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("leaveRoom", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorNotifyRegistrationComplete struct {
	handler TalkService
}

func (p *talkServiceProcessorNotifyRegistrationComplete) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceNotifyRegistrationCompleteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("notifyRegistrationComplete", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceNotifyRegistrationCompleteResult{}
	var err2 error
	if err2 = p.handler.NotifyRegistrationComplete(ctx, args.UdidHash, args.ApplicationTypeWithExtensions); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing notifyRegistrationComplete: "+err2.Error())
			oprot.WriteMessageBegin("notifyRegistrationComplete", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("notifyRegistrationComplete", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRemoveChatRoomAnnouncement struct {
	handler TalkService
}

func (p *talkServiceProcessorRemoveChatRoomAnnouncement) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceRemoveChatRoomAnnouncementArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("removeChatRoomAnnouncement", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceRemoveChatRoomAnnouncementResult{}
	var err2 error
	if err2 = p.handler.RemoveChatRoomAnnouncement(ctx, args.ReqSeq, args.ChatRoomMid, args.AnnouncementSeq); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeChatRoomAnnouncement: "+err2.Error())
			oprot.WriteMessageBegin("removeChatRoomAnnouncement", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("removeChatRoomAnnouncement", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorSendChatRemoved struct {
	handler TalkService
}

func (p *talkServiceProcessorSendChatRemoved) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceSendChatRemovedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sendChatRemoved", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceSendChatRemovedResult{}
	var err2 error
	if err2 = p.handler.SendChatRemoved(ctx, args.Seq, args.ChatMid, args.LastMessageId, args.SessionId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendChatRemoved: "+err2.Error())
			oprot.WriteMessageBegin("sendChatRemoved", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("sendChatRemoved", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdatePassword struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdatePassword) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceUpdatePasswordArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updatePassword", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceUpdatePasswordResult{}
	var retval *IdentityCredentialResponse
	var err2 error
	if retval, err2 = p.handler.UpdatePassword(ctx, args.AuthSessionId, args.Request); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updatePassword: "+err2.Error())
			oprot.WriteMessageBegin("updatePassword", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("updatePassword", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUnblockContact struct {
	handler TalkService
}

func (p *talkServiceProcessorUnblockContact) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceUnblockContactArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("unblockContact", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceUnblockContactResult{}
	var err2 error
	if err2 = p.handler.UnblockContact(ctx, args.ReqSeq, args.ID, args.Reference); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unblockContact: "+err2.Error())
			oprot.WriteMessageBegin("unblockContact", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("unblockContact", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorVerifyIdentityCredentialWithResult_ struct {
	handler TalkService
}

func (p *talkServiceProcessorVerifyIdentityCredentialWithResult_) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceVerifyIdentityCredentialWithResultArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("verifyIdentityCredentialWithResult", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceVerifyIdentityCredentialWithResultResult{}
	var retval *UserAuthStatus
	var err2 error
	if retval, err2 = p.handler.VerifyIdentityCredentialWithResult_(ctx, args.IdentityCredential, args.MigrationPincodeSessionId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyIdentityCredentialWithResult: "+err2.Error())
			oprot.WriteMessageBegin("verifyIdentityCredentialWithResult", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("verifyIdentityCredentialWithResult", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRequestCleanupUserProvidedData struct {
	handler TalkService
}

func (p *talkServiceProcessorRequestCleanupUserProvidedData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceRequestCleanupUserProvidedDataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("requestCleanupUserProvidedData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceRequestCleanupUserProvidedDataResult{}
	var err2 error
	if err2 = p.handler.RequestCleanupUserProvidedData(ctx, args.DataTypes); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing requestCleanupUserProvidedData: "+err2.Error())
			oprot.WriteMessageBegin("requestCleanupUserProvidedData", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("requestCleanupUserProvidedData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetBuddyStatusBarV2 struct {
	handler TalkService
}

func (p *talkServiceProcessorGetBuddyStatusBarV2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetBuddyStatusBarV2Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getBuddyStatusBarV2", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetBuddyStatusBarV2Result{}
	var retval *BuddyStatusBar
	var err2 error
	if retval, err2 = p.handler.GetBuddyStatusBarV2(ctx, args.Request); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBuddyStatusBarV2: "+err2.Error())
			oprot.WriteMessageBegin("getBuddyStatusBarV2", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getBuddyStatusBarV2", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetPaidCallHistory struct {
	handler TalkService
}

func (p *talkServiceProcessorGetPaidCallHistory) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetPaidCallHistoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getPaidCallHistory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetPaidCallHistoryResult{}
	var retval *PaidCallHistoryResult_
	var err2 error
	if retval, err2 = p.handler.GetPaidCallHistory(ctx, args.Start, args.Size, args.Language); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPaidCallHistory: "+err2.Error())
			oprot.WriteMessageBegin("getPaidCallHistory", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getPaidCallHistory", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorBlockContact struct {
	handler TalkService
}

func (p *talkServiceProcessorBlockContact) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceBlockContactArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("blockContact", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceBlockContactResult{}
	var err2 error
	if err2 = p.handler.BlockContact(ctx, args.ReqSeq, args.ID); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing blockContact: "+err2.Error())
			oprot.WriteMessageBegin("blockContact", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("blockContact", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorCreateGroupV2 struct {
	handler TalkService
}

func (p *talkServiceProcessorCreateGroupV2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceCreateGroupV2Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createGroupV2", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceCreateGroupV2Result{}
	var retval *Group
	var err2 error
	if retval, err2 = p.handler.CreateGroupV2(ctx, args.Seq, args.Name, args.ContactIds); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createGroupV2: "+err2.Error())
			oprot.WriteMessageBegin("createGroupV2", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createGroupV2", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFindAndAddContactsByPhone struct {
	handler TalkService
}

func (p *talkServiceProcessorFindAndAddContactsByPhone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceFindAndAddContactsByPhoneArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findAndAddContactsByPhone", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceFindAndAddContactsByPhoneResult{}
	var retval map[string]*Contact
	var err2 error
	if retval, err2 = p.handler.FindAndAddContactsByPhone(ctx, args.ReqSeq, args.Phones, args.Reference); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAndAddContactsByPhone: "+err2.Error())
			oprot.WriteMessageBegin("findAndAddContactsByPhone", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findAndAddContactsByPhone", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetAcceptedProximityMatches struct {
	handler TalkService
}

func (p *talkServiceProcessorGetAcceptedProximityMatches) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetAcceptedProximityMatchesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getAcceptedProximityMatches", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetAcceptedProximityMatchesResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetAcceptedProximityMatches(ctx, args.SessionId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAcceptedProximityMatches: "+err2.Error())
			oprot.WriteMessageBegin("getAcceptedProximityMatches", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getAcceptedProximityMatches", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetChatRoomAnnouncementsBulk struct {
	handler TalkService
}

func (p *talkServiceProcessorGetChatRoomAnnouncementsBulk) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetChatRoomAnnouncementsBulkArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getChatRoomAnnouncementsBulk", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetChatRoomAnnouncementsBulkResult{}
	var retval map[string][]*ChatRoomAnnouncement
	var err2 error
	if retval, err2 = p.handler.GetChatRoomAnnouncementsBulk(ctx, args.ChatRoomMids, args.SyncReason); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getChatRoomAnnouncementsBulk: "+err2.Error())
			oprot.WriteMessageBegin("getChatRoomAnnouncementsBulk", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getChatRoomAnnouncementsBulk", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetRecommendationIds struct {
	handler TalkService
}

func (p *talkServiceProcessorGetRecommendationIds) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetRecommendationIdsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRecommendationIds", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetRecommendationIdsResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetRecommendationIds(ctx, args.SyncReason); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRecommendationIds: "+err2.Error())
			oprot.WriteMessageBegin("getRecommendationIds", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getRecommendationIds", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetCountries struct {
	handler TalkService
}

func (p *talkServiceProcessorGetCountries) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetCountriesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getCountries", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetCountriesResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetCountries(ctx, args.CountryGroup); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCountries: "+err2.Error())
			oprot.WriteMessageBegin("getCountries", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getCountries", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetFollowings struct {
	handler TalkService
}

func (p *talkServiceProcessorGetFollowings) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetFollowingsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getFollowings", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetFollowingsResult{}
	var retval *GetFollowingsResponse
	var err2 error
	if retval, err2 = p.handler.GetFollowings(ctx, args.GetFollowingsRequest); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getFollowings: "+err2.Error())
			oprot.WriteMessageBegin("getFollowings", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getFollowings", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetLastOpRevision struct {
	handler TalkService
}

func (p *talkServiceProcessorGetLastOpRevision) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetLastOpRevisionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getLastOpRevision", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetLastOpRevisionResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.GetLastOpRevision(ctx); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLastOpRevision: "+err2.Error())
			oprot.WriteMessageBegin("getLastOpRevision", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getLastOpRevision", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetRingbackTone struct {
	handler TalkService
}

func (p *talkServiceProcessorGetRingbackTone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetRingbackToneArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRingbackTone", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetRingbackToneResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.GetRingbackTone(ctx); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRingbackTone: "+err2.Error())
			oprot.WriteMessageBegin("getRingbackTone", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getRingbackTone", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRegisterWithPhoneNumber struct {
	handler TalkService
}

func (p *talkServiceProcessorRegisterWithPhoneNumber) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceRegisterWithPhoneNumberArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("registerWithPhoneNumber", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceRegisterWithPhoneNumberResult{}
	var retval *RegisterWithPhoneNumberResult_
	var err2 error
	if retval, err2 = p.handler.RegisterWithPhoneNumber(ctx, args.SessionId, args.MigrationPincodeSessionId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerWithPhoneNumber: "+err2.Error())
			oprot.WriteMessageBegin("registerWithPhoneNumber", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("registerWithPhoneNumber", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorReport struct {
	handler TalkService
}

func (p *talkServiceProcessorReport) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceReportArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("report", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceReportResult{}
	var err2 error
	if err2 = p.handler.Report(ctx, args.SyncOpRevision, args.Category, args.Report); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing report: "+err2.Error())
			oprot.WriteMessageBegin("report", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("report", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUnblockRecommendation struct {
	handler TalkService
}

func (p *talkServiceProcessorUnblockRecommendation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceUnblockRecommendationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("unblockRecommendation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceUnblockRecommendationResult{}
	var err2 error
	if err2 = p.handler.UnblockRecommendation(ctx, args.ReqSeq, args.ID); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unblockRecommendation: "+err2.Error())
			oprot.WriteMessageBegin("unblockRecommendation", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("unblockRecommendation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateGroup struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceUpdateGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceUpdateGroupResult{}
	var err2 error
	if err2 = p.handler.UpdateGroup(ctx, args.ReqSeq, args.Group); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateGroup: "+err2.Error())
			oprot.WriteMessageBegin("updateGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFindBuddyContactsByQuery struct {
	handler TalkService
}

func (p *talkServiceProcessorFindBuddyContactsByQuery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceFindBuddyContactsByQueryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findBuddyContactsByQuery", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceFindBuddyContactsByQueryResult{}
	var retval []*BuddySearchResult_
	var err2 error
	if retval, err2 = p.handler.FindBuddyContactsByQuery(ctx, args.Language, args.Country, args.Query, args.FromIndex, args.Count, args.RequestSource); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findBuddyContactsByQuery: "+err2.Error())
			oprot.WriteMessageBegin("findBuddyContactsByQuery", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findBuddyContactsByQuery", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetPaidCallMetadata struct {
	handler TalkService
}

func (p *talkServiceProcessorGetPaidCallMetadata) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetPaidCallMetadataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getPaidCallMetadata", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetPaidCallMetadataResult{}
	var retval *PaidCallMetadataResult_
	var err2 error
	if retval, err2 = p.handler.GetPaidCallMetadata(ctx, args.Language); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPaidCallMetadata: "+err2.Error())
			oprot.WriteMessageBegin("getPaidCallMetadata", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getPaidCallMetadata", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorBlockRecommendation struct {
	handler TalkService
}

func (p *talkServiceProcessorBlockRecommendation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceBlockRecommendationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("blockRecommendation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceBlockRecommendationResult{}
	var err2 error
	if err2 = p.handler.BlockRecommendation(ctx, args.ReqSeq, args.ID); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing blockRecommendation: "+err2.Error())
			oprot.WriteMessageBegin("blockRecommendation", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("blockRecommendation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFindAndAddContactsByUserid struct {
	handler TalkService
}

func (p *talkServiceProcessorFindAndAddContactsByUserid) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceFindAndAddContactsByUseridArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findAndAddContactsByUserid", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceFindAndAddContactsByUseridResult{}
	var retval map[string]*Contact
	var err2 error
	if retval, err2 = p.handler.FindAndAddContactsByUserid(ctx, args.ReqSeq, args.SearchId, args.Reference); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAndAddContactsByUserid: "+err2.Error())
			oprot.WriteMessageBegin("findAndAddContactsByUserid", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findAndAddContactsByUserid", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetAllChatMids struct {
	handler TalkService
}

func (p *talkServiceProcessorGetAllChatMids) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetAllChatMidsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getAllChatMids", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetAllChatMidsResult{}
	var retval *GetAllChatMidsResponse
	var err2 error
	if retval, err2 = p.handler.GetAllChatMids(ctx, args.Request, args.SyncReason); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllChatMids: "+err2.Error())
			oprot.WriteMessageBegin("getAllChatMids", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getAllChatMids", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetChatRoomAnnouncements struct {
	handler TalkService
}

func (p *talkServiceProcessorGetChatRoomAnnouncements) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetChatRoomAnnouncementsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getChatRoomAnnouncements", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetChatRoomAnnouncementsResult{}
	var retval []*ChatRoomAnnouncement
	var err2 error
	if retval, err2 = p.handler.GetChatRoomAnnouncements(ctx, args.ChatRoomMids); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getChatRoomAnnouncements: "+err2.Error())
			oprot.WriteMessageBegin("getChatRoomAnnouncements", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getChatRoomAnnouncements", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetCountryWithRequestIp struct {
	handler TalkService
}

func (p *talkServiceProcessorGetCountryWithRequestIp) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetCountryWithRequestIpArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getCountryWithRequestIp", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetCountryWithRequestIpResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetCountryWithRequestIp(ctx); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCountryWithRequestIp: "+err2.Error())
			oprot.WriteMessageBegin("getCountryWithRequestIp", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getCountryWithRequestIp", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetFriendRequests struct {
	handler TalkService
}

func (p *talkServiceProcessorGetFriendRequests) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetFriendRequestsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getFriendRequests", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetFriendRequestsResult{}
	var retval []*FriendRequest
	var err2 error
	if retval, err2 = p.handler.GetFriendRequests(ctx, args.Direction, args.LastSeenSeqId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getFriendRequests: "+err2.Error())
			oprot.WriteMessageBegin("getFriendRequests", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getFriendRequests", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetRingtone struct {
	handler TalkService
}

func (p *talkServiceProcessorGetRingtone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetRingtoneArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRingtone", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetRingtoneResult{}
	var retval *Ringtone
	var err2 error
	if retval, err2 = p.handler.GetRingtone(ctx); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRingtone: "+err2.Error())
			oprot.WriteMessageBegin("getRingtone", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getRingtone", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateProfile struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceUpdateProfileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateProfile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceUpdateProfileResult{}
	var err2 error
	if err2 = p.handler.UpdateProfile(ctx, args.ReqSeq, args.Profile); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateProfile: "+err2.Error())
			oprot.WriteMessageBegin("updateProfile", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateProfile", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorNotifySleep struct {
	handler TalkService
}

func (p *talkServiceProcessorNotifySleep) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceNotifySleepArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("notifySleep", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceNotifySleepResult{}
	var err2 error
	if err2 = p.handler.NotifySleep(ctx, args.LastRev, args.Badge); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing notifySleep: "+err2.Error())
			oprot.WriteMessageBegin("notifySleep", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("notifySleep", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRegisterWithSnsIdAndIdentityCredential struct {
	handler TalkService
}

func (p *talkServiceProcessorRegisterWithSnsIdAndIdentityCredential) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("registerWithSnsIdAndIdentityCredential", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceRegisterWithSnsIdAndIdentityCredentialResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.RegisterWithSnsIdAndIdentityCredential(ctx, args.SnsIdType, args.SnsAccessToken, args.IdentityCredential, args.Region, args.UdidHash, args.DeviceInfo, args.MigrationPincodeSessionId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerWithSnsIdAndIdentityCredential: "+err2.Error())
			oprot.WriteMessageBegin("registerWithSnsIdAndIdentityCredential", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("registerWithSnsIdAndIdentityCredential", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRemoveFollower struct {
	handler TalkService
}

func (p *talkServiceProcessorRemoveFollower) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceRemoveFollowerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("removeFollower", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceRemoveFollowerResult{}
	var err2 error
	if err2 = p.handler.RemoveFollower(ctx, args.RemoveFollowerRequest); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeFollower: "+err2.Error())
			oprot.WriteMessageBegin("removeFollower", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("removeFollower", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRequestAccountPasswordReset struct {
	handler TalkService
}

func (p *talkServiceProcessorRequestAccountPasswordReset) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceRequestAccountPasswordResetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("requestAccountPasswordReset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceRequestAccountPasswordResetResult{}
	var err2 error
	if err2 = p.handler.RequestAccountPasswordReset(ctx, args.Provider, args.Identifier, args.Locale); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing requestAccountPasswordReset: "+err2.Error())
			oprot.WriteMessageBegin("requestAccountPasswordReset", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("requestAccountPasswordReset", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorSendEchoPush struct {
	handler TalkService
}

func (p *talkServiceProcessorSendEchoPush) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceSendEchoPushArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sendEchoPush", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceSendEchoPushResult{}
	var err2 error
	if err2 = p.handler.SendEchoPush(ctx, args.Text); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendEchoPush: "+err2.Error())
			oprot.WriteMessageBegin("sendEchoPush", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("sendEchoPush", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUnfollow struct {
	handler TalkService
}

func (p *talkServiceProcessorUnfollow) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceUnfollowArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("unfollow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceUnfollowResult{}
	var err2 error
	if err2 = p.handler.Unfollow(ctx, args.UnfollowRequest); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unfollow: "+err2.Error())
			oprot.WriteMessageBegin("unfollow", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("unfollow", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorInviteIntoGroupCall struct {
	handler TalkService
}

func (p *talkServiceProcessorInviteIntoGroupCall) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceInviteIntoGroupCallArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("inviteIntoGroupCall", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceInviteIntoGroupCallResult{}
	var err2 error
	if err2 = p.handler.InviteIntoGroupCall(ctx, args.ChatMid, args.MemberMids, args.MediaType); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing inviteIntoGroupCall: "+err2.Error())
			oprot.WriteMessageBegin("inviteIntoGroupCall", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("inviteIntoGroupCall", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorCancelChatInvitation struct {
	handler TalkService
}

func (p *talkServiceProcessorCancelChatInvitation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceCancelChatInvitationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("cancelChatInvitation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceCancelChatInvitationResult{}
	var retval *CancelChatInvitationResponse
	var err2 error
	if retval, err2 = p.handler.CancelChatInvitation(ctx, args.Request); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cancelChatInvitation: "+err2.Error())
			oprot.WriteMessageBegin("cancelChatInvitation", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("cancelChatInvitation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFindChatByTicket struct {
	handler TalkService
}

func (p *talkServiceProcessorFindChatByTicket) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceFindChatByTicketArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findChatByTicket", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceFindChatByTicketResult{}
	var retval *FindChatByTicketResponse
	var err2 error
	if retval, err2 = p.handler.FindChatByTicket(ctx, args.Request); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findChatByTicket: "+err2.Error())
			oprot.WriteMessageBegin("findChatByTicket", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findChatByTicket", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetAllContactIds struct {
	handler TalkService
}

func (p *talkServiceProcessorGetAllContactIds) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetAllContactIdsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getAllContactIds", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetAllContactIdsResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetAllContactIds(ctx, args.SyncReason); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllContactIds: "+err2.Error())
			oprot.WriteMessageBegin("getAllContactIds", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getAllContactIds", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetChatRoomBGMs struct {
	handler TalkService
}

func (p *talkServiceProcessorGetChatRoomBGMs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetChatRoomBGMsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getChatRoomBGMs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetChatRoomBGMsResult{}
	var retval map[string]*ChatRoomBGM
	var err2 error
	if retval, err2 = p.handler.GetChatRoomBGMs(ctx, args.ChatRoomMids, args.SyncReason); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getChatRoomBGMs: "+err2.Error())
			oprot.WriteMessageBegin("getChatRoomBGMs", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getChatRoomBGMs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetE2EEGroupSharedKey struct {
	handler TalkService
}

func (p *talkServiceProcessorGetE2EEGroupSharedKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetE2EEGroupSharedKeyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getE2EEGroupSharedKey", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetE2EEGroupSharedKeyResult{}
	var retval *E2EEGroupSharedKey
	var err2 error
	if retval, err2 = p.handler.GetE2EEGroupSharedKey(ctx, args.KeyVersion, args.ChatMid, args.GroupKeyId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getE2EEGroupSharedKey: "+err2.Error())
			oprot.WriteMessageBegin("getE2EEGroupSharedKey", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getE2EEGroupSharedKey", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetGroupIdsInvited struct {
	handler TalkService
}

func (p *talkServiceProcessorGetGroupIdsInvited) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetGroupIdsInvitedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getGroupIdsInvited", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetGroupIdsInvitedResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetGroupIdsInvited(ctx, args.SyncReason); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroupIdsInvited: "+err2.Error())
			oprot.WriteMessageBegin("getGroupIdsInvited", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getGroupIdsInvited", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetProfile struct {
	handler TalkService
}

func (p *talkServiceProcessorGetProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetProfileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getProfile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetProfileResult{}
	var retval *Profile
	var err2 error
	if retval, err2 = p.handler.GetProfile(ctx, args.SyncReason); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProfile: "+err2.Error())
			oprot.WriteMessageBegin("getProfile", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getProfile", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorNotifyUpdated struct {
	handler TalkService
}

func (p *talkServiceProcessorNotifyUpdated) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceNotifyUpdatedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("notifyUpdated", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceNotifyUpdatedResult{}
	var err2 error
	if err2 = p.handler.NotifyUpdated(ctx, args.LastRev, args.DeviceInfo, args.UdidHash, args.OldUdidHash); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing notifyUpdated: "+err2.Error())
			oprot.WriteMessageBegin("notifyUpdated", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("notifyUpdated", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRegisterWithSnsId struct {
	handler TalkService
}

func (p *talkServiceProcessorRegisterWithSnsId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceRegisterWithSnsIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("registerWithSnsId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceRegisterWithSnsIdResult{}
	var retval *RegisterWithSnsIdResult_
	var err2 error
	if retval, err2 = p.handler.RegisterWithSnsId(ctx, args.SnsIdType, args.SnsAccessToken, args.Region, args.UdidHash, args.DeviceInfo, args.Mid, args.MigrationPincodeSessionId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerWithSnsId: "+err2.Error())
			oprot.WriteMessageBegin("registerWithSnsId", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("registerWithSnsId", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRemoveFriendRequest struct {
	handler TalkService
}

func (p *talkServiceProcessorRemoveFriendRequest) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceRemoveFriendRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("removeFriendRequest", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceRemoveFriendRequestResult{}
	var err2 error
	if err2 = p.handler.RemoveFriendRequest(ctx, args.Direction, args.MidOrEMid); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeFriendRequest: "+err2.Error())
			oprot.WriteMessageBegin("removeFriendRequest", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("removeFriendRequest", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorOpenAuthSession struct {
	handler TalkService
}

func (p *talkServiceProcessorOpenAuthSession) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceOpenAuthSessionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("openAuthSession", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceOpenAuthSessionResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.OpenAuthSession(ctx, args.Request); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing openAuthSession: "+err2.Error())
			oprot.WriteMessageBegin("openAuthSession", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("openAuthSession", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorVerifyQrcodeWithE2EE struct {
	handler TalkService
}

func (p *talkServiceProcessorVerifyQrcodeWithE2EE) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceVerifyQrcodeWithE2EEArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("verifyQrcodeWithE2EE", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceVerifyQrcodeWithE2EEResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.VerifyQrcodeWithE2EE(ctx, args.Verifier, args.PinCode, args.ErrorCode, args.PublicKey, args.EncryptedKeyChain, args.HashKeyChain); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyQrcodeWithE2EE: "+err2.Error())
			oprot.WriteMessageBegin("verifyQrcodeWithE2EE", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("verifyQrcodeWithE2EE", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetBalance struct {
	handler TalkService
}

func (p *talkServiceProcessorGetBalance) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetBalanceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getBalance", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetBalanceResult{}
	var retval *GetBalanceResponse
	var err2 error
	if retval, err2 = p.handler.GetBalance(ctx, args.Request); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBalance: "+err2.Error())
			oprot.WriteMessageBegin("getBalance", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getBalance", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUnregisterUserAndDevice struct {
	handler TalkService
}

func (p *talkServiceProcessorUnregisterUserAndDevice) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceUnregisterUserAndDeviceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("unregisterUserAndDevice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceUnregisterUserAndDeviceResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.UnregisterUserAndDevice(ctx); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unregisterUserAndDevice: "+err2.Error())
			oprot.WriteMessageBegin("unregisterUserAndDevice", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("unregisterUserAndDevice", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateNotificationToken struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateNotificationToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceUpdateNotificationTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateNotificationToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceUpdateNotificationTokenResult{}
	var err2 error
	if err2 = p.handler.UpdateNotificationToken(ctx, args.Type, args.Token); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateNotificationToken: "+err2.Error())
			oprot.WriteMessageBegin("updateNotificationToken", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateNotificationToken", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorVerifyPhoneNumber struct {
	handler TalkService
}

func (p *talkServiceProcessorVerifyPhoneNumber) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceVerifyPhoneNumberArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("verifyPhoneNumber", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceVerifyPhoneNumberResult{}
	var retval *PhoneVerificationResult_
	var err2 error
	if retval, err2 = p.handler.VerifyPhoneNumber(ctx, args.SessionId, args.PinCode, args.UdidHash, args.MigrationPincodeSessionId, args.OldUdidHash); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyPhoneNumber: "+err2.Error())
			oprot.WriteMessageBegin("verifyPhoneNumber", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("verifyPhoneNumber", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorCancelGroupInvitation struct {
	handler TalkService
}

func (p *talkServiceProcessorCancelGroupInvitation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceCancelGroupInvitationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("cancelGroupInvitation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceCancelGroupInvitationResult{}
	var err2 error
	if err2 = p.handler.CancelGroupInvitation(ctx, args.ReqSeq, args.GroupId, args.ContactIds); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cancelGroupInvitation: "+err2.Error())
			oprot.WriteMessageBegin("cancelGroupInvitation", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("cancelGroupInvitation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorCreateRoomV2 struct {
	handler TalkService
}

func (p *talkServiceProcessorCreateRoomV2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceCreateRoomV2Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createRoomV2", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceCreateRoomV2Result{}
	var retval *Room
	var err2 error
	if retval, err2 = p.handler.CreateRoomV2(ctx, args.ReqSeq, args.ContactIds); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createRoomV2: "+err2.Error())
			oprot.WriteMessageBegin("createRoomV2", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createRoomV2", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFindContactByMetaTag struct {
	handler TalkService
}

func (p *talkServiceProcessorFindContactByMetaTag) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceFindContactByMetaTagArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findContactByMetaTag", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceFindContactByMetaTagResult{}
	var retval *Contact
	var err2 error
	if retval, err2 = p.handler.FindContactByMetaTag(ctx, args.SearchId, args.Reference); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findContactByMetaTag: "+err2.Error())
			oprot.WriteMessageBegin("findContactByMetaTag", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findContactByMetaTag", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetChats struct {
	handler TalkService
}

func (p *talkServiceProcessorGetChats) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetChatsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getChats", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetChatsResult{}
	var retval *GetChatsResponse
	var err2 error
	if retval, err2 = p.handler.GetChats(ctx, args.Request); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getChats: "+err2.Error())
			oprot.WriteMessageBegin("getChats", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getChats", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetGroupIdsJoined struct {
	handler TalkService
}

func (p *talkServiceProcessorGetGroupIdsJoined) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetGroupIdsJoinedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getGroupIdsJoined", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetGroupIdsJoinedResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetGroupIdsJoined(ctx, args.SyncReason); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroupIdsJoined: "+err2.Error())
			oprot.WriteMessageBegin("getGroupIdsJoined", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getGroupIdsJoined", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetRoomsV2 struct {
	handler TalkService
}

func (p *talkServiceProcessorGetRoomsV2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetRoomsV2Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRoomsV2", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetRoomsV2Result{}
	var retval []*Room
	var err2 error
	if retval, err2 = p.handler.GetRoomsV2(ctx, args.RoomIds); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRoomsV2: "+err2.Error())
			oprot.WriteMessageBegin("getRoomsV2", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getRoomsV2", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorReissueChatTicket struct {
	handler TalkService
}

func (p *talkServiceProcessorReissueChatTicket) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceReissueChatTicketArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("reissueChatTicket", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceReissueChatTicketResult{}
	var retval *ReissueChatTicketResponse
	var err2 error
	if retval, err2 = p.handler.ReissueChatTicket(ctx, args.Request); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reissueChatTicket: "+err2.Error())
			oprot.WriteMessageBegin("reissueChatTicket", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("reissueChatTicket", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorSendMessage struct {
	handler TalkService
}

func (p *talkServiceProcessorSendMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceSendMessageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sendMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceSendMessageResult{}
	var retval *Message
	var err2 error
	if retval, err2 = p.handler.SendMessage(ctx, args.Seq, args.Message); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendMessage: "+err2.Error())
			oprot.WriteMessageBegin("sendMessage", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("sendMessage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUnsendMessage struct {
	handler TalkService
}

func (p *talkServiceProcessorUnsendMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceUnsendMessageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("unsendMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceUnsendMessageResult{}
	var err2 error
	if err2 = p.handler.UnsendMessage(ctx, args.Seq, args.MessageId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unsendMessage: "+err2.Error())
			oprot.WriteMessageBegin("unsendMessage", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("unsendMessage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorAcquireGroupCallRoute struct {
	handler TalkService
}

func (p *talkServiceProcessorAcquireGroupCallRoute) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceAcquireGroupCallRouteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("acquireGroupCallRoute", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceAcquireGroupCallRouteResult{}
	var retval *GroupCallRoute
	var err2 error
	if retval, err2 = p.handler.AcquireGroupCallRoute(ctx, args.ChatMid, args.MediaType, args.IsInitialHost, args.Capabilities); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acquireGroupCallRoute: "+err2.Error())
			oprot.WriteMessageBegin("acquireGroupCallRoute", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("acquireGroupCallRoute", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorAcceptChatInvitationByTicket struct {
	handler TalkService
}

func (p *talkServiceProcessorAcceptChatInvitationByTicket) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceAcceptChatInvitationByTicketArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("acceptChatInvitationByTicket", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceAcceptChatInvitationByTicketResult{}
	var retval *AcceptChatInvitationByTicketResponse
	var err2 error
	if retval, err2 = p.handler.AcceptChatInvitationByTicket(ctx, args.Request); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acceptChatInvitationByTicket: "+err2.Error())
			oprot.WriteMessageBegin("acceptChatInvitationByTicket", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("acceptChatInvitationByTicket", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFindContactByUserTicket struct {
	handler TalkService
}

func (p *talkServiceProcessorFindContactByUserTicket) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceFindContactByUserTicketArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findContactByUserTicket", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceFindContactByUserTicketResult{}
	var retval *Contact
	var err2 error
	if retval, err2 = p.handler.FindContactByUserTicket(ctx, args.TicketIdWithTag); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findContactByUserTicket: "+err2.Error())
			oprot.WriteMessageBegin("findContactByUserTicket", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findContactByUserTicket", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetE2EEPublicKey struct {
	handler TalkService
}

func (p *talkServiceProcessorGetE2EEPublicKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetE2EEPublicKeyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getE2EEPublicKey", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetE2EEPublicKeyResult{}
	var retval []*E2EEPublicKey
	var err2 error
	if retval, err2 = p.handler.GetE2EEPublicKey(ctx, args.Mid, args.KeyVersion, args.KeyId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getE2EEPublicKey: "+err2.Error())
			oprot.WriteMessageBegin("getE2EEPublicKey", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getE2EEPublicKey", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRegisterDeviceWithIdentityCredential struct {
	handler TalkService
}

func (p *talkServiceProcessorRegisterDeviceWithIdentityCredential) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceRegisterDeviceWithIdentityCredentialArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("registerDeviceWithIdentityCredential", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceRegisterDeviceWithIdentityCredentialResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.RegisterDeviceWithIdentityCredential(ctx, args.SessionId, args.Provider, args.Identifier, args.Verifier, args.MigrationPincodeSessionId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerDeviceWithIdentityCredential: "+err2.Error())
			oprot.WriteMessageBegin("registerDeviceWithIdentityCredential", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("registerDeviceWithIdentityCredential", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorReissueGroupTicket struct {
	handler TalkService
}

func (p *talkServiceProcessorReissueGroupTicket) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceReissueGroupTicketArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("reissueGroupTicket", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceReissueGroupTicketResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.ReissueGroupTicket(ctx, args.GroupMid); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reissueGroupTicket: "+err2.Error())
			oprot.WriteMessageBegin("reissueGroupTicket", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("reissueGroupTicket", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateProfileAttributes struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateProfileAttributes) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceUpdateProfileAttributesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateProfileAttributes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceUpdateProfileAttributesResult{}
	var err2 error
	if err2 = p.handler.UpdateProfileAttributes(ctx, args.ReqSeq, args.Request); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateProfileAttributes: "+err2.Error())
			oprot.WriteMessageBegin("updateProfileAttributes", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateProfileAttributes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorVerifyQrcode struct {
	handler TalkService
}

func (p *talkServiceProcessorVerifyQrcode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceVerifyQrcodeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("verifyQrcode", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceVerifyQrcodeResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.VerifyQrcode(ctx, args.Verifier, args.PinCode); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyQrcode: "+err2.Error())
			oprot.WriteMessageBegin("verifyQrcode", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("verifyQrcode", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorAcceptChatInvitation struct {
	handler TalkService
}

func (p *talkServiceProcessorAcceptChatInvitation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceAcceptChatInvitationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("acceptChatInvitation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceAcceptChatInvitationResult{}
	var retval *AcceptChatInvitationResponse
	var err2 error
	if retval, err2 = p.handler.AcceptChatInvitation(ctx, args.Request); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acceptChatInvitation: "+err2.Error())
			oprot.WriteMessageBegin("acceptChatInvitation", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("acceptChatInvitation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorDecryptFollowEMid struct {
	handler TalkService
}

func (p *talkServiceProcessorDecryptFollowEMid) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceDecryptFollowEMidArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("decryptFollowEMid", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceDecryptFollowEMidResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.DecryptFollowEMid(ctx, args.EMid); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing decryptFollowEMid: "+err2.Error())
			oprot.WriteMessageBegin("decryptFollowEMid", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("decryptFollowEMid", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFindContactByUserid struct {
	handler TalkService
}

func (p *talkServiceProcessorFindContactByUserid) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceFindContactByUseridArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findContactByUserid", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceFindContactByUseridResult{}
	var retval *Contact
	var err2 error
	if retval, err2 = p.handler.FindContactByUserid(ctx, args.SearchId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findContactByUserid: "+err2.Error())
			oprot.WriteMessageBegin("findContactByUserid", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findContactByUserid", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetServerTime struct {
	handler TalkService
}

func (p *talkServiceProcessorGetServerTime) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetServerTimeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getServerTime", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetServerTimeResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.GetServerTime(ctx); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getServerTime: "+err2.Error())
			oprot.WriteMessageBegin("getServerTime", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getServerTime", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorInviteIntoChat struct {
	handler TalkService
}

func (p *talkServiceProcessorInviteIntoChat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceInviteIntoChatArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("inviteIntoChat", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceInviteIntoChatResult{}
	var retval *InviteIntoChatResponse
	var err2 error
	if retval, err2 = p.handler.InviteIntoChat(ctx, args.Request); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing inviteIntoChat: "+err2.Error())
			oprot.WriteMessageBegin("inviteIntoChat", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("inviteIntoChat", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorWakeUpLongPolling struct {
	handler TalkService
}

func (p *talkServiceProcessorWakeUpLongPolling) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceWakeUpLongPollingArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("wakeUpLongPolling", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceWakeUpLongPollingResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.WakeUpLongPolling(ctx, args.ClientRevision); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing wakeUpLongPolling: "+err2.Error())
			oprot.WriteMessageBegin("wakeUpLongPolling", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("wakeUpLongPolling", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorAcceptGroupInvitationByTicket struct {
	handler TalkService
}

func (p *talkServiceProcessorAcceptGroupInvitationByTicket) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceAcceptGroupInvitationByTicketArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("acceptGroupInvitationByTicket", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceAcceptGroupInvitationByTicketResult{}
	var err2 error
	if err2 = p.handler.AcceptGroupInvitationByTicket(ctx, args.ReqSeq, args.GroupMid, args.TicketId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acceptGroupInvitationByTicket: "+err2.Error())
			oprot.WriteMessageBegin("acceptGroupInvitationByTicket", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("acceptGroupInvitationByTicket", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorDeleteOtherFromChat struct {
	handler TalkService
}

func (p *talkServiceProcessorDeleteOtherFromChat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceDeleteOtherFromChatArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteOtherFromChat", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceDeleteOtherFromChatResult{}
	var retval *DeleteOtherFromChatResponse
	var err2 error
	if retval, err2 = p.handler.DeleteOtherFromChat(ctx, args.Request); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteOtherFromChat: "+err2.Error())
			oprot.WriteMessageBegin("deleteOtherFromChat", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("deleteOtherFromChat", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFindContactsByPhone struct {
	handler TalkService
}

func (p *talkServiceProcessorFindContactsByPhone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceFindContactsByPhoneArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findContactsByPhone", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceFindContactsByPhoneResult{}
	var retval map[string]*Contact
	var err2 error
	if retval, err2 = p.handler.FindContactsByPhone(ctx, args.Phones); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findContactsByPhone: "+err2.Error())
			oprot.WriteMessageBegin("findContactsByPhone", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findContactsByPhone", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetGroupsV2 struct {
	handler TalkService
}

func (p *talkServiceProcessorGetGroupsV2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetGroupsV2Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getGroupsV2", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetGroupsV2Result{}
	var retval []*Group
	var err2 error
	if retval, err2 = p.handler.GetGroupsV2(ctx, args.GroupId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroupsV2: "+err2.Error())
			oprot.WriteMessageBegin("getGroupsV2", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getGroupsV2", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetGroups struct {
	handler TalkService
}

func (p *talkServiceProcessorGetGroups) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetGroupsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getGroups", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetGroupsResult{}
	var retval []*Group
	var err2 error
	if retval, err2 = p.handler.GetGroups(ctx, args.GroupId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroups: "+err2.Error())
			oprot.WriteMessageBegin("getGroups", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getGroups", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetGroup struct {
	handler TalkService
}

func (p *talkServiceProcessorGetGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetGroupResult{}
	var retval *Group
	var err2 error
	if retval, err2 = p.handler.GetGroup(ctx, args.GroupId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroup: "+err2.Error())
			oprot.WriteMessageBegin("getGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetCompactGroup struct {
	handler TalkService
}

func (p *talkServiceProcessorGetCompactGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetCompactGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getCompactGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetCompactGroupResult{}
	var retval *Group
	var err2 error
	if retval, err2 = p.handler.GetCompactGroup(ctx, args.GroupId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCompactGroup: "+err2.Error())
			oprot.WriteMessageBegin("getCompactGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getCompactGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetGroupWithoutMembers struct {
	handler TalkService
}

func (p *talkServiceProcessorGetGroupWithoutMembers) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetGroupWithoutMembersArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getGroupWithoutMembers", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetGroupWithoutMembersResult{}
	var retval *Group
	var err2 error
	if retval, err2 = p.handler.GetGroupWithoutMembers(ctx, args.GroupId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroupWithoutMembers: "+err2.Error())
			oprot.WriteMessageBegin("getGroupWithoutMembers", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getGroupWithoutMembers", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorInviteIntoGroup struct {
	handler TalkService
}

func (p *talkServiceProcessorInviteIntoGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceInviteIntoGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("inviteIntoGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceInviteIntoGroupResult{}
	var err2 error
	if err2 = p.handler.InviteIntoGroup(ctx, args.ReqSeq, args.GroupId, args.ContactIds); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing inviteIntoGroup: "+err2.Error())
			oprot.WriteMessageBegin("inviteIntoGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("inviteIntoGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorAcceptGroupInvitation struct {
	handler TalkService
}

func (p *talkServiceProcessorAcceptGroupInvitation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceAcceptGroupInvitationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("acceptGroupInvitation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceAcceptGroupInvitationResult{}
	var err2 error
	if err2 = p.handler.AcceptGroupInvitation(ctx, args.ReqSeq, args.GroupId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acceptGroupInvitation: "+err2.Error())
			oprot.WriteMessageBegin("acceptGroupInvitation", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("acceptGroupInvitation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetMessageReadRange struct {
	handler TalkService
}

func (p *talkServiceProcessorGetMessageReadRange) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetMessageReadRangeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getMessageReadRange", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetMessageReadRangeResult{}
	var retval []*TMessageReadRange
	var err2 error
	if retval, err2 = p.handler.GetMessageReadRange(ctx, args.ChatIds, args.SyncReason); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMessageReadRange: "+err2.Error())
			oprot.WriteMessageBegin("getMessageReadRange", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getMessageReadRange", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorDeleteSelfFromChat struct {
	handler TalkService
}

func (p *talkServiceProcessorDeleteSelfFromChat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceDeleteSelfFromChatArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteSelfFromChat", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceDeleteSelfFromChatResult{}
	var retval *DeleteSelfFromChatResponse
	var err2 error
	if retval, err2 = p.handler.DeleteSelfFromChat(ctx, args.Request); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteSelfFromChat: "+err2.Error())
			oprot.WriteMessageBegin("deleteSelfFromChat", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("deleteSelfFromChat", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetBlockedContactIds struct {
	handler TalkService
}

func (p *talkServiceProcessorGetBlockedContactIds) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetBlockedContactIdsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getBlockedContactIds", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetBlockedContactIdsResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetBlockedContactIds(ctx, args.SyncReason); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBlockedContactIds: "+err2.Error())
			oprot.WriteMessageBegin("getBlockedContactIds", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getBlockedContactIds", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetSettingsAttributes2 struct {
	handler TalkService
}

func (p *talkServiceProcessorGetSettingsAttributes2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetSettingsAttributes2Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSettingsAttributes2", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetSettingsAttributes2Result{}
	var retval *Settings
	var err2 error
	if retval, err2 = p.handler.GetSettingsAttributes2(ctx, args.AttributesToRetrieve); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSettingsAttributes2: "+err2.Error())
			oprot.WriteMessageBegin("getSettingsAttributes2", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getSettingsAttributes2", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorInviteIntoRoom struct {
	handler TalkService
}

func (p *talkServiceProcessorInviteIntoRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceInviteIntoRoomArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("inviteIntoRoom", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceInviteIntoRoomResult{}
	var err2 error
	if err2 = p.handler.InviteIntoRoom(ctx, args.ReqSeq, args.RoomId, args.ContactIds); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing inviteIntoRoom: "+err2.Error())
			oprot.WriteMessageBegin("inviteIntoRoom", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("inviteIntoRoom", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRejectChatInvitation struct {
	handler TalkService
}

func (p *talkServiceProcessorRejectChatInvitation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceRejectChatInvitationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rejectChatInvitation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceRejectChatInvitationResult{}
	var retval *RejectChatInvitationResponse
	var err2 error
	if retval, err2 = p.handler.RejectChatInvitation(ctx, args.Request); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rejectChatInvitation: "+err2.Error())
			oprot.WriteMessageBegin("rejectChatInvitation", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rejectChatInvitation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetBlockedRecommendationIds struct {
	handler TalkService
}

func (p *talkServiceProcessorGetBlockedRecommendationIds) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetBlockedRecommendationIdsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getBlockedRecommendationIds", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetBlockedRecommendationIdsResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetBlockedRecommendationIds(ctx, args.SyncReason); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBlockedRecommendationIds: "+err2.Error())
			oprot.WriteMessageBegin("getBlockedRecommendationIds", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getBlockedRecommendationIds", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateChatRoomBGM struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateChatRoomBGM) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceUpdateChatRoomBGMArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateChatRoomBGM", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceUpdateChatRoomBGMResult{}
	var retval *ChatRoomBGM
	var err2 error
	if retval, err2 = p.handler.UpdateChatRoomBGM(ctx, args.ReqSeq, args.ChatRoomMid, args.ChatRoomBGMInfo); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateChatRoomBGM: "+err2.Error())
			oprot.WriteMessageBegin("updateChatRoomBGM", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("updateChatRoomBGM", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFindGroupByTicket struct {
	handler TalkService
}

func (p *talkServiceProcessorFindGroupByTicket) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceFindGroupByTicketArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findGroupByTicket", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceFindGroupByTicketResult{}
	var retval *Group
	var err2 error
	if retval, err2 = p.handler.FindGroupByTicket(ctx, args.TicketId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findGroupByTicket: "+err2.Error())
			oprot.WriteMessageBegin("findGroupByTicket", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findGroupByTicket", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetRecentFriendRequests struct {
	handler TalkService
}

func (p *talkServiceProcessorGetRecentFriendRequests) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetRecentFriendRequestsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRecentFriendRequests", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetRecentFriendRequestsResult{}
	var retval *FriendRequestsInfo
	var err2 error
	if retval, err2 = p.handler.GetRecentFriendRequests(ctx, args.SyncReason); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRecentFriendRequests: "+err2.Error())
			oprot.WriteMessageBegin("getRecentFriendRequests", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getRecentFriendRequests", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetSettingsAttributes struct {
	handler TalkService
}

func (p *talkServiceProcessorGetSettingsAttributes) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetSettingsAttributesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSettingsAttributes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetSettingsAttributesResult{}
	var retval *Settings
	var err2 error
	if retval, err2 = p.handler.GetSettingsAttributes(ctx, args.AttrBitset); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSettingsAttributes: "+err2.Error())
			oprot.WriteMessageBegin("getSettingsAttributes", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getSettingsAttributes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRejectGroupInvitation struct {
	handler TalkService
}

func (p *talkServiceProcessorRejectGroupInvitation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceRejectGroupInvitationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rejectGroupInvitation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceRejectGroupInvitationResult{}
	var err2 error
	if err2 = p.handler.RejectGroupInvitation(ctx, args.ReqSeq, args.GroupId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rejectGroupInvitation: "+err2.Error())
			oprot.WriteMessageBegin("rejectGroupInvitation", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("rejectGroupInvitation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateChat struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateChat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceUpdateChatArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateChat", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceUpdateChatResult{}
	var retval *UpdateChatResponse
	var err2 error
	if retval, err2 = p.handler.UpdateChat(ctx, args.Request); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateChat: "+err2.Error())
			oprot.WriteMessageBegin("updateChat", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("updateChat", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateSettingsAttributes2 struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateSettingsAttributes2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceUpdateSettingsAttributes2Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateSettingsAttributes2", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceUpdateSettingsAttributes2Result{}
	var retval []SettingsAttributes
	var err2 error
	if retval, err2 = p.handler.UpdateSettingsAttributes2(ctx, args.ReqSeq, args.AttributesToUpdate, args.Settings); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateSettingsAttributes2: "+err2.Error())
			oprot.WriteMessageBegin("updateSettingsAttributes2", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("updateSettingsAttributes2", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetContactRegistration struct {
	handler TalkService
}

func (p *talkServiceProcessorGetContactRegistration) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetContactRegistrationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getContactRegistration", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetContactRegistrationResult{}
	var retval *ContactRegistration
	var err2 error
	if retval, err2 = p.handler.GetContactRegistration(ctx, args.ID, args.Type); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getContactRegistration: "+err2.Error())
			oprot.WriteMessageBegin("getContactRegistration", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getContactRegistration", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetSettings struct {
	handler TalkService
}

func (p *talkServiceProcessorGetSettings) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetSettingsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSettings", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetSettingsResult{}
	var retval *Settings
	var err2 error
	if retval, err2 = p.handler.GetSettings(ctx, args.SyncReason); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSettings: "+err2.Error())
			oprot.WriteMessageBegin("getSettings", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getSettings", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorNoop struct {
	handler TalkService
}

func (p *talkServiceProcessorNoop) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceNoopArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("noop", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceNoopResult{}
	var err2 error
	if err2 = p.handler.Noop(ctx); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing noop: "+err2.Error())
			oprot.WriteMessageBegin("noop", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("noop", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRemoveAllMessages struct {
	handler TalkService
}

func (p *talkServiceProcessorRemoveAllMessages) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceRemoveAllMessagesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("removeAllMessages", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceRemoveAllMessagesResult{}
	var err2 error
	if err2 = p.handler.RemoveAllMessages(ctx, args.Seq, args.LastMessageId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeAllMessages: "+err2.Error())
			oprot.WriteMessageBegin("removeAllMessages", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("removeAllMessages", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateContactSetting struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateContactSetting) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceUpdateContactSettingArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateContactSetting", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceUpdateContactSettingResult{}
	var err2 error
	if err2 = p.handler.UpdateContactSetting(ctx, args.ReqSeq, args.Mid, args.Flag, args.Value); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateContactSetting: "+err2.Error())
			oprot.WriteMessageBegin("updateContactSetting", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateContactSetting", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetGroupCall struct {
	handler TalkService
}

func (p *talkServiceProcessorGetGroupCall) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetGroupCallArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getGroupCall", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetGroupCallResult{}
	var retval *GroupCall
	var err2 error
	if retval, err2 = p.handler.GetGroupCall(ctx, args.ChatMid); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroupCall: "+err2.Error())
			oprot.WriteMessageBegin("getGroupCall", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getGroupCall", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFetchOps struct {
	handler TalkService
}

func (p *talkServiceProcessorFetchOps) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceFetchOpsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("fetchOps", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceFetchOpsResult{}
	var retval []*Operation
	var err2 error
	if retval, err2 = p.handler.FetchOps(ctx, args.LocalRev, args.Count, args.GlobalRev, args.IndividualRev); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchOps: "+err2.Error())
			oprot.WriteMessageBegin("fetchOps", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("fetchOps", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFetchOperations struct {
	handler TalkService
}

func (p *talkServiceProcessorFetchOperations) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceFetchOperationsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("fetchOperations", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceFetchOperationsResult{}
	var retval []*Operation
	var err2 error
	if retval, err2 = p.handler.FetchOperations(ctx, args.LocalRev, args.Count); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchOperations: "+err2.Error())
			oprot.WriteMessageBegin("fetchOperations", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("fetchOperations", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorKickoutFromGroup struct {
	handler TalkService
}

func (p *talkServiceProcessorKickoutFromGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceKickoutFromGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("kickoutFromGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceKickoutFromGroupResult{}
	var err2 error
	if err2 = p.handler.KickoutFromGroup(ctx, args.ReqSeq, args.GroupId, args.ContactIds); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing kickoutFromGroup: "+err2.Error())
			oprot.WriteMessageBegin("kickoutFromGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("kickoutFromGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetExtendedProfile struct {
	handler TalkService
}

func (p *talkServiceProcessorGetExtendedProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetExtendedProfileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getExtendedProfile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetExtendedProfileResult{}
	var retval *ExtendedProfile
	var err2 error
	if retval, err2 = p.handler.GetExtendedProfile(ctx, args.SyncReason); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getExtendedProfile: "+err2.Error())
			oprot.WriteMessageBegin("getExtendedProfile", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getExtendedProfile", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorAcquireEncryptedAccessToken struct {
	handler TalkService
}

func (p *talkServiceProcessorAcquireEncryptedAccessToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceAcquireEncryptedAccessTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("acquireEncryptedAccessToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceAcquireEncryptedAccessTokenResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.AcquireEncryptedAccessToken(ctx, args.FeatureType); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acquireEncryptedAccessToken: "+err2.Error())
			oprot.WriteMessageBegin("acquireEncryptedAccessToken", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("acquireEncryptedAccessToken", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorCreateChatRoomAnnouncement struct {
	handler TalkService
}

func (p *talkServiceProcessorCreateChatRoomAnnouncement) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceCreateChatRoomAnnouncementArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createChatRoomAnnouncement", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceCreateChatRoomAnnouncementResult{}
	var retval *ChatRoomAnnouncement
	var err2 error
	if retval, err2 = p.handler.CreateChatRoomAnnouncement(ctx, args.ReqSeq, args.ChatRoomMid, args.Type, args.Contents); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createChatRoomAnnouncement: "+err2.Error())
			oprot.WriteMessageBegin("createChatRoomAnnouncement", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createChatRoomAnnouncement", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFindAndAddContactByMetaTag struct {
	handler TalkService
}

func (p *talkServiceProcessorFindAndAddContactByMetaTag) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceFindAndAddContactByMetaTagArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findAndAddContactByMetaTag", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceFindAndAddContactByMetaTagResult{}
	var retval *Contact
	var err2 error
	if retval, err2 = p.handler.FindAndAddContactByMetaTag(ctx, args.ReqSeq, args.SearchId, args.Reference); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAndAddContactByMetaTag: "+err2.Error())
			oprot.WriteMessageBegin("findAndAddContactByMetaTag", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findAndAddContactByMetaTag", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFollow struct {
	handler TalkService
}

func (p *talkServiceProcessorFollow) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceFollowArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("follow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceFollowResult{}
	var err2 error
	if err2 = p.handler.Follow(ctx, args.FollowRequest); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing follow: "+err2.Error())
			oprot.WriteMessageBegin("follow", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("follow", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetContact struct {
	handler TalkService
}

func (p *talkServiceProcessorGetContact) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetContactArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getContact", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetContactResult{}
	var retval *Contact
	var err2 error
	if retval, err2 = p.handler.GetContact(ctx, args.ID); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getContact: "+err2.Error())
			oprot.WriteMessageBegin("getContact", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getContact", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorLeaveGroup struct {
	handler TalkService
}

func (p *talkServiceProcessorLeaveGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceLeaveGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("leaveGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceLeaveGroupResult{}
	var err2 error
	if err2 = p.handler.LeaveGroup(ctx, args.ReqSeq, args.GroupId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing leaveGroup: "+err2.Error())
			oprot.WriteMessageBegin("leaveGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("leaveGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorSendChatChecked struct {
	handler TalkService
}

func (p *talkServiceProcessorSendChatChecked) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceSendChatCheckedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sendChatChecked", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceSendChatCheckedResult{}
	var err2 error
	if err2 = p.handler.SendChatChecked(ctx, args.Seq, args.ChatMid, args.LastMessageId, args.SessionId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendChatChecked: "+err2.Error())
			oprot.WriteMessageBegin("sendChatChecked", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("sendChatChecked", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateIdentifier struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateIdentifier) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceUpdateIdentifierArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateIdentifier", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceUpdateIdentifierResult{}
	var retval *IdentityCredentialResponse
	var err2 error
	if retval, err2 = p.handler.UpdateIdentifier(ctx, args.AuthSessionId, args.Request); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateIdentifier: "+err2.Error())
			oprot.WriteMessageBegin("updateIdentifier", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("updateIdentifier", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - MidOrEMid
//  - Method
//  - FriendRequestParams
type TalkServiceTryFriendRequestArgs struct {
	MidOrEMid           string  `thrift:"midOrEMid,1" db:"midOrEMid" json:"midOrEMid"`
	Method              Method_ `thrift:"method,2" db:"method" json:"method"`
	FriendRequestParams string  `thrift:"friendRequestParams,3" db:"friendRequestParams" json:"friendRequestParams"`
}

func NewTalkServiceTryFriendRequestArgs() *TalkServiceTryFriendRequestArgs {
	return &TalkServiceTryFriendRequestArgs{}
}

func (p *TalkServiceTryFriendRequestArgs) GetMidOrEMid() string {
	return p.MidOrEMid
}

func (p *TalkServiceTryFriendRequestArgs) GetMethod() Method_ {
	return p.Method
}

func (p *TalkServiceTryFriendRequestArgs) GetFriendRequestParams() string {
	return p.FriendRequestParams
}
func (p *TalkServiceTryFriendRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceTryFriendRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MidOrEMid = v
	}
	return nil
}

func (p *TalkServiceTryFriendRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Method_(v)
		p.Method = temp
	}
	return nil
}

func (p *TalkServiceTryFriendRequestArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.FriendRequestParams = v
	}
	return nil
}

func (p *TalkServiceTryFriendRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("tryFriendRequest_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceTryFriendRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("midOrEMid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:midOrEMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.MidOrEMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.midOrEMid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:midOrEMid: ", p), err)
	}
	return err
}

func (p *TalkServiceTryFriendRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("method", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:method: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Method)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.method (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:method: ", p), err)
	}
	return err
}

func (p *TalkServiceTryFriendRequestArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("friendRequestParams", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:friendRequestParams: ", p), err)
	}
	if err := oprot.WriteString(string(p.FriendRequestParams)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.friendRequestParams (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:friendRequestParams: ", p), err)
	}
	return err
}

func (p *TalkServiceTryFriendRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceTryFriendRequestArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceTryFriendRequestResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceTryFriendRequestResult() *TalkServiceTryFriendRequestResult {
	return &TalkServiceTryFriendRequestResult{}
}

var TalkServiceTryFriendRequestResult_E_DEFAULT *TalkException

func (p *TalkServiceTryFriendRequestResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceTryFriendRequestResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceTryFriendRequestResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceTryFriendRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceTryFriendRequestResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceTryFriendRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("tryFriendRequest_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceTryFriendRequestResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceTryFriendRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceTryFriendRequestResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Attr
//  - ExtendedProfile
type TalkServiceUpdateExtendedProfileAttributeArgs struct {
	ReqSeq          int32                              `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	Attr            UpdateExtendedProfileAttributeAttr `thrift:"attr,2" db:"attr" json:"attr"`
	ExtendedProfile *ExtendedProfile                   `thrift:"extendedProfile,3" db:"extendedProfile" json:"extendedProfile"`
}

func NewTalkServiceUpdateExtendedProfileAttributeArgs() *TalkServiceUpdateExtendedProfileAttributeArgs {
	return &TalkServiceUpdateExtendedProfileAttributeArgs{}
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) GetAttr() UpdateExtendedProfileAttributeAttr {
	return p.Attr
}

var TalkServiceUpdateExtendedProfileAttributeArgs_ExtendedProfile_DEFAULT *ExtendedProfile

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) GetExtendedProfile() *ExtendedProfile {
	if !p.IsSetExtendedProfile() {
		return TalkServiceUpdateExtendedProfileAttributeArgs_ExtendedProfile_DEFAULT
	}
	return p.ExtendedProfile
}
func (p *TalkServiceUpdateExtendedProfileAttributeArgs) IsSetExtendedProfile() bool {
	return p.ExtendedProfile != nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := UpdateExtendedProfileAttributeAttr(v)
		p.Attr = temp
	}
	return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) ReadField3(iprot thrift.TProtocol) error {
	p.ExtendedProfile = &ExtendedProfile{}
	if err := p.ExtendedProfile.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExtendedProfile), err)
	}
	return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateExtendedProfileAttribute_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attr", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:attr: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Attr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.attr (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:attr: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extendedProfile", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extendedProfile: ", p), err)
	}
	if err := p.ExtendedProfile.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExtendedProfile), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extendedProfile: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateExtendedProfileAttributeArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateExtendedProfileAttributeResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateExtendedProfileAttributeResult() *TalkServiceUpdateExtendedProfileAttributeResult {
	return &TalkServiceUpdateExtendedProfileAttributeResult{}
}

var TalkServiceUpdateExtendedProfileAttributeResult_E_DEFAULT *TalkException

func (p *TalkServiceUpdateExtendedProfileAttributeResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceUpdateExtendedProfileAttributeResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceUpdateExtendedProfileAttributeResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateExtendedProfileAttribute_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUpdateExtendedProfileAttributeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateExtendedProfileAttributeResult(%+v)", *p)
}

// Attributes:
//  - MigrationSessionId
type TalkServiceVerifyAccountMigrationArgs struct {
	// unused field # 1
	MigrationSessionId string `thrift:"migrationSessionId,2" db:"migrationSessionId" json:"migrationSessionId"`
}

func NewTalkServiceVerifyAccountMigrationArgs() *TalkServiceVerifyAccountMigrationArgs {
	return &TalkServiceVerifyAccountMigrationArgs{}
}

func (p *TalkServiceVerifyAccountMigrationArgs) GetMigrationSessionId() string {
	return p.MigrationSessionId
}
func (p *TalkServiceVerifyAccountMigrationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceVerifyAccountMigrationArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MigrationSessionId = v
	}
	return nil
}

func (p *TalkServiceVerifyAccountMigrationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("verifyAccountMigration_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceVerifyAccountMigrationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("migrationSessionId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:migrationSessionId: ", p), err)
	}
	if err := oprot.WriteString(string(p.MigrationSessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.migrationSessionId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:migrationSessionId: ", p), err)
	}
	return err
}

func (p *TalkServiceVerifyAccountMigrationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceVerifyAccountMigrationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceVerifyAccountMigrationResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceVerifyAccountMigrationResult() *TalkServiceVerifyAccountMigrationResult {
	return &TalkServiceVerifyAccountMigrationResult{}
}

var TalkServiceVerifyAccountMigrationResult_E_DEFAULT *TalkException

func (p *TalkServiceVerifyAccountMigrationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceVerifyAccountMigrationResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceVerifyAccountMigrationResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceVerifyAccountMigrationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceVerifyAccountMigrationResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceVerifyAccountMigrationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("verifyAccountMigration_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceVerifyAccountMigrationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceVerifyAccountMigrationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceVerifyAccountMigrationResult(%+v)", *p)
}

// Attributes:
//  - Location
//  - Trigger
//  - NetworkStatus
type TalkServiceReportLocationArgs struct {
	Location      *Geolocation         `thrift:"location,1" db:"location" json:"location"`
	Trigger       Trigger              `thrift:"trigger,2" db:"trigger" json:"trigger"`
	NetworkStatus *ClientNetworkStatus `thrift:"networkStatus,3" db:"networkStatus" json:"networkStatus"`
}

func NewTalkServiceReportLocationArgs() *TalkServiceReportLocationArgs {
	return &TalkServiceReportLocationArgs{}
}

var TalkServiceReportLocationArgs_Location_DEFAULT *Geolocation

func (p *TalkServiceReportLocationArgs) GetLocation() *Geolocation {
	if !p.IsSetLocation() {
		return TalkServiceReportLocationArgs_Location_DEFAULT
	}
	return p.Location
}

func (p *TalkServiceReportLocationArgs) GetTrigger() Trigger {
	return p.Trigger
}

var TalkServiceReportLocationArgs_NetworkStatus_DEFAULT *ClientNetworkStatus

func (p *TalkServiceReportLocationArgs) GetNetworkStatus() *ClientNetworkStatus {
	if !p.IsSetNetworkStatus() {
		return TalkServiceReportLocationArgs_NetworkStatus_DEFAULT
	}
	return p.NetworkStatus
}
func (p *TalkServiceReportLocationArgs) IsSetLocation() bool {
	return p.Location != nil
}

func (p *TalkServiceReportLocationArgs) IsSetNetworkStatus() bool {
	return p.NetworkStatus != nil
}

func (p *TalkServiceReportLocationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceReportLocationArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Location = &Geolocation{}
	if err := p.Location.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Location), err)
	}
	return nil
}

func (p *TalkServiceReportLocationArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Trigger(v)
		p.Trigger = temp
	}
	return nil
}

func (p *TalkServiceReportLocationArgs) ReadField3(iprot thrift.TProtocol) error {
	p.NetworkStatus = &ClientNetworkStatus{}
	if err := p.NetworkStatus.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NetworkStatus), err)
	}
	return nil
}

func (p *TalkServiceReportLocationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportLocation_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceReportLocationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("location", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:location: ", p), err)
	}
	if err := p.Location.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Location), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:location: ", p), err)
	}
	return err
}

func (p *TalkServiceReportLocationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("trigger", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:trigger: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Trigger)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.trigger (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:trigger: ", p), err)
	}
	return err
}

func (p *TalkServiceReportLocationArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("networkStatus", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:networkStatus: ", p), err)
	}
	if err := p.NetworkStatus.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NetworkStatus), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:networkStatus: ", p), err)
	}
	return err
}

func (p *TalkServiceReportLocationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceReportLocationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceReportLocationResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceReportLocationResult() *TalkServiceReportLocationResult {
	return &TalkServiceReportLocationResult{}
}

var TalkServiceReportLocationResult_E_DEFAULT *TalkException

func (p *TalkServiceReportLocationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceReportLocationResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceReportLocationResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceReportLocationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceReportLocationResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceReportLocationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportLocation_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceReportLocationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceReportLocationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceReportLocationResult(%+v)", *p)
}

// Attributes:
//  - Language
type TalkServiceGetPaidCallBalanceListArgs struct {
	// unused field # 1
	Language string `thrift:"language,2" db:"language" json:"language"`
}

func NewTalkServiceGetPaidCallBalanceListArgs() *TalkServiceGetPaidCallBalanceListArgs {
	return &TalkServiceGetPaidCallBalanceListArgs{}
}

func (p *TalkServiceGetPaidCallBalanceListArgs) GetLanguage() string {
	return p.Language
}
func (p *TalkServiceGetPaidCallBalanceListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetPaidCallBalanceListArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Language = v
	}
	return nil
}

func (p *TalkServiceGetPaidCallBalanceListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPaidCallBalanceList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetPaidCallBalanceListArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("language", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:language: ", p), err)
	}
	if err := oprot.WriteString(string(p.Language)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.language (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:language: ", p), err)
	}
	return err
}

func (p *TalkServiceGetPaidCallBalanceListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetPaidCallBalanceListArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetPaidCallBalanceListResult struct {
	Success []*PaidCallBalance `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException     `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetPaidCallBalanceListResult() *TalkServiceGetPaidCallBalanceListResult {
	return &TalkServiceGetPaidCallBalanceListResult{}
}

var TalkServiceGetPaidCallBalanceListResult_Success_DEFAULT []*PaidCallBalance

func (p *TalkServiceGetPaidCallBalanceListResult) GetSuccess() []*PaidCallBalance {
	return p.Success
}

var TalkServiceGetPaidCallBalanceListResult_E_DEFAULT *TalkException

func (p *TalkServiceGetPaidCallBalanceListResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetPaidCallBalanceListResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetPaidCallBalanceListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetPaidCallBalanceListResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetPaidCallBalanceListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetPaidCallBalanceListResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*PaidCallBalance, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem327 := &PaidCallBalance{}
		if err := _elem327.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem327), err)
		}
		p.Success = append(p.Success, _elem327)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetPaidCallBalanceListResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetPaidCallBalanceListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPaidCallBalanceList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetPaidCallBalanceListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetPaidCallBalanceListResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetPaidCallBalanceListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetPaidCallBalanceListResult(%+v)", *p)
}

// Attributes:
//  - Requests
type TalkServiceCreateChatArgs struct {
	Requests *CreateChatRequest `thrift:"requests,1" db:"requests" json:"requests"`
}

func NewTalkServiceCreateChatArgs() *TalkServiceCreateChatArgs {
	return &TalkServiceCreateChatArgs{}
}

var TalkServiceCreateChatArgs_Requests_DEFAULT *CreateChatRequest

func (p *TalkServiceCreateChatArgs) GetRequests() *CreateChatRequest {
	if !p.IsSetRequests() {
		return TalkServiceCreateChatArgs_Requests_DEFAULT
	}
	return p.Requests
}
func (p *TalkServiceCreateChatArgs) IsSetRequests() bool {
	return p.Requests != nil
}

func (p *TalkServiceCreateChatArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceCreateChatArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Requests = &CreateChatRequest{}
	if err := p.Requests.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Requests), err)
	}
	return nil
}

func (p *TalkServiceCreateChatArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createChat_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceCreateChatArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requests", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requests: ", p), err)
	}
	if err := p.Requests.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Requests), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requests: ", p), err)
	}
	return err
}

func (p *TalkServiceCreateChatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceCreateChatArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceCreateChatResult struct {
	Success *CreateChatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException      `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceCreateChatResult() *TalkServiceCreateChatResult {
	return &TalkServiceCreateChatResult{}
}

var TalkServiceCreateChatResult_Success_DEFAULT *CreateChatResponse

func (p *TalkServiceCreateChatResult) GetSuccess() *CreateChatResponse {
	if !p.IsSetSuccess() {
		return TalkServiceCreateChatResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceCreateChatResult_E_DEFAULT *TalkException

func (p *TalkServiceCreateChatResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceCreateChatResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceCreateChatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceCreateChatResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceCreateChatResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceCreateChatResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &CreateChatResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceCreateChatResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceCreateChatResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createChat_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceCreateChatResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceCreateChatResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceCreateChatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceCreateChatResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Mid
//  - Type
//  - Reference
type TalkServiceFindAndAddContactsByMidArgs struct {
	ReqSeq    int32   `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	Mid       string  `thrift:"mid,2" db:"mid" json:"mid"`
	Type      MIDType `thrift:"type,3" db:"type" json:"type"`
	Reference string  `thrift:"reference,4" db:"reference" json:"reference"`
}

func NewTalkServiceFindAndAddContactsByMidArgs() *TalkServiceFindAndAddContactsByMidArgs {
	return &TalkServiceFindAndAddContactsByMidArgs{}
}

func (p *TalkServiceFindAndAddContactsByMidArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceFindAndAddContactsByMidArgs) GetMid() string {
	return p.Mid
}

func (p *TalkServiceFindAndAddContactsByMidArgs) GetType() MIDType {
	return p.Type
}

func (p *TalkServiceFindAndAddContactsByMidArgs) GetReference() string {
	return p.Reference
}
func (p *TalkServiceFindAndAddContactsByMidArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := MIDType(v)
		p.Type = temp
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Reference = v
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAndAddContactsByMid_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceFindAndAddContactsByMidArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mid: ", p), err)
	}
	return err
}

func (p *TalkServiceFindAndAddContactsByMidArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err)
	}
	return err
}

func (p *TalkServiceFindAndAddContactsByMidArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reference", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:reference: ", p), err)
	}
	if err := oprot.WriteString(string(p.Reference)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reference (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:reference: ", p), err)
	}
	return err
}

func (p *TalkServiceFindAndAddContactsByMidArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindAndAddContactsByMidArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindAndAddContactsByMidResult struct {
	Success map[string]*Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException      `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindAndAddContactsByMidResult() *TalkServiceFindAndAddContactsByMidResult {
	return &TalkServiceFindAndAddContactsByMidResult{}
}

var TalkServiceFindAndAddContactsByMidResult_Success_DEFAULT map[string]*Contact

func (p *TalkServiceFindAndAddContactsByMidResult) GetSuccess() map[string]*Contact {
	return p.Success
}

var TalkServiceFindAndAddContactsByMidResult_E_DEFAULT *TalkException

func (p *TalkServiceFindAndAddContactsByMidResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceFindAndAddContactsByMidResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceFindAndAddContactsByMidResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceFindAndAddContactsByMidResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceFindAndAddContactsByMidResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByMidResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*Contact, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key328 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key328 = v
		}
		_val329 := &Contact{}
		if err := _val329.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val329), err)
		}
		p.Success[_key328] = _val329
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByMidResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByMidResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAndAddContactsByMid_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByMidResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindAndAddContactsByMidResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindAndAddContactsByMidResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindAndAddContactsByMidResult(%+v)", *p)
}

// Attributes:
//  - ExpirationTime
//  - MaxUseCount
type TalkServiceGenerateUserTicketArgs struct {
	// unused fields # 1 to 2
	ExpirationTime int64 `thrift:"expirationTime,3" db:"expirationTime" json:"expirationTime"`
	MaxUseCount    int32 `thrift:"maxUseCount,4" db:"maxUseCount" json:"maxUseCount"`
}

func NewTalkServiceGenerateUserTicketArgs() *TalkServiceGenerateUserTicketArgs {
	return &TalkServiceGenerateUserTicketArgs{}
}

func (p *TalkServiceGenerateUserTicketArgs) GetExpirationTime() int64 {
	return p.ExpirationTime
}

func (p *TalkServiceGenerateUserTicketArgs) GetMaxUseCount() int32 {
	return p.MaxUseCount
}
func (p *TalkServiceGenerateUserTicketArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGenerateUserTicketArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ExpirationTime = v
	}
	return nil
}

func (p *TalkServiceGenerateUserTicketArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.MaxUseCount = v
	}
	return nil
}

func (p *TalkServiceGenerateUserTicketArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("generateUserTicket_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGenerateUserTicketArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("expirationTime", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expirationTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ExpirationTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.expirationTime (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expirationTime: ", p), err)
	}
	return err
}

func (p *TalkServiceGenerateUserTicketArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxUseCount", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:maxUseCount: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MaxUseCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maxUseCount (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:maxUseCount: ", p), err)
	}
	return err
}

func (p *TalkServiceGenerateUserTicketArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGenerateUserTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGenerateUserTicketResult struct {
	Success *Ticket        `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGenerateUserTicketResult() *TalkServiceGenerateUserTicketResult {
	return &TalkServiceGenerateUserTicketResult{}
}

var TalkServiceGenerateUserTicketResult_Success_DEFAULT *Ticket

func (p *TalkServiceGenerateUserTicketResult) GetSuccess() *Ticket {
	if !p.IsSetSuccess() {
		return TalkServiceGenerateUserTicketResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGenerateUserTicketResult_E_DEFAULT *TalkException

func (p *TalkServiceGenerateUserTicketResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGenerateUserTicketResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGenerateUserTicketResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGenerateUserTicketResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGenerateUserTicketResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGenerateUserTicketResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Ticket{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGenerateUserTicketResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGenerateUserTicketResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("generateUserTicket_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGenerateUserTicketResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGenerateUserTicketResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGenerateUserTicketResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGenerateUserTicketResult(%+v)", *p)
}

// Attributes:
//  - Ids
type TalkServiceGetContactsArgs struct {
	// unused field # 1
	Ids []string `thrift:"ids,2" db:"ids" json:"ids"`
}

func NewTalkServiceGetContactsArgs() *TalkServiceGetContactsArgs {
	return &TalkServiceGetContactsArgs{}
}

func (p *TalkServiceGetContactsArgs) GetIds() []string {
	return p.Ids
}
func (p *TalkServiceGetContactsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetContactsArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Ids = tSlice
	for i := 0; i < size; i++ {
		var _elem330 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem330 = v
		}
		p.Ids = append(p.Ids, _elem330)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetContactsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getContacts_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetContactsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ids", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ids: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Ids)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Ids {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ids: ", p), err)
	}
	return err
}

func (p *TalkServiceGetContactsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetContactsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetContactsResult struct {
	Success []*Contact     `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetContactsResult() *TalkServiceGetContactsResult {
	return &TalkServiceGetContactsResult{}
}

var TalkServiceGetContactsResult_Success_DEFAULT []*Contact

func (p *TalkServiceGetContactsResult) GetSuccess() []*Contact {
	return p.Success
}

var TalkServiceGetContactsResult_E_DEFAULT *TalkException

func (p *TalkServiceGetContactsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetContactsResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetContactsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetContactsResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetContactsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetContactsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Contact, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem331 := &Contact{}
		if err := _elem331.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem331), err)
		}
		p.Success = append(p.Success, _elem331)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetContactsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetContactsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getContacts_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetContactsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetContactsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetContactsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetContactsResult(%+v)", *p)
}

// Attributes:
//  - GetFollowersRequest
type TalkServiceGetFollowersArgs struct {
	// unused field # 1
	GetFollowersRequest *GetFollowersRequest `thrift:"getFollowersRequest,2" db:"getFollowersRequest" json:"getFollowersRequest"`
}

func NewTalkServiceGetFollowersArgs() *TalkServiceGetFollowersArgs {
	return &TalkServiceGetFollowersArgs{}
}

var TalkServiceGetFollowersArgs_GetFollowersRequest_DEFAULT *GetFollowersRequest

func (p *TalkServiceGetFollowersArgs) GetGetFollowersRequest() *GetFollowersRequest {
	if !p.IsSetGetFollowersRequest() {
		return TalkServiceGetFollowersArgs_GetFollowersRequest_DEFAULT
	}
	return p.GetFollowersRequest
}
func (p *TalkServiceGetFollowersArgs) IsSetGetFollowersRequest() bool {
	return p.GetFollowersRequest != nil
}

func (p *TalkServiceGetFollowersArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetFollowersArgs) ReadField2(iprot thrift.TProtocol) error {
	p.GetFollowersRequest = &GetFollowersRequest{}
	if err := p.GetFollowersRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetFollowersRequest), err)
	}
	return nil
}

func (p *TalkServiceGetFollowersArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getFollowers_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetFollowersArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("getFollowersRequest", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:getFollowersRequest: ", p), err)
	}
	if err := p.GetFollowersRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetFollowersRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:getFollowersRequest: ", p), err)
	}
	return err
}

func (p *TalkServiceGetFollowersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetFollowersArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetFollowersResult struct {
	Success *GetFollowersResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException        `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetFollowersResult() *TalkServiceGetFollowersResult {
	return &TalkServiceGetFollowersResult{}
}

var TalkServiceGetFollowersResult_Success_DEFAULT *GetFollowersResponse

func (p *TalkServiceGetFollowersResult) GetSuccess() *GetFollowersResponse {
	if !p.IsSetSuccess() {
		return TalkServiceGetFollowersResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetFollowersResult_E_DEFAULT *TalkException

func (p *TalkServiceGetFollowersResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetFollowersResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetFollowersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetFollowersResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetFollowersResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetFollowersResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetFollowersResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetFollowersResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetFollowersResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getFollowers_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetFollowersResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetFollowersResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetFollowersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetFollowersResult(%+v)", *p)
}

// Attributes:
//  - ChatMid
type TalkServiceGetLastE2EEPublicKeysArgs struct {
	// unused field # 1
	ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
}

func NewTalkServiceGetLastE2EEPublicKeysArgs() *TalkServiceGetLastE2EEPublicKeysArgs {
	return &TalkServiceGetLastE2EEPublicKeysArgs{}
}

func (p *TalkServiceGetLastE2EEPublicKeysArgs) GetChatMid() string {
	return p.ChatMid
}
func (p *TalkServiceGetLastE2EEPublicKeysArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChatMid = v
	}
	return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLastE2EEPublicKeys_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChatMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err)
	}
	return err
}

func (p *TalkServiceGetLastE2EEPublicKeysArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetLastE2EEPublicKeysArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetLastE2EEPublicKeysResult struct {
	Success map[string]*E2EEPublicKey `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException            `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetLastE2EEPublicKeysResult() *TalkServiceGetLastE2EEPublicKeysResult {
	return &TalkServiceGetLastE2EEPublicKeysResult{}
}

var TalkServiceGetLastE2EEPublicKeysResult_Success_DEFAULT map[string]*E2EEPublicKey

func (p *TalkServiceGetLastE2EEPublicKeysResult) GetSuccess() map[string]*E2EEPublicKey {
	return p.Success
}

var TalkServiceGetLastE2EEPublicKeysResult_E_DEFAULT *TalkException

func (p *TalkServiceGetLastE2EEPublicKeysResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetLastE2EEPublicKeysResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetLastE2EEPublicKeysResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetLastE2EEPublicKeysResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetLastE2EEPublicKeysResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*E2EEPublicKey, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key332 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key332 = v
		}
		_val333 := &E2EEPublicKey{}
		if err := _val333.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val333), err)
		}
		p.Success[_key332] = _val333
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLastE2EEPublicKeys_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetLastE2EEPublicKeysResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetLastE2EEPublicKeysResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetLastE2EEPublicKeysResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - RoomId
type TalkServiceLeaveRoomArgs struct {
	ReqSeq int32  `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	RoomId string `thrift:"roomId,2" db:"roomId" json:"roomId"`
}

func NewTalkServiceLeaveRoomArgs() *TalkServiceLeaveRoomArgs {
	return &TalkServiceLeaveRoomArgs{}
}

func (p *TalkServiceLeaveRoomArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceLeaveRoomArgs) GetRoomId() string {
	return p.RoomId
}
func (p *TalkServiceLeaveRoomArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceLeaveRoomArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceLeaveRoomArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RoomId = v
	}
	return nil
}

func (p *TalkServiceLeaveRoomArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("leaveRoom_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceLeaveRoomArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceLeaveRoomArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roomId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roomId: ", p), err)
	}
	if err := oprot.WriteString(string(p.RoomId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roomId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roomId: ", p), err)
	}
	return err
}

func (p *TalkServiceLeaveRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceLeaveRoomArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceLeaveRoomResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceLeaveRoomResult() *TalkServiceLeaveRoomResult {
	return &TalkServiceLeaveRoomResult{}
}

var TalkServiceLeaveRoomResult_E_DEFAULT *TalkException

func (p *TalkServiceLeaveRoomResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceLeaveRoomResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceLeaveRoomResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceLeaveRoomResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceLeaveRoomResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceLeaveRoomResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("leaveRoom_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceLeaveRoomResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceLeaveRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceLeaveRoomResult(%+v)", *p)
}

// Attributes:
//  - UdidHash
//  - ApplicationTypeWithExtensions
type TalkServiceNotifyRegistrationCompleteArgs struct {
	// unused field # 1
	UdidHash                      string `thrift:"udidHash,2" db:"udidHash" json:"udidHash"`
	ApplicationTypeWithExtensions string `thrift:"applicationTypeWithExtensions,3" db:"applicationTypeWithExtensions" json:"applicationTypeWithExtensions"`
}

func NewTalkServiceNotifyRegistrationCompleteArgs() *TalkServiceNotifyRegistrationCompleteArgs {
	return &TalkServiceNotifyRegistrationCompleteArgs{}
}

func (p *TalkServiceNotifyRegistrationCompleteArgs) GetUdidHash() string {
	return p.UdidHash
}

func (p *TalkServiceNotifyRegistrationCompleteArgs) GetApplicationTypeWithExtensions() string {
	return p.ApplicationTypeWithExtensions
}
func (p *TalkServiceNotifyRegistrationCompleteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceNotifyRegistrationCompleteArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UdidHash = v
	}
	return nil
}

func (p *TalkServiceNotifyRegistrationCompleteArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ApplicationTypeWithExtensions = v
	}
	return nil
}

func (p *TalkServiceNotifyRegistrationCompleteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("notifyRegistrationComplete_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceNotifyRegistrationCompleteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("udidHash", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:udidHash: ", p), err)
	}
	if err := oprot.WriteString(string(p.UdidHash)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.udidHash (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:udidHash: ", p), err)
	}
	return err
}

func (p *TalkServiceNotifyRegistrationCompleteArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("applicationTypeWithExtensions", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:applicationTypeWithExtensions: ", p), err)
	}
	if err := oprot.WriteString(string(p.ApplicationTypeWithExtensions)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.applicationTypeWithExtensions (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:applicationTypeWithExtensions: ", p), err)
	}
	return err
}

func (p *TalkServiceNotifyRegistrationCompleteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceNotifyRegistrationCompleteArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceNotifyRegistrationCompleteResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceNotifyRegistrationCompleteResult() *TalkServiceNotifyRegistrationCompleteResult {
	return &TalkServiceNotifyRegistrationCompleteResult{}
}

var TalkServiceNotifyRegistrationCompleteResult_E_DEFAULT *TalkException

func (p *TalkServiceNotifyRegistrationCompleteResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceNotifyRegistrationCompleteResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceNotifyRegistrationCompleteResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceNotifyRegistrationCompleteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceNotifyRegistrationCompleteResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceNotifyRegistrationCompleteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("notifyRegistrationComplete_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceNotifyRegistrationCompleteResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceNotifyRegistrationCompleteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceNotifyRegistrationCompleteResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatRoomMid
//  - AnnouncementSeq
type TalkServiceRemoveChatRoomAnnouncementArgs struct {
	ReqSeq          int32  `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	ChatRoomMid     string `thrift:"chatRoomMid,2" db:"chatRoomMid" json:"chatRoomMid"`
	AnnouncementSeq int64  `thrift:"announcementSeq,3" db:"announcementSeq" json:"announcementSeq"`
}

func NewTalkServiceRemoveChatRoomAnnouncementArgs() *TalkServiceRemoveChatRoomAnnouncementArgs {
	return &TalkServiceRemoveChatRoomAnnouncementArgs{}
}

func (p *TalkServiceRemoveChatRoomAnnouncementArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceRemoveChatRoomAnnouncementArgs) GetChatRoomMid() string {
	return p.ChatRoomMid
}

func (p *TalkServiceRemoveChatRoomAnnouncementArgs) GetAnnouncementSeq() int64 {
	return p.AnnouncementSeq
}
func (p *TalkServiceRemoveChatRoomAnnouncementArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRemoveChatRoomAnnouncementArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceRemoveChatRoomAnnouncementArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChatRoomMid = v
	}
	return nil
}

func (p *TalkServiceRemoveChatRoomAnnouncementArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.AnnouncementSeq = v
	}
	return nil
}

func (p *TalkServiceRemoveChatRoomAnnouncementArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeChatRoomAnnouncement_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRemoveChatRoomAnnouncementArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceRemoveChatRoomAnnouncementArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatRoomMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatRoomMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChatRoomMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatRoomMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatRoomMid: ", p), err)
	}
	return err
}

func (p *TalkServiceRemoveChatRoomAnnouncementArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("announcementSeq", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:announcementSeq: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.AnnouncementSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.announcementSeq (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:announcementSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceRemoveChatRoomAnnouncementArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRemoveChatRoomAnnouncementArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRemoveChatRoomAnnouncementResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRemoveChatRoomAnnouncementResult() *TalkServiceRemoveChatRoomAnnouncementResult {
	return &TalkServiceRemoveChatRoomAnnouncementResult{}
}

var TalkServiceRemoveChatRoomAnnouncementResult_E_DEFAULT *TalkException

func (p *TalkServiceRemoveChatRoomAnnouncementResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceRemoveChatRoomAnnouncementResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceRemoveChatRoomAnnouncementResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceRemoveChatRoomAnnouncementResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRemoveChatRoomAnnouncementResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceRemoveChatRoomAnnouncementResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeChatRoomAnnouncement_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRemoveChatRoomAnnouncementResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceRemoveChatRoomAnnouncementResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRemoveChatRoomAnnouncementResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - ChatMid
//  - LastMessageId
//  - SessionId
type TalkServiceSendChatRemovedArgs struct {
	Seq           int32  `thrift:"seq,1" db:"seq" json:"seq"`
	ChatMid       string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
	LastMessageId string `thrift:"lastMessageId,3" db:"lastMessageId" json:"lastMessageId"`
	SessionId     int8   `thrift:"sessionId,4" db:"sessionId" json:"sessionId"`
}

func NewTalkServiceSendChatRemovedArgs() *TalkServiceSendChatRemovedArgs {
	return &TalkServiceSendChatRemovedArgs{}
}

func (p *TalkServiceSendChatRemovedArgs) GetSeq() int32 {
	return p.Seq
}

func (p *TalkServiceSendChatRemovedArgs) GetChatMid() string {
	return p.ChatMid
}

func (p *TalkServiceSendChatRemovedArgs) GetLastMessageId() string {
	return p.LastMessageId
}

func (p *TalkServiceSendChatRemovedArgs) GetSessionId() int8 {
	return p.SessionId
}
func (p *TalkServiceSendChatRemovedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceSendChatRemovedArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *TalkServiceSendChatRemovedArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChatMid = v
	}
	return nil
}

func (p *TalkServiceSendChatRemovedArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.LastMessageId = v
	}
	return nil
}

func (p *TalkServiceSendChatRemovedArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := int8(v)
		p.SessionId = temp
	}
	return nil
}

func (p *TalkServiceSendChatRemovedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendChatRemoved_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceSendChatRemovedArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Seq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err)
	}
	return err
}

func (p *TalkServiceSendChatRemovedArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChatMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err)
	}
	return err
}

func (p *TalkServiceSendChatRemovedArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastMessageId", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastMessageId: ", p), err)
	}
	if err := oprot.WriteString(string(p.LastMessageId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lastMessageId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastMessageId: ", p), err)
	}
	return err
}

func (p *TalkServiceSendChatRemovedArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.BYTE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sessionId: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sessionId: ", p), err)
	}
	return err
}

func (p *TalkServiceSendChatRemovedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceSendChatRemovedArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceSendChatRemovedResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceSendChatRemovedResult() *TalkServiceSendChatRemovedResult {
	return &TalkServiceSendChatRemovedResult{}
}

var TalkServiceSendChatRemovedResult_E_DEFAULT *TalkException

func (p *TalkServiceSendChatRemovedResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceSendChatRemovedResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceSendChatRemovedResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceSendChatRemovedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceSendChatRemovedResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceSendChatRemovedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendChatRemoved_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceSendChatRemovedResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceSendChatRemovedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceSendChatRemovedResult(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
//  - Request
type TalkServiceUpdatePasswordArgs struct {
	// unused field # 1
	AuthSessionId string                     `thrift:"authSessionId,2" db:"authSessionId" json:"authSessionId"`
	Request       *IdentityCredentialRequest `thrift:"request,3" db:"request" json:"request"`
}

func NewTalkServiceUpdatePasswordArgs() *TalkServiceUpdatePasswordArgs {
	return &TalkServiceUpdatePasswordArgs{}
}

func (p *TalkServiceUpdatePasswordArgs) GetAuthSessionId() string {
	return p.AuthSessionId
}

var TalkServiceUpdatePasswordArgs_Request_DEFAULT *IdentityCredentialRequest

func (p *TalkServiceUpdatePasswordArgs) GetRequest() *IdentityCredentialRequest {
	if !p.IsSetRequest() {
		return TalkServiceUpdatePasswordArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *TalkServiceUpdatePasswordArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceUpdatePasswordArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdatePasswordArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AuthSessionId = v
	}
	return nil
}

func (p *TalkServiceUpdatePasswordArgs) ReadField3(iprot thrift.TProtocol) error {
	p.Request = &IdentityCredentialRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceUpdatePasswordArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updatePassword_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdatePasswordArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authSessionId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:authSessionId: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthSessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authSessionId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:authSessionId: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdatePasswordArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:request: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdatePasswordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdatePasswordArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceUpdatePasswordResult struct {
	Success *IdentityCredentialResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException              `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdatePasswordResult() *TalkServiceUpdatePasswordResult {
	return &TalkServiceUpdatePasswordResult{}
}

var TalkServiceUpdatePasswordResult_Success_DEFAULT *IdentityCredentialResponse

func (p *TalkServiceUpdatePasswordResult) GetSuccess() *IdentityCredentialResponse {
	if !p.IsSetSuccess() {
		return TalkServiceUpdatePasswordResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceUpdatePasswordResult_E_DEFAULT *TalkException

func (p *TalkServiceUpdatePasswordResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceUpdatePasswordResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceUpdatePasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceUpdatePasswordResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceUpdatePasswordResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdatePasswordResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &IdentityCredentialResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceUpdatePasswordResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceUpdatePasswordResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updatePassword_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdatePasswordResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUpdatePasswordResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUpdatePasswordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdatePasswordResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ID
//  - Reference
type TalkServiceUnblockContactArgs struct {
	ReqSeq    int32  `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	ID        string `thrift:"id,2" db:"id" json:"id"`
	Reference string `thrift:"reference,3" db:"reference" json:"reference"`
}

func NewTalkServiceUnblockContactArgs() *TalkServiceUnblockContactArgs {
	return &TalkServiceUnblockContactArgs{}
}

func (p *TalkServiceUnblockContactArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceUnblockContactArgs) GetID() string {
	return p.ID
}

func (p *TalkServiceUnblockContactArgs) GetReference() string {
	return p.Reference
}
func (p *TalkServiceUnblockContactArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUnblockContactArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceUnblockContactArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *TalkServiceUnblockContactArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Reference = v
	}
	return nil
}

func (p *TalkServiceUnblockContactArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unblockContact_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUnblockContactArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceUnblockContactArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err)
	}
	return err
}

func (p *TalkServiceUnblockContactArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reference", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reference: ", p), err)
	}
	if err := oprot.WriteString(string(p.Reference)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reference (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reference: ", p), err)
	}
	return err
}

func (p *TalkServiceUnblockContactArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUnblockContactArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUnblockContactResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUnblockContactResult() *TalkServiceUnblockContactResult {
	return &TalkServiceUnblockContactResult{}
}

var TalkServiceUnblockContactResult_E_DEFAULT *TalkException

func (p *TalkServiceUnblockContactResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceUnblockContactResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceUnblockContactResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceUnblockContactResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUnblockContactResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceUnblockContactResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unblockContact_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUnblockContactResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUnblockContactResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUnblockContactResult(%+v)", *p)
}

// Attributes:
//  - IdentityCredential
//  - MigrationPincodeSessionId
type TalkServiceVerifyIdentityCredentialWithResultArgs struct {
	// unused field # 1
	IdentityCredential        *IdentityCredential `thrift:"identityCredential,2" db:"identityCredential" json:"identityCredential"`
	MigrationPincodeSessionId string              `thrift:"migrationPincodeSessionId,3" db:"migrationPincodeSessionId" json:"migrationPincodeSessionId"`
}

func NewTalkServiceVerifyIdentityCredentialWithResultArgs() *TalkServiceVerifyIdentityCredentialWithResultArgs {
	return &TalkServiceVerifyIdentityCredentialWithResultArgs{}
}

var TalkServiceVerifyIdentityCredentialWithResultArgs_IdentityCredential_DEFAULT *IdentityCredential

func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) GetIdentityCredential() *IdentityCredential {
	if !p.IsSetIdentityCredential() {
		return TalkServiceVerifyIdentityCredentialWithResultArgs_IdentityCredential_DEFAULT
	}
	return p.IdentityCredential
}

func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) GetMigrationPincodeSessionId() string {
	return p.MigrationPincodeSessionId
}
func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) IsSetIdentityCredential() bool {
	return p.IdentityCredential != nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) ReadField2(iprot thrift.TProtocol) error {
	p.IdentityCredential = &IdentityCredential{}
	if err := p.IdentityCredential.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IdentityCredential), err)
	}
	return nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MigrationPincodeSessionId = v
	}
	return nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("verifyIdentityCredentialWithResult_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identityCredential", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:identityCredential: ", p), err)
	}
	if err := p.IdentityCredential.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IdentityCredential), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:identityCredential: ", p), err)
	}
	return err
}

func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("migrationPincodeSessionId", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:migrationPincodeSessionId: ", p), err)
	}
	if err := oprot.WriteString(string(p.MigrationPincodeSessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.migrationPincodeSessionId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:migrationPincodeSessionId: ", p), err)
	}
	return err
}

func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceVerifyIdentityCredentialWithResultArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceVerifyIdentityCredentialWithResultResult struct {
	Success *UserAuthStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException  `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceVerifyIdentityCredentialWithResultResult() *TalkServiceVerifyIdentityCredentialWithResultResult {
	return &TalkServiceVerifyIdentityCredentialWithResultResult{}
}

var TalkServiceVerifyIdentityCredentialWithResultResult_Success_DEFAULT *UserAuthStatus

func (p *TalkServiceVerifyIdentityCredentialWithResultResult) GetSuccess() *UserAuthStatus {
	if !p.IsSetSuccess() {
		return TalkServiceVerifyIdentityCredentialWithResultResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceVerifyIdentityCredentialWithResultResult_E_DEFAULT *TalkException

func (p *TalkServiceVerifyIdentityCredentialWithResultResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceVerifyIdentityCredentialWithResultResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceVerifyIdentityCredentialWithResultResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &UserAuthStatus{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("verifyIdentityCredentialWithResult_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceVerifyIdentityCredentialWithResultResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceVerifyIdentityCredentialWithResultResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceVerifyIdentityCredentialWithResultResult(%+v)", *p)
}

// Attributes:
//  - DataTypes
type TalkServiceRequestCleanupUserProvidedDataArgs struct {
	DataTypes []DataTypes `thrift:"dataTypes,1" db:"dataTypes" json:"dataTypes"`
}

func NewTalkServiceRequestCleanupUserProvidedDataArgs() *TalkServiceRequestCleanupUserProvidedDataArgs {
	return &TalkServiceRequestCleanupUserProvidedDataArgs{}
}

func (p *TalkServiceRequestCleanupUserProvidedDataArgs) GetDataTypes() []DataTypes {
	return p.DataTypes
}
func (p *TalkServiceRequestCleanupUserProvidedDataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRequestCleanupUserProvidedDataArgs) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]DataTypes, 0, size)
	p.DataTypes = tSet
	for i := 0; i < size; i++ {
		var _elem334 DataTypes
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := DataTypes(v)
			_elem334 = temp
		}
		p.DataTypes = append(p.DataTypes, _elem334)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TalkServiceRequestCleanupUserProvidedDataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("requestCleanupUserProvidedData_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRequestCleanupUserProvidedDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dataTypes", thrift.SET, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dataTypes: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.I32, len(p.DataTypes)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for i := 0; i < len(p.DataTypes); i++ {
		for j := i + 1; j < len(p.DataTypes); j++ {
			if reflect.DeepEqual(p.DataTypes[i], p.DataTypes[j]) {
				return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.DataTypes[i]))
			}
		}
	}
	for _, v := range p.DataTypes {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dataTypes: ", p), err)
	}
	return err
}

func (p *TalkServiceRequestCleanupUserProvidedDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRequestCleanupUserProvidedDataArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRequestCleanupUserProvidedDataResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRequestCleanupUserProvidedDataResult() *TalkServiceRequestCleanupUserProvidedDataResult {
	return &TalkServiceRequestCleanupUserProvidedDataResult{}
}

var TalkServiceRequestCleanupUserProvidedDataResult_E_DEFAULT *TalkException

func (p *TalkServiceRequestCleanupUserProvidedDataResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceRequestCleanupUserProvidedDataResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceRequestCleanupUserProvidedDataResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceRequestCleanupUserProvidedDataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRequestCleanupUserProvidedDataResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceRequestCleanupUserProvidedDataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("requestCleanupUserProvidedData_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRequestCleanupUserProvidedDataResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceRequestCleanupUserProvidedDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRequestCleanupUserProvidedDataResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceGetBuddyStatusBarV2Args struct {
	Request *GetBuddyStatusBarV2Request `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceGetBuddyStatusBarV2Args() *TalkServiceGetBuddyStatusBarV2Args {
	return &TalkServiceGetBuddyStatusBarV2Args{}
}

var TalkServiceGetBuddyStatusBarV2Args_Request_DEFAULT *GetBuddyStatusBarV2Request

func (p *TalkServiceGetBuddyStatusBarV2Args) GetRequest() *GetBuddyStatusBarV2Request {
	if !p.IsSetRequest() {
		return TalkServiceGetBuddyStatusBarV2Args_Request_DEFAULT
	}
	return p.Request
}
func (p *TalkServiceGetBuddyStatusBarV2Args) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceGetBuddyStatusBarV2Args) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetBuddyStatusBarV2Args) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &GetBuddyStatusBarV2Request{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceGetBuddyStatusBarV2Args) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBuddyStatusBarV2_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetBuddyStatusBarV2Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *TalkServiceGetBuddyStatusBarV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetBuddyStatusBarV2Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetBuddyStatusBarV2Result struct {
	Success *BuddyStatusBar `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException  `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetBuddyStatusBarV2Result() *TalkServiceGetBuddyStatusBarV2Result {
	return &TalkServiceGetBuddyStatusBarV2Result{}
}

var TalkServiceGetBuddyStatusBarV2Result_Success_DEFAULT *BuddyStatusBar

func (p *TalkServiceGetBuddyStatusBarV2Result) GetSuccess() *BuddyStatusBar {
	if !p.IsSetSuccess() {
		return TalkServiceGetBuddyStatusBarV2Result_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetBuddyStatusBarV2Result_E_DEFAULT *TalkException

func (p *TalkServiceGetBuddyStatusBarV2Result) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetBuddyStatusBarV2Result_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetBuddyStatusBarV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetBuddyStatusBarV2Result) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetBuddyStatusBarV2Result) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetBuddyStatusBarV2Result) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &BuddyStatusBar{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetBuddyStatusBarV2Result) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetBuddyStatusBarV2Result) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBuddyStatusBarV2_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetBuddyStatusBarV2Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetBuddyStatusBarV2Result) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetBuddyStatusBarV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetBuddyStatusBarV2Result(%+v)", *p)
}

// Attributes:
//  - Start
//  - Size
//  - Language
type TalkServiceGetPaidCallHistoryArgs struct {
	// unused field # 1
	Start    int64  `thrift:"start,2" db:"start" json:"start"`
	Size     int32  `thrift:"size,3" db:"size" json:"size"`
	Language string `thrift:"language,4" db:"language" json:"language"`
}

func NewTalkServiceGetPaidCallHistoryArgs() *TalkServiceGetPaidCallHistoryArgs {
	return &TalkServiceGetPaidCallHistoryArgs{}
}

func (p *TalkServiceGetPaidCallHistoryArgs) GetStart() int64 {
	return p.Start
}

func (p *TalkServiceGetPaidCallHistoryArgs) GetSize() int32 {
	return p.Size
}

func (p *TalkServiceGetPaidCallHistoryArgs) GetLanguage() string {
	return p.Language
}
func (p *TalkServiceGetPaidCallHistoryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetPaidCallHistoryArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Start = v
	}
	return nil
}

func (p *TalkServiceGetPaidCallHistoryArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Size = v
	}
	return nil
}

func (p *TalkServiceGetPaidCallHistoryArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Language = v
	}
	return nil
}

func (p *TalkServiceGetPaidCallHistoryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPaidCallHistory_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetPaidCallHistoryArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:start: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Start)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.start (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:start: ", p), err)
	}
	return err
}

func (p *TalkServiceGetPaidCallHistoryArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("size", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:size: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Size)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.size (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:size: ", p), err)
	}
	return err
}

func (p *TalkServiceGetPaidCallHistoryArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("language", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:language: ", p), err)
	}
	if err := oprot.WriteString(string(p.Language)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.language (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:language: ", p), err)
	}
	return err
}

func (p *TalkServiceGetPaidCallHistoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetPaidCallHistoryArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetPaidCallHistoryResult struct {
	Success *PaidCallHistoryResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException          `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetPaidCallHistoryResult() *TalkServiceGetPaidCallHistoryResult {
	return &TalkServiceGetPaidCallHistoryResult{}
}

var TalkServiceGetPaidCallHistoryResult_Success_DEFAULT *PaidCallHistoryResult_

func (p *TalkServiceGetPaidCallHistoryResult) GetSuccess() *PaidCallHistoryResult_ {
	if !p.IsSetSuccess() {
		return TalkServiceGetPaidCallHistoryResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetPaidCallHistoryResult_E_DEFAULT *TalkException

func (p *TalkServiceGetPaidCallHistoryResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetPaidCallHistoryResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetPaidCallHistoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetPaidCallHistoryResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetPaidCallHistoryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetPaidCallHistoryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &PaidCallHistoryResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetPaidCallHistoryResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetPaidCallHistoryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPaidCallHistory_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetPaidCallHistoryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetPaidCallHistoryResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetPaidCallHistoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetPaidCallHistoryResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ID
type TalkServiceBlockContactArgs struct {
	ReqSeq int32  `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	ID     string `thrift:"id,2" db:"id" json:"id"`
}

func NewTalkServiceBlockContactArgs() *TalkServiceBlockContactArgs {
	return &TalkServiceBlockContactArgs{}
}

func (p *TalkServiceBlockContactArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceBlockContactArgs) GetID() string {
	return p.ID
}
func (p *TalkServiceBlockContactArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceBlockContactArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceBlockContactArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *TalkServiceBlockContactArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("blockContact_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceBlockContactArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceBlockContactArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err)
	}
	return err
}

func (p *TalkServiceBlockContactArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceBlockContactArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceBlockContactResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceBlockContactResult() *TalkServiceBlockContactResult {
	return &TalkServiceBlockContactResult{}
}

var TalkServiceBlockContactResult_E_DEFAULT *TalkException

func (p *TalkServiceBlockContactResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceBlockContactResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceBlockContactResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceBlockContactResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceBlockContactResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceBlockContactResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("blockContact_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceBlockContactResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceBlockContactResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceBlockContactResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - Name
//  - ContactIds
type TalkServiceCreateGroupV2Args struct {
	Seq        int32    `thrift:"seq,1" db:"seq" json:"seq"`
	Name       string   `thrift:"name,2" db:"name" json:"name"`
	ContactIds []string `thrift:"contactIds,3" db:"contactIds" json:"contactIds"`
}

func NewTalkServiceCreateGroupV2Args() *TalkServiceCreateGroupV2Args {
	return &TalkServiceCreateGroupV2Args{}
}

func (p *TalkServiceCreateGroupV2Args) GetSeq() int32 {
	return p.Seq
}

func (p *TalkServiceCreateGroupV2Args) GetName() string {
	return p.Name
}

func (p *TalkServiceCreateGroupV2Args) GetContactIds() []string {
	return p.ContactIds
}
func (p *TalkServiceCreateGroupV2Args) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceCreateGroupV2Args) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *TalkServiceCreateGroupV2Args) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *TalkServiceCreateGroupV2Args) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ContactIds = tSlice
	for i := 0; i < size; i++ {
		var _elem335 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem335 = v
		}
		p.ContactIds = append(p.ContactIds, _elem335)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceCreateGroupV2Args) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createGroupV2_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceCreateGroupV2Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Seq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err)
	}
	return err
}

func (p *TalkServiceCreateGroupV2Args) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
	}
	return err
}

func (p *TalkServiceCreateGroupV2Args) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contactIds", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contactIds: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ContactIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ContactIds {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contactIds: ", p), err)
	}
	return err
}

func (p *TalkServiceCreateGroupV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceCreateGroupV2Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceCreateGroupV2Result struct {
	Success *Group         `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceCreateGroupV2Result() *TalkServiceCreateGroupV2Result {
	return &TalkServiceCreateGroupV2Result{}
}

var TalkServiceCreateGroupV2Result_Success_DEFAULT *Group

func (p *TalkServiceCreateGroupV2Result) GetSuccess() *Group {
	if !p.IsSetSuccess() {
		return TalkServiceCreateGroupV2Result_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceCreateGroupV2Result_E_DEFAULT *TalkException

func (p *TalkServiceCreateGroupV2Result) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceCreateGroupV2Result_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceCreateGroupV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceCreateGroupV2Result) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceCreateGroupV2Result) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceCreateGroupV2Result) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Group{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceCreateGroupV2Result) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceCreateGroupV2Result) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createGroupV2_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceCreateGroupV2Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceCreateGroupV2Result) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceCreateGroupV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceCreateGroupV2Result(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Phones
//  - Reference
type TalkServiceFindAndAddContactsByPhoneArgs struct {
	ReqSeq    int32    `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	Phones    []string `thrift:"phones,2" db:"phones" json:"phones"`
	Reference string   `thrift:"reference,3" db:"reference" json:"reference"`
}

func NewTalkServiceFindAndAddContactsByPhoneArgs() *TalkServiceFindAndAddContactsByPhoneArgs {
	return &TalkServiceFindAndAddContactsByPhoneArgs{}
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) GetPhones() []string {
	return p.Phones
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) GetReference() string {
	return p.Reference
}
func (p *TalkServiceFindAndAddContactsByPhoneArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]string, 0, size)
	p.Phones = tSet
	for i := 0; i < size; i++ {
		var _elem336 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem336 = v
		}
		p.Phones = append(p.Phones, _elem336)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Reference = v
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAndAddContactsByPhone_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phones", thrift.SET, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:phones: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.Phones)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for i := 0; i < len(p.Phones); i++ {
		for j := i + 1; j < len(p.Phones); j++ {
			if reflect.DeepEqual(p.Phones[i], p.Phones[j]) {
				return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Phones[i]))
			}
		}
	}
	for _, v := range p.Phones {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:phones: ", p), err)
	}
	return err
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reference", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reference: ", p), err)
	}
	if err := oprot.WriteString(string(p.Reference)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reference (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reference: ", p), err)
	}
	return err
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindAndAddContactsByPhoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindAndAddContactsByPhoneResult struct {
	Success map[string]*Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException      `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindAndAddContactsByPhoneResult() *TalkServiceFindAndAddContactsByPhoneResult {
	return &TalkServiceFindAndAddContactsByPhoneResult{}
}

var TalkServiceFindAndAddContactsByPhoneResult_Success_DEFAULT map[string]*Contact

func (p *TalkServiceFindAndAddContactsByPhoneResult) GetSuccess() map[string]*Contact {
	return p.Success
}

var TalkServiceFindAndAddContactsByPhoneResult_E_DEFAULT *TalkException

func (p *TalkServiceFindAndAddContactsByPhoneResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceFindAndAddContactsByPhoneResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceFindAndAddContactsByPhoneResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*Contact, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key337 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key337 = v
		}
		_val338 := &Contact{}
		if err := _val338.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val338), err)
		}
		p.Success[_key337] = _val338
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAndAddContactsByPhone_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindAndAddContactsByPhoneResult(%+v)", *p)
}

// Attributes:
//  - SessionId
type TalkServiceGetAcceptedProximityMatchesArgs struct {
	// unused field # 1
	SessionId string `thrift:"sessionId,2" db:"sessionId" json:"sessionId"`
}

func NewTalkServiceGetAcceptedProximityMatchesArgs() *TalkServiceGetAcceptedProximityMatchesArgs {
	return &TalkServiceGetAcceptedProximityMatchesArgs{}
}

func (p *TalkServiceGetAcceptedProximityMatchesArgs) GetSessionId() string {
	return p.SessionId
}
func (p *TalkServiceGetAcceptedProximityMatchesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAcceptedProximityMatches_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err)
	}
	if err := oprot.WriteString(string(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err)
	}
	return err
}

func (p *TalkServiceGetAcceptedProximityMatchesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetAcceptedProximityMatchesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetAcceptedProximityMatchesResult struct {
	Success []string       `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetAcceptedProximityMatchesResult() *TalkServiceGetAcceptedProximityMatchesResult {
	return &TalkServiceGetAcceptedProximityMatchesResult{}
}

var TalkServiceGetAcceptedProximityMatchesResult_Success_DEFAULT []string

func (p *TalkServiceGetAcceptedProximityMatchesResult) GetSuccess() []string {
	return p.Success
}

var TalkServiceGetAcceptedProximityMatchesResult_E_DEFAULT *TalkException

func (p *TalkServiceGetAcceptedProximityMatchesResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetAcceptedProximityMatchesResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetAcceptedProximityMatchesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]string, 0, size)
	p.Success = tSet
	for i := 0; i < size; i++ {
		var _elem339 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem339 = v
		}
		p.Success = append(p.Success, _elem339)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAcceptedProximityMatches_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.SET, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for i := 0; i < len(p.Success); i++ {
			for j := i + 1; j < len(p.Success); j++ {
				if reflect.DeepEqual(p.Success[i], p.Success[j]) {
					return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Success[i]))
				}
			}
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetAcceptedProximityMatchesResult(%+v)", *p)
}

// Attributes:
//  - ChatRoomMids
//  - SyncReason
type TalkServiceGetChatRoomAnnouncementsBulkArgs struct {
	// unused field # 1
	ChatRoomMids []string   `thrift:"chatRoomMids,2" db:"chatRoomMids" json:"chatRoomMids"`
	SyncReason   SyncReason `thrift:"syncReason,3" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetChatRoomAnnouncementsBulkArgs() *TalkServiceGetChatRoomAnnouncementsBulkArgs {
	return &TalkServiceGetChatRoomAnnouncementsBulkArgs{}
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs) GetChatRoomMids() []string {
	return p.ChatRoomMids
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs) GetSyncReason() SyncReason {
	return p.SyncReason
}
func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ChatRoomMids = tSlice
	for i := 0; i < size; i++ {
		var _elem340 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem340 = v
		}
		p.ChatRoomMids = append(p.ChatRoomMids, _elem340)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := SyncReason(v)
		p.SyncReason = temp
	}
	return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getChatRoomAnnouncementsBulk_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatRoomMids", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatRoomMids: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ChatRoomMids)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ChatRoomMids {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatRoomMids: ", p), err)
	}
	return err
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("syncReason", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:syncReason: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SyncReason)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.syncReason (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:syncReason: ", p), err)
	}
	return err
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetChatRoomAnnouncementsBulkArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetChatRoomAnnouncementsBulkResult struct {
	Success map[string][]*ChatRoomAnnouncement `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException                     `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetChatRoomAnnouncementsBulkResult() *TalkServiceGetChatRoomAnnouncementsBulkResult {
	return &TalkServiceGetChatRoomAnnouncementsBulkResult{}
}

var TalkServiceGetChatRoomAnnouncementsBulkResult_Success_DEFAULT map[string][]*ChatRoomAnnouncement

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) GetSuccess() map[string][]*ChatRoomAnnouncement {
	return p.Success
}

var TalkServiceGetChatRoomAnnouncementsBulkResult_E_DEFAULT *TalkException

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetChatRoomAnnouncementsBulkResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string][]*ChatRoomAnnouncement, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key341 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key341 = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]*ChatRoomAnnouncement, 0, size)
		_val342 := tSlice
		for i := 0; i < size; i++ {
			_elem343 := &ChatRoomAnnouncement{}
			if err := _elem343.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem343), err)
			}
			_val342 = append(_val342, _elem343)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.Success[_key341] = _val342
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getChatRoomAnnouncementsBulk_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
				return thrift.PrependError("error writing list begin: ", err)
			}
			for _, v := range v {
				if err := v.Write(oprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return thrift.PrependError("error writing list end: ", err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetChatRoomAnnouncementsBulkResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetRecommendationIdsArgs struct {
	SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetRecommendationIdsArgs() *TalkServiceGetRecommendationIdsArgs {
	return &TalkServiceGetRecommendationIdsArgs{}
}

func (p *TalkServiceGetRecommendationIdsArgs) GetSyncReason() SyncReason {
	return p.SyncReason
}
func (p *TalkServiceGetRecommendationIdsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetRecommendationIdsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := SyncReason(v)
		p.SyncReason = temp
	}
	return nil
}

func (p *TalkServiceGetRecommendationIdsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRecommendationIds_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetRecommendationIdsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("syncReason", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SyncReason)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err)
	}
	return err
}

func (p *TalkServiceGetRecommendationIdsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetRecommendationIdsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetRecommendationIdsResult struct {
	Success []string       `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetRecommendationIdsResult() *TalkServiceGetRecommendationIdsResult {
	return &TalkServiceGetRecommendationIdsResult{}
}

var TalkServiceGetRecommendationIdsResult_Success_DEFAULT []string

func (p *TalkServiceGetRecommendationIdsResult) GetSuccess() []string {
	return p.Success
}

var TalkServiceGetRecommendationIdsResult_E_DEFAULT *TalkException

func (p *TalkServiceGetRecommendationIdsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetRecommendationIdsResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetRecommendationIdsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetRecommendationIdsResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetRecommendationIdsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetRecommendationIdsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem344 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem344 = v
		}
		p.Success = append(p.Success, _elem344)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetRecommendationIdsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetRecommendationIdsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRecommendationIds_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetRecommendationIdsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetRecommendationIdsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetRecommendationIdsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetRecommendationIdsResult(%+v)", *p)
}

// Attributes:
//  - CountryGroup
type TalkServiceGetCountriesArgs struct {
	// unused field # 1
	CountryGroup CountryGroup `thrift:"countryGroup,2" db:"countryGroup" json:"countryGroup"`
}

func NewTalkServiceGetCountriesArgs() *TalkServiceGetCountriesArgs {
	return &TalkServiceGetCountriesArgs{}
}

func (p *TalkServiceGetCountriesArgs) GetCountryGroup() CountryGroup {
	return p.CountryGroup
}
func (p *TalkServiceGetCountriesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetCountriesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := CountryGroup(v)
		p.CountryGroup = temp
	}
	return nil
}

func (p *TalkServiceGetCountriesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCountries_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetCountriesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("countryGroup", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:countryGroup: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.CountryGroup)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.countryGroup (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:countryGroup: ", p), err)
	}
	return err
}

func (p *TalkServiceGetCountriesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetCountriesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetCountriesResult struct {
	Success []string       `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetCountriesResult() *TalkServiceGetCountriesResult {
	return &TalkServiceGetCountriesResult{}
}

var TalkServiceGetCountriesResult_Success_DEFAULT []string

func (p *TalkServiceGetCountriesResult) GetSuccess() []string {
	return p.Success
}

var TalkServiceGetCountriesResult_E_DEFAULT *TalkException

func (p *TalkServiceGetCountriesResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetCountriesResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetCountriesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetCountriesResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetCountriesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetCountriesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]string, 0, size)
	p.Success = tSet
	for i := 0; i < size; i++ {
		var _elem345 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem345 = v
		}
		p.Success = append(p.Success, _elem345)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TalkServiceGetCountriesResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetCountriesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCountries_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetCountriesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.SET, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for i := 0; i < len(p.Success); i++ {
			for j := i + 1; j < len(p.Success); j++ {
				if reflect.DeepEqual(p.Success[i], p.Success[j]) {
					return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Success[i]))
				}
			}
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetCountriesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetCountriesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetCountriesResult(%+v)", *p)
}

// Attributes:
//  - GetFollowingsRequest
type TalkServiceGetFollowingsArgs struct {
	// unused field # 1
	GetFollowingsRequest *GetFollowingsRequest `thrift:"getFollowingsRequest,2" db:"getFollowingsRequest" json:"getFollowingsRequest"`
}

func NewTalkServiceGetFollowingsArgs() *TalkServiceGetFollowingsArgs {
	return &TalkServiceGetFollowingsArgs{}
}

var TalkServiceGetFollowingsArgs_GetFollowingsRequest_DEFAULT *GetFollowingsRequest

func (p *TalkServiceGetFollowingsArgs) GetGetFollowingsRequest() *GetFollowingsRequest {
	if !p.IsSetGetFollowingsRequest() {
		return TalkServiceGetFollowingsArgs_GetFollowingsRequest_DEFAULT
	}
	return p.GetFollowingsRequest
}
func (p *TalkServiceGetFollowingsArgs) IsSetGetFollowingsRequest() bool {
	return p.GetFollowingsRequest != nil
}

func (p *TalkServiceGetFollowingsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetFollowingsArgs) ReadField2(iprot thrift.TProtocol) error {
	p.GetFollowingsRequest = &GetFollowingsRequest{}
	if err := p.GetFollowingsRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetFollowingsRequest), err)
	}
	return nil
}

func (p *TalkServiceGetFollowingsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getFollowings_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetFollowingsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("getFollowingsRequest", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:getFollowingsRequest: ", p), err)
	}
	if err := p.GetFollowingsRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetFollowingsRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:getFollowingsRequest: ", p), err)
	}
	return err
}

func (p *TalkServiceGetFollowingsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetFollowingsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetFollowingsResult struct {
	Success *GetFollowingsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException         `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetFollowingsResult() *TalkServiceGetFollowingsResult {
	return &TalkServiceGetFollowingsResult{}
}

var TalkServiceGetFollowingsResult_Success_DEFAULT *GetFollowingsResponse

func (p *TalkServiceGetFollowingsResult) GetSuccess() *GetFollowingsResponse {
	if !p.IsSetSuccess() {
		return TalkServiceGetFollowingsResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetFollowingsResult_E_DEFAULT *TalkException

func (p *TalkServiceGetFollowingsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetFollowingsResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetFollowingsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetFollowingsResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetFollowingsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetFollowingsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetFollowingsResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetFollowingsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetFollowingsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getFollowings_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetFollowingsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetFollowingsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetFollowingsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetFollowingsResult(%+v)", *p)
}

type TalkServiceGetLastOpRevisionArgs struct {
}

func NewTalkServiceGetLastOpRevisionArgs() *TalkServiceGetLastOpRevisionArgs {
	return &TalkServiceGetLastOpRevisionArgs{}
}

func (p *TalkServiceGetLastOpRevisionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetLastOpRevisionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLastOpRevision_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetLastOpRevisionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetLastOpRevisionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetLastOpRevisionResult struct {
	Success *int64         `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetLastOpRevisionResult() *TalkServiceGetLastOpRevisionResult {
	return &TalkServiceGetLastOpRevisionResult{}
}

var TalkServiceGetLastOpRevisionResult_Success_DEFAULT int64

func (p *TalkServiceGetLastOpRevisionResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return TalkServiceGetLastOpRevisionResult_Success_DEFAULT
	}
	return *p.Success
}

var TalkServiceGetLastOpRevisionResult_E_DEFAULT *TalkException

func (p *TalkServiceGetLastOpRevisionResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetLastOpRevisionResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetLastOpRevisionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetLastOpRevisionResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetLastOpRevisionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetLastOpRevisionResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TalkServiceGetLastOpRevisionResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetLastOpRevisionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLastOpRevision_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetLastOpRevisionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetLastOpRevisionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetLastOpRevisionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetLastOpRevisionResult(%+v)", *p)
}

type TalkServiceGetRingbackToneArgs struct {
}

func NewTalkServiceGetRingbackToneArgs() *TalkServiceGetRingbackToneArgs {
	return &TalkServiceGetRingbackToneArgs{}
}

func (p *TalkServiceGetRingbackToneArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetRingbackToneArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRingbackTone_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetRingbackToneArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetRingbackToneArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetRingbackToneResult struct {
	Success *int64         `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetRingbackToneResult() *TalkServiceGetRingbackToneResult {
	return &TalkServiceGetRingbackToneResult{}
}

var TalkServiceGetRingbackToneResult_Success_DEFAULT int64

func (p *TalkServiceGetRingbackToneResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return TalkServiceGetRingbackToneResult_Success_DEFAULT
	}
	return *p.Success
}

var TalkServiceGetRingbackToneResult_E_DEFAULT *TalkException

func (p *TalkServiceGetRingbackToneResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetRingbackToneResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetRingbackToneResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetRingbackToneResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetRingbackToneResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetRingbackToneResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TalkServiceGetRingbackToneResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetRingbackToneResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRingbackTone_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetRingbackToneResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetRingbackToneResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetRingbackToneResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetRingbackToneResult(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - MigrationPincodeSessionId
type TalkServiceRegisterWithPhoneNumberArgs struct {
	SessionId                 string `thrift:"sessionId,1" db:"sessionId" json:"sessionId"`
	MigrationPincodeSessionId string `thrift:"migrationPincodeSessionId,2" db:"migrationPincodeSessionId" json:"migrationPincodeSessionId"`
}

func NewTalkServiceRegisterWithPhoneNumberArgs() *TalkServiceRegisterWithPhoneNumberArgs {
	return &TalkServiceRegisterWithPhoneNumberArgs{}
}

func (p *TalkServiceRegisterWithPhoneNumberArgs) GetSessionId() string {
	return p.SessionId
}

func (p *TalkServiceRegisterWithPhoneNumberArgs) GetMigrationPincodeSessionId() string {
	return p.MigrationPincodeSessionId
}
func (p *TalkServiceRegisterWithPhoneNumberArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRegisterWithPhoneNumberArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *TalkServiceRegisterWithPhoneNumberArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MigrationPincodeSessionId = v
	}
	return nil
}

func (p *TalkServiceRegisterWithPhoneNumberArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerWithPhoneNumber_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRegisterWithPhoneNumberArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteString(string(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *TalkServiceRegisterWithPhoneNumberArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("migrationPincodeSessionId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:migrationPincodeSessionId: ", p), err)
	}
	if err := oprot.WriteString(string(p.MigrationPincodeSessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.migrationPincodeSessionId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:migrationPincodeSessionId: ", p), err)
	}
	return err
}

func (p *TalkServiceRegisterWithPhoneNumberArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRegisterWithPhoneNumberArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceRegisterWithPhoneNumberResult struct {
	Success *RegisterWithPhoneNumberResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException                  `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRegisterWithPhoneNumberResult() *TalkServiceRegisterWithPhoneNumberResult {
	return &TalkServiceRegisterWithPhoneNumberResult{}
}

var TalkServiceRegisterWithPhoneNumberResult_Success_DEFAULT *RegisterWithPhoneNumberResult_

func (p *TalkServiceRegisterWithPhoneNumberResult) GetSuccess() *RegisterWithPhoneNumberResult_ {
	if !p.IsSetSuccess() {
		return TalkServiceRegisterWithPhoneNumberResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceRegisterWithPhoneNumberResult_E_DEFAULT *TalkException

func (p *TalkServiceRegisterWithPhoneNumberResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceRegisterWithPhoneNumberResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceRegisterWithPhoneNumberResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceRegisterWithPhoneNumberResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceRegisterWithPhoneNumberResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRegisterWithPhoneNumberResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &RegisterWithPhoneNumberResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceRegisterWithPhoneNumberResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceRegisterWithPhoneNumberResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerWithPhoneNumber_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRegisterWithPhoneNumberResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceRegisterWithPhoneNumberResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceRegisterWithPhoneNumberResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRegisterWithPhoneNumberResult(%+v)", *p)
}

// Attributes:
//  - SyncOpRevision
//  - Category
//  - Report
type TalkServiceReportArgs struct {
	// unused field # 1
	SyncOpRevision int64          `thrift:"syncOpRevision,2" db:"syncOpRevision" json:"syncOpRevision"`
	Category       ReportCategory `thrift:"category,3" db:"category" json:"category"`
	Report         string         `thrift:"report,4" db:"report" json:"report"`
}

func NewTalkServiceReportArgs() *TalkServiceReportArgs {
	return &TalkServiceReportArgs{}
}

func (p *TalkServiceReportArgs) GetSyncOpRevision() int64 {
	return p.SyncOpRevision
}

func (p *TalkServiceReportArgs) GetCategory() ReportCategory {
	return p.Category
}

func (p *TalkServiceReportArgs) GetReport() string {
	return p.Report
}
func (p *TalkServiceReportArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceReportArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SyncOpRevision = v
	}
	return nil
}

func (p *TalkServiceReportArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := ReportCategory(v)
		p.Category = temp
	}
	return nil
}

func (p *TalkServiceReportArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Report = v
	}
	return nil
}

func (p *TalkServiceReportArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("report_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceReportArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("syncOpRevision", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:syncOpRevision: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SyncOpRevision)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.syncOpRevision (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:syncOpRevision: ", p), err)
	}
	return err
}

func (p *TalkServiceReportArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("category", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:category: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Category)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.category (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:category: ", p), err)
	}
	return err
}

func (p *TalkServiceReportArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("report", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:report: ", p), err)
	}
	if err := oprot.WriteString(string(p.Report)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.report (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:report: ", p), err)
	}
	return err
}

func (p *TalkServiceReportArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceReportArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceReportResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceReportResult() *TalkServiceReportResult {
	return &TalkServiceReportResult{}
}

var TalkServiceReportResult_E_DEFAULT *TalkException

func (p *TalkServiceReportResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceReportResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceReportResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceReportResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceReportResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceReportResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("report_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceReportResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceReportResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceReportResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ID
type TalkServiceUnblockRecommendationArgs struct {
	ReqSeq int32  `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	ID     string `thrift:"id,2" db:"id" json:"id"`
}

func NewTalkServiceUnblockRecommendationArgs() *TalkServiceUnblockRecommendationArgs {
	return &TalkServiceUnblockRecommendationArgs{}
}

func (p *TalkServiceUnblockRecommendationArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceUnblockRecommendationArgs) GetID() string {
	return p.ID
}
func (p *TalkServiceUnblockRecommendationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUnblockRecommendationArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceUnblockRecommendationArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *TalkServiceUnblockRecommendationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unblockRecommendation_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUnblockRecommendationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceUnblockRecommendationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err)
	}
	return err
}

func (p *TalkServiceUnblockRecommendationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUnblockRecommendationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUnblockRecommendationResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUnblockRecommendationResult() *TalkServiceUnblockRecommendationResult {
	return &TalkServiceUnblockRecommendationResult{}
}

var TalkServiceUnblockRecommendationResult_E_DEFAULT *TalkException

func (p *TalkServiceUnblockRecommendationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceUnblockRecommendationResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceUnblockRecommendationResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceUnblockRecommendationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUnblockRecommendationResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceUnblockRecommendationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unblockRecommendation_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUnblockRecommendationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUnblockRecommendationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUnblockRecommendationResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Group
type TalkServiceUpdateGroupArgs struct {
	ReqSeq int32  `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	Group  *Group `thrift:"group,2" db:"group" json:"group"`
}

func NewTalkServiceUpdateGroupArgs() *TalkServiceUpdateGroupArgs {
	return &TalkServiceUpdateGroupArgs{}
}

func (p *TalkServiceUpdateGroupArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

var TalkServiceUpdateGroupArgs_Group_DEFAULT *Group

func (p *TalkServiceUpdateGroupArgs) GetGroup() *Group {
	if !p.IsSetGroup() {
		return TalkServiceUpdateGroupArgs_Group_DEFAULT
	}
	return p.Group
}
func (p *TalkServiceUpdateGroupArgs) IsSetGroup() bool {
	return p.Group != nil
}

func (p *TalkServiceUpdateGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateGroupArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceUpdateGroupArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Group = &Group{}
	if err := p.Group.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Group), err)
	}
	return nil
}

func (p *TalkServiceUpdateGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:group: ", p), err)
	}
	if err := p.Group.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Group), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:group: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateGroupArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateGroupResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateGroupResult() *TalkServiceUpdateGroupResult {
	return &TalkServiceUpdateGroupResult{}
}

var TalkServiceUpdateGroupResult_E_DEFAULT *TalkException

func (p *TalkServiceUpdateGroupResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceUpdateGroupResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceUpdateGroupResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceUpdateGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateGroupResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceUpdateGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUpdateGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateGroupResult(%+v)", *p)
}

// Attributes:
//  - Language
//  - Country
//  - Query
//  - FromIndex
//  - Count
//  - RequestSource
type TalkServiceFindBuddyContactsByQueryArgs struct {
	// unused field # 1
	Language      string         `thrift:"language,2" db:"language" json:"language"`
	Country       string         `thrift:"country,3" db:"country" json:"country"`
	Query         string         `thrift:"query,4" db:"query" json:"query"`
	FromIndex     int32          `thrift:"fromIndex,5" db:"fromIndex" json:"fromIndex"`
	Count         int32          `thrift:"count,6" db:"count" json:"count"`
	RequestSource RequestsSource `thrift:"requestSource,7" db:"requestSource" json:"requestSource"`
}

func NewTalkServiceFindBuddyContactsByQueryArgs() *TalkServiceFindBuddyContactsByQueryArgs {
	return &TalkServiceFindBuddyContactsByQueryArgs{}
}

func (p *TalkServiceFindBuddyContactsByQueryArgs) GetLanguage() string {
	return p.Language
}

func (p *TalkServiceFindBuddyContactsByQueryArgs) GetCountry() string {
	return p.Country
}

func (p *TalkServiceFindBuddyContactsByQueryArgs) GetQuery() string {
	return p.Query
}

func (p *TalkServiceFindBuddyContactsByQueryArgs) GetFromIndex() int32 {
	return p.FromIndex
}

func (p *TalkServiceFindBuddyContactsByQueryArgs) GetCount() int32 {
	return p.Count
}

func (p *TalkServiceFindBuddyContactsByQueryArgs) GetRequestSource() RequestsSource {
	return p.RequestSource
}
func (p *TalkServiceFindBuddyContactsByQueryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindBuddyContactsByQueryArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Language = v
	}
	return nil
}

func (p *TalkServiceFindBuddyContactsByQueryArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Country = v
	}
	return nil
}

func (p *TalkServiceFindBuddyContactsByQueryArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Query = v
	}
	return nil
}

func (p *TalkServiceFindBuddyContactsByQueryArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.FromIndex = v
	}
	return nil
}

func (p *TalkServiceFindBuddyContactsByQueryArgs) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *TalkServiceFindBuddyContactsByQueryArgs) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := RequestsSource(v)
		p.RequestSource = temp
	}
	return nil
}

func (p *TalkServiceFindBuddyContactsByQueryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findBuddyContactsByQuery_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindBuddyContactsByQueryArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("language", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:language: ", p), err)
	}
	if err := oprot.WriteString(string(p.Language)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.language (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:language: ", p), err)
	}
	return err
}

func (p *TalkServiceFindBuddyContactsByQueryArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("country", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:country: ", p), err)
	}
	if err := oprot.WriteString(string(p.Country)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.country (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:country: ", p), err)
	}
	return err
}

func (p *TalkServiceFindBuddyContactsByQueryArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("query", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:query: ", p), err)
	}
	if err := oprot.WriteString(string(p.Query)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.query (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:query: ", p), err)
	}
	return err
}

func (p *TalkServiceFindBuddyContactsByQueryArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fromIndex", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:fromIndex: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.FromIndex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromIndex (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:fromIndex: ", p), err)
	}
	return err
}

func (p *TalkServiceFindBuddyContactsByQueryArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:count: ", p), err)
	}
	return err
}

func (p *TalkServiceFindBuddyContactsByQueryArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestSource", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:requestSource: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.RequestSource)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestSource (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:requestSource: ", p), err)
	}
	return err
}

func (p *TalkServiceFindBuddyContactsByQueryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindBuddyContactsByQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindBuddyContactsByQueryResult struct {
	Success []*BuddySearchResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException        `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindBuddyContactsByQueryResult() *TalkServiceFindBuddyContactsByQueryResult {
	return &TalkServiceFindBuddyContactsByQueryResult{}
}

var TalkServiceFindBuddyContactsByQueryResult_Success_DEFAULT []*BuddySearchResult_

func (p *TalkServiceFindBuddyContactsByQueryResult) GetSuccess() []*BuddySearchResult_ {
	return p.Success
}

var TalkServiceFindBuddyContactsByQueryResult_E_DEFAULT *TalkException

func (p *TalkServiceFindBuddyContactsByQueryResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceFindBuddyContactsByQueryResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceFindBuddyContactsByQueryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceFindBuddyContactsByQueryResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceFindBuddyContactsByQueryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindBuddyContactsByQueryResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*BuddySearchResult_, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem346 := &BuddySearchResult_{}
		if err := _elem346.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem346), err)
		}
		p.Success = append(p.Success, _elem346)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceFindBuddyContactsByQueryResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceFindBuddyContactsByQueryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findBuddyContactsByQuery_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindBuddyContactsByQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindBuddyContactsByQueryResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindBuddyContactsByQueryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindBuddyContactsByQueryResult(%+v)", *p)
}

// Attributes:
//  - Language
type TalkServiceGetPaidCallMetadataArgs struct {
	// unused field # 1
	Language string `thrift:"language,2" db:"language" json:"language"`
}

func NewTalkServiceGetPaidCallMetadataArgs() *TalkServiceGetPaidCallMetadataArgs {
	return &TalkServiceGetPaidCallMetadataArgs{}
}

func (p *TalkServiceGetPaidCallMetadataArgs) GetLanguage() string {
	return p.Language
}
func (p *TalkServiceGetPaidCallMetadataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetPaidCallMetadataArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Language = v
	}
	return nil
}

func (p *TalkServiceGetPaidCallMetadataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPaidCallMetadata_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetPaidCallMetadataArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("language", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:language: ", p), err)
	}
	if err := oprot.WriteString(string(p.Language)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.language (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:language: ", p), err)
	}
	return err
}

func (p *TalkServiceGetPaidCallMetadataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetPaidCallMetadataArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetPaidCallMetadataResult struct {
	Success *PaidCallMetadataResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException           `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetPaidCallMetadataResult() *TalkServiceGetPaidCallMetadataResult {
	return &TalkServiceGetPaidCallMetadataResult{}
}

var TalkServiceGetPaidCallMetadataResult_Success_DEFAULT *PaidCallMetadataResult_

func (p *TalkServiceGetPaidCallMetadataResult) GetSuccess() *PaidCallMetadataResult_ {
	if !p.IsSetSuccess() {
		return TalkServiceGetPaidCallMetadataResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetPaidCallMetadataResult_E_DEFAULT *TalkException

func (p *TalkServiceGetPaidCallMetadataResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetPaidCallMetadataResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetPaidCallMetadataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetPaidCallMetadataResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetPaidCallMetadataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetPaidCallMetadataResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &PaidCallMetadataResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetPaidCallMetadataResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetPaidCallMetadataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPaidCallMetadata_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetPaidCallMetadataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetPaidCallMetadataResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetPaidCallMetadataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetPaidCallMetadataResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ID
type TalkServiceBlockRecommendationArgs struct {
	ReqSeq int32  `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	ID     string `thrift:"id,2" db:"id" json:"id"`
}

func NewTalkServiceBlockRecommendationArgs() *TalkServiceBlockRecommendationArgs {
	return &TalkServiceBlockRecommendationArgs{}
}

func (p *TalkServiceBlockRecommendationArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceBlockRecommendationArgs) GetID() string {
	return p.ID
}
func (p *TalkServiceBlockRecommendationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceBlockRecommendationArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceBlockRecommendationArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *TalkServiceBlockRecommendationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("blockRecommendation_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceBlockRecommendationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceBlockRecommendationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err)
	}
	return err
}

func (p *TalkServiceBlockRecommendationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceBlockRecommendationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceBlockRecommendationResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceBlockRecommendationResult() *TalkServiceBlockRecommendationResult {
	return &TalkServiceBlockRecommendationResult{}
}

var TalkServiceBlockRecommendationResult_E_DEFAULT *TalkException

func (p *TalkServiceBlockRecommendationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceBlockRecommendationResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceBlockRecommendationResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceBlockRecommendationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceBlockRecommendationResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceBlockRecommendationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("blockRecommendation_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceBlockRecommendationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceBlockRecommendationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceBlockRecommendationResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - SearchId
//  - Reference
type TalkServiceFindAndAddContactsByUseridArgs struct {
	ReqSeq    int32  `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	SearchId  string `thrift:"searchId,2" db:"searchId" json:"searchId"`
	Reference string `thrift:"reference,3" db:"reference" json:"reference"`
}

func NewTalkServiceFindAndAddContactsByUseridArgs() *TalkServiceFindAndAddContactsByUseridArgs {
	return &TalkServiceFindAndAddContactsByUseridArgs{}
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) GetSearchId() string {
	return p.SearchId
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) GetReference() string {
	return p.Reference
}
func (p *TalkServiceFindAndAddContactsByUseridArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SearchId = v
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Reference = v
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAndAddContactsByUserid_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("searchId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:searchId: ", p), err)
	}
	if err := oprot.WriteString(string(p.SearchId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.searchId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:searchId: ", p), err)
	}
	return err
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reference", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reference: ", p), err)
	}
	if err := oprot.WriteString(string(p.Reference)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reference (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reference: ", p), err)
	}
	return err
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindAndAddContactsByUseridArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindAndAddContactsByUseridResult struct {
	Success map[string]*Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException      `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindAndAddContactsByUseridResult() *TalkServiceFindAndAddContactsByUseridResult {
	return &TalkServiceFindAndAddContactsByUseridResult{}
}

var TalkServiceFindAndAddContactsByUseridResult_Success_DEFAULT map[string]*Contact

func (p *TalkServiceFindAndAddContactsByUseridResult) GetSuccess() map[string]*Contact {
	return p.Success
}

var TalkServiceFindAndAddContactsByUseridResult_E_DEFAULT *TalkException

func (p *TalkServiceFindAndAddContactsByUseridResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceFindAndAddContactsByUseridResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceFindAndAddContactsByUseridResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceFindAndAddContactsByUseridResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceFindAndAddContactsByUseridResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByUseridResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*Contact, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key347 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key347 = v
		}
		_val348 := &Contact{}
		if err := _val348.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val348), err)
		}
		p.Success[_key347] = _val348
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByUseridResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByUseridResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAndAddContactsByUserid_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByUseridResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindAndAddContactsByUseridResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindAndAddContactsByUseridResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindAndAddContactsByUseridResult(%+v)", *p)
}

// Attributes:
//  - Request
//  - SyncReason
type TalkServiceGetAllChatMidsArgs struct {
	Request    *GetAllChatMidsRequest `thrift:"request,1" db:"request" json:"request"`
	SyncReason SyncReason             `thrift:"syncReason,2" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetAllChatMidsArgs() *TalkServiceGetAllChatMidsArgs {
	return &TalkServiceGetAllChatMidsArgs{}
}

var TalkServiceGetAllChatMidsArgs_Request_DEFAULT *GetAllChatMidsRequest

func (p *TalkServiceGetAllChatMidsArgs) GetRequest() *GetAllChatMidsRequest {
	if !p.IsSetRequest() {
		return TalkServiceGetAllChatMidsArgs_Request_DEFAULT
	}
	return p.Request
}

func (p *TalkServiceGetAllChatMidsArgs) GetSyncReason() SyncReason {
	return p.SyncReason
}
func (p *TalkServiceGetAllChatMidsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceGetAllChatMidsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetAllChatMidsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &GetAllChatMidsRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceGetAllChatMidsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := SyncReason(v)
		p.SyncReason = temp
	}
	return nil
}

func (p *TalkServiceGetAllChatMidsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAllChatMids_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetAllChatMidsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *TalkServiceGetAllChatMidsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("syncReason", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:syncReason: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SyncReason)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.syncReason (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:syncReason: ", p), err)
	}
	return err
}

func (p *TalkServiceGetAllChatMidsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetAllChatMidsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetAllChatMidsResult struct {
	Success *GetAllChatMidsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException          `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetAllChatMidsResult() *TalkServiceGetAllChatMidsResult {
	return &TalkServiceGetAllChatMidsResult{}
}

var TalkServiceGetAllChatMidsResult_Success_DEFAULT *GetAllChatMidsResponse

func (p *TalkServiceGetAllChatMidsResult) GetSuccess() *GetAllChatMidsResponse {
	if !p.IsSetSuccess() {
		return TalkServiceGetAllChatMidsResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetAllChatMidsResult_E_DEFAULT *TalkException

func (p *TalkServiceGetAllChatMidsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetAllChatMidsResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetAllChatMidsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetAllChatMidsResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetAllChatMidsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetAllChatMidsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetAllChatMidsResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetAllChatMidsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetAllChatMidsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAllChatMids_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetAllChatMidsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetAllChatMidsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetAllChatMidsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetAllChatMidsResult(%+v)", *p)
}

// Attributes:
//  - ChatRoomMids
type TalkServiceGetChatRoomAnnouncementsArgs struct {
	// unused field # 1
	ChatRoomMids string `thrift:"chatRoomMids,2" db:"chatRoomMids" json:"chatRoomMids"`
}

func NewTalkServiceGetChatRoomAnnouncementsArgs() *TalkServiceGetChatRoomAnnouncementsArgs {
	return &TalkServiceGetChatRoomAnnouncementsArgs{}
}

func (p *TalkServiceGetChatRoomAnnouncementsArgs) GetChatRoomMids() string {
	return p.ChatRoomMids
}
func (p *TalkServiceGetChatRoomAnnouncementsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChatRoomMids = v
	}
	return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getChatRoomAnnouncements_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatRoomMids", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatRoomMids: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChatRoomMids)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatRoomMids (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatRoomMids: ", p), err)
	}
	return err
}

func (p *TalkServiceGetChatRoomAnnouncementsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetChatRoomAnnouncementsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetChatRoomAnnouncementsResult struct {
	Success []*ChatRoomAnnouncement `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException          `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetChatRoomAnnouncementsResult() *TalkServiceGetChatRoomAnnouncementsResult {
	return &TalkServiceGetChatRoomAnnouncementsResult{}
}

var TalkServiceGetChatRoomAnnouncementsResult_Success_DEFAULT []*ChatRoomAnnouncement

func (p *TalkServiceGetChatRoomAnnouncementsResult) GetSuccess() []*ChatRoomAnnouncement {
	return p.Success
}

var TalkServiceGetChatRoomAnnouncementsResult_E_DEFAULT *TalkException

func (p *TalkServiceGetChatRoomAnnouncementsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetChatRoomAnnouncementsResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetChatRoomAnnouncementsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetChatRoomAnnouncementsResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetChatRoomAnnouncementsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ChatRoomAnnouncement, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem349 := &ChatRoomAnnouncement{}
		if err := _elem349.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem349), err)
		}
		p.Success = append(p.Success, _elem349)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getChatRoomAnnouncements_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetChatRoomAnnouncementsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetChatRoomAnnouncementsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetChatRoomAnnouncementsResult(%+v)", *p)
}

type TalkServiceGetCountryWithRequestIpArgs struct {
}

func NewTalkServiceGetCountryWithRequestIpArgs() *TalkServiceGetCountryWithRequestIpArgs {
	return &TalkServiceGetCountryWithRequestIpArgs{}
}

func (p *TalkServiceGetCountryWithRequestIpArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetCountryWithRequestIpArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCountryWithRequestIp_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetCountryWithRequestIpArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetCountryWithRequestIpArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetCountryWithRequestIpResult struct {
	Success *string        `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetCountryWithRequestIpResult() *TalkServiceGetCountryWithRequestIpResult {
	return &TalkServiceGetCountryWithRequestIpResult{}
}

var TalkServiceGetCountryWithRequestIpResult_Success_DEFAULT string

func (p *TalkServiceGetCountryWithRequestIpResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return TalkServiceGetCountryWithRequestIpResult_Success_DEFAULT
	}
	return *p.Success
}

var TalkServiceGetCountryWithRequestIpResult_E_DEFAULT *TalkException

func (p *TalkServiceGetCountryWithRequestIpResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetCountryWithRequestIpResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetCountryWithRequestIpResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetCountryWithRequestIpResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetCountryWithRequestIpResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetCountryWithRequestIpResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TalkServiceGetCountryWithRequestIpResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetCountryWithRequestIpResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCountryWithRequestIp_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetCountryWithRequestIpResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetCountryWithRequestIpResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetCountryWithRequestIpResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetCountryWithRequestIpResult(%+v)", *p)
}

// Attributes:
//  - Direction
//  - LastSeenSeqId
type TalkServiceGetFriendRequestsArgs struct {
	Direction     Direction `thrift:"direction,1" db:"direction" json:"direction"`
	LastSeenSeqId int64     `thrift:"lastSeenSeqId,2" db:"lastSeenSeqId" json:"lastSeenSeqId"`
}

func NewTalkServiceGetFriendRequestsArgs() *TalkServiceGetFriendRequestsArgs {
	return &TalkServiceGetFriendRequestsArgs{}
}

func (p *TalkServiceGetFriendRequestsArgs) GetDirection() Direction {
	return p.Direction
}

func (p *TalkServiceGetFriendRequestsArgs) GetLastSeenSeqId() int64 {
	return p.LastSeenSeqId
}
func (p *TalkServiceGetFriendRequestsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetFriendRequestsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Direction(v)
		p.Direction = temp
	}
	return nil
}

func (p *TalkServiceGetFriendRequestsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.LastSeenSeqId = v
	}
	return nil
}

func (p *TalkServiceGetFriendRequestsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getFriendRequests_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetFriendRequestsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("direction", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:direction: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Direction)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.direction (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:direction: ", p), err)
	}
	return err
}

func (p *TalkServiceGetFriendRequestsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastSeenSeqId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastSeenSeqId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LastSeenSeqId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lastSeenSeqId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastSeenSeqId: ", p), err)
	}
	return err
}

func (p *TalkServiceGetFriendRequestsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetFriendRequestsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetFriendRequestsResult struct {
	Success []*FriendRequest `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException   `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetFriendRequestsResult() *TalkServiceGetFriendRequestsResult {
	return &TalkServiceGetFriendRequestsResult{}
}

var TalkServiceGetFriendRequestsResult_Success_DEFAULT []*FriendRequest

func (p *TalkServiceGetFriendRequestsResult) GetSuccess() []*FriendRequest {
	return p.Success
}

var TalkServiceGetFriendRequestsResult_E_DEFAULT *TalkException

func (p *TalkServiceGetFriendRequestsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetFriendRequestsResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetFriendRequestsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetFriendRequestsResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetFriendRequestsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetFriendRequestsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*FriendRequest, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem350 := &FriendRequest{}
		if err := _elem350.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem350), err)
		}
		p.Success = append(p.Success, _elem350)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetFriendRequestsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetFriendRequestsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getFriendRequests_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetFriendRequestsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetFriendRequestsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetFriendRequestsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetFriendRequestsResult(%+v)", *p)
}

type TalkServiceGetRingtoneArgs struct {
}

func NewTalkServiceGetRingtoneArgs() *TalkServiceGetRingtoneArgs {
	return &TalkServiceGetRingtoneArgs{}
}

func (p *TalkServiceGetRingtoneArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetRingtoneArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRingtone_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetRingtoneArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetRingtoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetRingtoneResult struct {
	Success *Ringtone      `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetRingtoneResult() *TalkServiceGetRingtoneResult {
	return &TalkServiceGetRingtoneResult{}
}

var TalkServiceGetRingtoneResult_Success_DEFAULT *Ringtone

func (p *TalkServiceGetRingtoneResult) GetSuccess() *Ringtone {
	if !p.IsSetSuccess() {
		return TalkServiceGetRingtoneResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetRingtoneResult_E_DEFAULT *TalkException

func (p *TalkServiceGetRingtoneResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetRingtoneResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetRingtoneResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetRingtoneResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetRingtoneResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetRingtoneResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Ringtone{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetRingtoneResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetRingtoneResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRingtone_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetRingtoneResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetRingtoneResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetRingtoneResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetRingtoneResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Profile
type TalkServiceUpdateProfileArgs struct {
	ReqSeq  int32    `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	Profile *Profile `thrift:"profile,2" db:"profile" json:"profile"`
}

func NewTalkServiceUpdateProfileArgs() *TalkServiceUpdateProfileArgs {
	return &TalkServiceUpdateProfileArgs{}
}

func (p *TalkServiceUpdateProfileArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

var TalkServiceUpdateProfileArgs_Profile_DEFAULT *Profile

func (p *TalkServiceUpdateProfileArgs) GetProfile() *Profile {
	if !p.IsSetProfile() {
		return TalkServiceUpdateProfileArgs_Profile_DEFAULT
	}
	return p.Profile
}
func (p *TalkServiceUpdateProfileArgs) IsSetProfile() bool {
	return p.Profile != nil
}

func (p *TalkServiceUpdateProfileArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateProfileArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceUpdateProfileArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Profile = &Profile{}
	if err := p.Profile.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Profile), err)
	}
	return nil
}

func (p *TalkServiceUpdateProfileArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateProfile_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateProfileArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("profile", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:profile: ", p), err)
	}
	if err := p.Profile.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Profile), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:profile: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateProfileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateProfileArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateProfileResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateProfileResult() *TalkServiceUpdateProfileResult {
	return &TalkServiceUpdateProfileResult{}
}

var TalkServiceUpdateProfileResult_E_DEFAULT *TalkException

func (p *TalkServiceUpdateProfileResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceUpdateProfileResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceUpdateProfileResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceUpdateProfileResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateProfileResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceUpdateProfileResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateProfile_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUpdateProfileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateProfileResult(%+v)", *p)
}

// Attributes:
//  - LastRev
//  - Badge
type TalkServiceNotifySleepArgs struct {
	// unused field # 1
	LastRev int64 `thrift:"lastRev,2" db:"lastRev" json:"lastRev"`
	Badge   int32 `thrift:"badge,3" db:"badge" json:"badge"`
}

func NewTalkServiceNotifySleepArgs() *TalkServiceNotifySleepArgs {
	return &TalkServiceNotifySleepArgs{}
}

func (p *TalkServiceNotifySleepArgs) GetLastRev() int64 {
	return p.LastRev
}

func (p *TalkServiceNotifySleepArgs) GetBadge() int32 {
	return p.Badge
}
func (p *TalkServiceNotifySleepArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceNotifySleepArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.LastRev = v
	}
	return nil
}

func (p *TalkServiceNotifySleepArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Badge = v
	}
	return nil
}

func (p *TalkServiceNotifySleepArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("notifySleep_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceNotifySleepArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastRev", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastRev: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LastRev)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lastRev (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastRev: ", p), err)
	}
	return err
}

func (p *TalkServiceNotifySleepArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("badge", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:badge: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Badge)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.badge (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:badge: ", p), err)
	}
	return err
}

func (p *TalkServiceNotifySleepArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceNotifySleepArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceNotifySleepResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceNotifySleepResult() *TalkServiceNotifySleepResult {
	return &TalkServiceNotifySleepResult{}
}

var TalkServiceNotifySleepResult_E_DEFAULT *TalkException

func (p *TalkServiceNotifySleepResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceNotifySleepResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceNotifySleepResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceNotifySleepResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceNotifySleepResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceNotifySleepResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("notifySleep_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceNotifySleepResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceNotifySleepResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceNotifySleepResult(%+v)", *p)
}

// Attributes:
//  - SnsIdType
//  - SnsAccessToken
//  - IdentityCredential
//  - Region
//  - UdidHash
//  - DeviceInfo
//  - MigrationPincodeSessionId
type TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs struct {
	// unused field # 1
	SnsIdType                 SnSIdTyoe           `thrift:"snsIdType,2" db:"snsIdType" json:"snsIdType"`
	SnsAccessToken            string              `thrift:"snsAccessToken,3" db:"snsAccessToken" json:"snsAccessToken"`
	IdentityCredential        *IdentityCredential `thrift:"identityCredential,4" db:"identityCredential" json:"identityCredential"`
	Region                    string              `thrift:"region,5" db:"region" json:"region"`
	UdidHash                  string              `thrift:"udidHash,6" db:"udidHash" json:"udidHash"`
	DeviceInfo                *DeviceInfo         `thrift:"deviceInfo,7" db:"deviceInfo" json:"deviceInfo"`
	MigrationPincodeSessionId string              `thrift:"migrationPincodeSessionId,8" db:"migrationPincodeSessionId" json:"migrationPincodeSessionId"`
}

func NewTalkServiceRegisterWithSnsIdAndIdentityCredentialArgs() *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs {
	return &TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs{}
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) GetSnsIdType() SnSIdTyoe {
	return p.SnsIdType
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) GetSnsAccessToken() string {
	return p.SnsAccessToken
}

var TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs_IdentityCredential_DEFAULT *IdentityCredential

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) GetIdentityCredential() *IdentityCredential {
	if !p.IsSetIdentityCredential() {
		return TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs_IdentityCredential_DEFAULT
	}
	return p.IdentityCredential
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) GetRegion() string {
	return p.Region
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) GetUdidHash() string {
	return p.UdidHash
}

var TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs_DeviceInfo_DEFAULT *DeviceInfo

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) GetDeviceInfo() *DeviceInfo {
	if !p.IsSetDeviceInfo() {
		return TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs_DeviceInfo_DEFAULT
	}
	return p.DeviceInfo
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) GetMigrationPincodeSessionId() string {
	return p.MigrationPincodeSessionId
}
func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) IsSetIdentityCredential() bool {
	return p.IdentityCredential != nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) IsSetDeviceInfo() bool {
	return p.DeviceInfo != nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := SnSIdTyoe(v)
		p.SnsIdType = temp
	}
	return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SnsAccessToken = v
	}
	return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) ReadField4(iprot thrift.TProtocol) error {
	p.IdentityCredential = &IdentityCredential{}
	if err := p.IdentityCredential.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IdentityCredential), err)
	}
	return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Region = v
	}
	return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.UdidHash = v
	}
	return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) ReadField7(iprot thrift.TProtocol) error {
	p.DeviceInfo = &DeviceInfo{}
	if err := p.DeviceInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeviceInfo), err)
	}
	return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.MigrationPincodeSessionId = v
	}
	return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerWithSnsIdAndIdentityCredential_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("snsIdType", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:snsIdType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SnsIdType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.snsIdType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:snsIdType: ", p), err)
	}
	return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("snsAccessToken", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:snsAccessToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.SnsAccessToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.snsAccessToken (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:snsAccessToken: ", p), err)
	}
	return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identityCredential", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:identityCredential: ", p), err)
	}
	if err := p.IdentityCredential.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IdentityCredential), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:identityCredential: ", p), err)
	}
	return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("region", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:region: ", p), err)
	}
	if err := oprot.WriteString(string(p.Region)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.region (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:region: ", p), err)
	}
	return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("udidHash", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:udidHash: ", p), err)
	}
	if err := oprot.WriteString(string(p.UdidHash)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.udidHash (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:udidHash: ", p), err)
	}
	return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceInfo", thrift.STRUCT, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:deviceInfo: ", p), err)
	}
	if err := p.DeviceInfo.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeviceInfo), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:deviceInfo: ", p), err)
	}
	return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("migrationPincodeSessionId", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:migrationPincodeSessionId: ", p), err)
	}
	if err := oprot.WriteString(string(p.MigrationPincodeSessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.migrationPincodeSessionId (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:migrationPincodeSessionId: ", p), err)
	}
	return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceRegisterWithSnsIdAndIdentityCredentialResult struct {
	Success *string        `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRegisterWithSnsIdAndIdentityCredentialResult() *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult {
	return &TalkServiceRegisterWithSnsIdAndIdentityCredentialResult{}
}

var TalkServiceRegisterWithSnsIdAndIdentityCredentialResult_Success_DEFAULT string

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return TalkServiceRegisterWithSnsIdAndIdentityCredentialResult_Success_DEFAULT
	}
	return *p.Success
}

var TalkServiceRegisterWithSnsIdAndIdentityCredentialResult_E_DEFAULT *TalkException

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceRegisterWithSnsIdAndIdentityCredentialResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerWithSnsIdAndIdentityCredential_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRegisterWithSnsIdAndIdentityCredentialResult(%+v)", *p)
}

// Attributes:
//  - RemoveFollowerRequest
type TalkServiceRemoveFollowerArgs struct {
	// unused field # 1
	RemoveFollowerRequest *RemoveFollowerRequest `thrift:"removeFollowerRequest,2" db:"removeFollowerRequest" json:"removeFollowerRequest"`
}

func NewTalkServiceRemoveFollowerArgs() *TalkServiceRemoveFollowerArgs {
	return &TalkServiceRemoveFollowerArgs{}
}

var TalkServiceRemoveFollowerArgs_RemoveFollowerRequest_DEFAULT *RemoveFollowerRequest

func (p *TalkServiceRemoveFollowerArgs) GetRemoveFollowerRequest() *RemoveFollowerRequest {
	if !p.IsSetRemoveFollowerRequest() {
		return TalkServiceRemoveFollowerArgs_RemoveFollowerRequest_DEFAULT
	}
	return p.RemoveFollowerRequest
}
func (p *TalkServiceRemoveFollowerArgs) IsSetRemoveFollowerRequest() bool {
	return p.RemoveFollowerRequest != nil
}

func (p *TalkServiceRemoveFollowerArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRemoveFollowerArgs) ReadField2(iprot thrift.TProtocol) error {
	p.RemoveFollowerRequest = &RemoveFollowerRequest{}
	if err := p.RemoveFollowerRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RemoveFollowerRequest), err)
	}
	return nil
}

func (p *TalkServiceRemoveFollowerArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeFollower_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRemoveFollowerArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("removeFollowerRequest", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:removeFollowerRequest: ", p), err)
	}
	if err := p.RemoveFollowerRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RemoveFollowerRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:removeFollowerRequest: ", p), err)
	}
	return err
}

func (p *TalkServiceRemoveFollowerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRemoveFollowerArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRemoveFollowerResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRemoveFollowerResult() *TalkServiceRemoveFollowerResult {
	return &TalkServiceRemoveFollowerResult{}
}

var TalkServiceRemoveFollowerResult_E_DEFAULT *TalkException

func (p *TalkServiceRemoveFollowerResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceRemoveFollowerResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceRemoveFollowerResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceRemoveFollowerResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRemoveFollowerResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceRemoveFollowerResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeFollower_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRemoveFollowerResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceRemoveFollowerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRemoveFollowerResult(%+v)", *p)
}

// Attributes:
//  - Provider
//  - Identifier
//  - Locale
type TalkServiceRequestAccountPasswordResetArgs struct {
	// unused field # 1
	Identifier string `thrift:"identifier,2" db:"identifier" json:"identifier"`
	// unused field # 3
	Provider Provider `thrift:"provider,4" db:"provider" json:"provider"`
	Locale   string   `thrift:"locale,5" db:"locale" json:"locale"`
}

func NewTalkServiceRequestAccountPasswordResetArgs() *TalkServiceRequestAccountPasswordResetArgs {
	return &TalkServiceRequestAccountPasswordResetArgs{}
}

func (p *TalkServiceRequestAccountPasswordResetArgs) GetProvider() Provider {
	return p.Provider
}

func (p *TalkServiceRequestAccountPasswordResetArgs) GetIdentifier() string {
	return p.Identifier
}

func (p *TalkServiceRequestAccountPasswordResetArgs) GetLocale() string {
	return p.Locale
}
func (p *TalkServiceRequestAccountPasswordResetArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRequestAccountPasswordResetArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := Provider(v)
		p.Provider = temp
	}
	return nil
}

func (p *TalkServiceRequestAccountPasswordResetArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Identifier = v
	}
	return nil
}

func (p *TalkServiceRequestAccountPasswordResetArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Locale = v
	}
	return nil
}

func (p *TalkServiceRequestAccountPasswordResetArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("requestAccountPasswordReset_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRequestAccountPasswordResetArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identifier", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:identifier: ", p), err)
	}
	if err := oprot.WriteString(string(p.Identifier)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.identifier (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:identifier: ", p), err)
	}
	return err
}

func (p *TalkServiceRequestAccountPasswordResetArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("provider", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:provider: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Provider)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.provider (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:provider: ", p), err)
	}
	return err
}

func (p *TalkServiceRequestAccountPasswordResetArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("locale", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:locale: ", p), err)
	}
	if err := oprot.WriteString(string(p.Locale)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.locale (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:locale: ", p), err)
	}
	return err
}

func (p *TalkServiceRequestAccountPasswordResetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRequestAccountPasswordResetArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRequestAccountPasswordResetResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRequestAccountPasswordResetResult() *TalkServiceRequestAccountPasswordResetResult {
	return &TalkServiceRequestAccountPasswordResetResult{}
}

var TalkServiceRequestAccountPasswordResetResult_E_DEFAULT *TalkException

func (p *TalkServiceRequestAccountPasswordResetResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceRequestAccountPasswordResetResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceRequestAccountPasswordResetResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceRequestAccountPasswordResetResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRequestAccountPasswordResetResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceRequestAccountPasswordResetResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("requestAccountPasswordReset_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRequestAccountPasswordResetResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceRequestAccountPasswordResetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRequestAccountPasswordResetResult(%+v)", *p)
}

// Attributes:
//  - Text
type TalkServiceSendEchoPushArgs struct {
	// unused field # 1
	Text string `thrift:"text,2" db:"text" json:"text"`
}

func NewTalkServiceSendEchoPushArgs() *TalkServiceSendEchoPushArgs {
	return &TalkServiceSendEchoPushArgs{}
}

func (p *TalkServiceSendEchoPushArgs) GetText() string {
	return p.Text
}
func (p *TalkServiceSendEchoPushArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceSendEchoPushArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Text = v
	}
	return nil
}

func (p *TalkServiceSendEchoPushArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendEchoPush_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceSendEchoPushArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("text", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:text: ", p), err)
	}
	if err := oprot.WriteString(string(p.Text)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.text (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:text: ", p), err)
	}
	return err
}

func (p *TalkServiceSendEchoPushArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceSendEchoPushArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceSendEchoPushResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceSendEchoPushResult() *TalkServiceSendEchoPushResult {
	return &TalkServiceSendEchoPushResult{}
}

var TalkServiceSendEchoPushResult_E_DEFAULT *TalkException

func (p *TalkServiceSendEchoPushResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceSendEchoPushResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceSendEchoPushResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceSendEchoPushResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceSendEchoPushResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceSendEchoPushResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendEchoPush_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceSendEchoPushResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceSendEchoPushResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceSendEchoPushResult(%+v)", *p)
}

// Attributes:
//  - UnfollowRequest
type TalkServiceUnfollowArgs struct {
	// unused field # 1
	UnfollowRequest *UnfollowRequest `thrift:"unfollowRequest,2" db:"unfollowRequest" json:"unfollowRequest"`
}

func NewTalkServiceUnfollowArgs() *TalkServiceUnfollowArgs {
	return &TalkServiceUnfollowArgs{}
}

var TalkServiceUnfollowArgs_UnfollowRequest_DEFAULT *UnfollowRequest

func (p *TalkServiceUnfollowArgs) GetUnfollowRequest() *UnfollowRequest {
	if !p.IsSetUnfollowRequest() {
		return TalkServiceUnfollowArgs_UnfollowRequest_DEFAULT
	}
	return p.UnfollowRequest
}
func (p *TalkServiceUnfollowArgs) IsSetUnfollowRequest() bool {
	return p.UnfollowRequest != nil
}

func (p *TalkServiceUnfollowArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUnfollowArgs) ReadField2(iprot thrift.TProtocol) error {
	p.UnfollowRequest = &UnfollowRequest{}
	if err := p.UnfollowRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnfollowRequest), err)
	}
	return nil
}

func (p *TalkServiceUnfollowArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unfollow_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUnfollowArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("unfollowRequest", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:unfollowRequest: ", p), err)
	}
	if err := p.UnfollowRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnfollowRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:unfollowRequest: ", p), err)
	}
	return err
}

func (p *TalkServiceUnfollowArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUnfollowArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUnfollowResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUnfollowResult() *TalkServiceUnfollowResult {
	return &TalkServiceUnfollowResult{}
}

var TalkServiceUnfollowResult_E_DEFAULT *TalkException

func (p *TalkServiceUnfollowResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceUnfollowResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceUnfollowResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceUnfollowResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUnfollowResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceUnfollowResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unfollow_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUnfollowResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUnfollowResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUnfollowResult(%+v)", *p)
}

// Attributes:
//  - ChatMid
//  - MemberMids
//  - MediaType
type TalkServiceInviteIntoGroupCallArgs struct {
	// unused field # 1
	ChatMid    string    `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
	MemberMids []string  `thrift:"memberMids,3" db:"memberMids" json:"memberMids"`
	MediaType  MediaType `thrift:"mediaType,4" db:"mediaType" json:"mediaType"`
}

func NewTalkServiceInviteIntoGroupCallArgs() *TalkServiceInviteIntoGroupCallArgs {
	return &TalkServiceInviteIntoGroupCallArgs{}
}

func (p *TalkServiceInviteIntoGroupCallArgs) GetChatMid() string {
	return p.ChatMid
}

func (p *TalkServiceInviteIntoGroupCallArgs) GetMemberMids() []string {
	return p.MemberMids
}

func (p *TalkServiceInviteIntoGroupCallArgs) GetMediaType() MediaType {
	return p.MediaType
}
func (p *TalkServiceInviteIntoGroupCallArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceInviteIntoGroupCallArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChatMid = v
	}
	return nil
}

func (p *TalkServiceInviteIntoGroupCallArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.MemberMids = tSlice
	for i := 0; i < size; i++ {
		var _elem351 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem351 = v
		}
		p.MemberMids = append(p.MemberMids, _elem351)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceInviteIntoGroupCallArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := MediaType(v)
		p.MediaType = temp
	}
	return nil
}

func (p *TalkServiceInviteIntoGroupCallArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("inviteIntoGroupCall_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceInviteIntoGroupCallArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChatMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err)
	}
	return err
}

func (p *TalkServiceInviteIntoGroupCallArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberMids", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:memberMids: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.MemberMids)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.MemberMids {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:memberMids: ", p), err)
	}
	return err
}

func (p *TalkServiceInviteIntoGroupCallArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mediaType", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:mediaType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MediaType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mediaType (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:mediaType: ", p), err)
	}
	return err
}

func (p *TalkServiceInviteIntoGroupCallArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceInviteIntoGroupCallArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceInviteIntoGroupCallResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceInviteIntoGroupCallResult() *TalkServiceInviteIntoGroupCallResult {
	return &TalkServiceInviteIntoGroupCallResult{}
}

var TalkServiceInviteIntoGroupCallResult_E_DEFAULT *TalkException

func (p *TalkServiceInviteIntoGroupCallResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceInviteIntoGroupCallResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceInviteIntoGroupCallResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceInviteIntoGroupCallResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceInviteIntoGroupCallResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceInviteIntoGroupCallResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("inviteIntoGroupCall_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceInviteIntoGroupCallResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceInviteIntoGroupCallResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceInviteIntoGroupCallResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceCancelChatInvitationArgs struct {
	Request *CancelChatInvitationRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceCancelChatInvitationArgs() *TalkServiceCancelChatInvitationArgs {
	return &TalkServiceCancelChatInvitationArgs{}
}

var TalkServiceCancelChatInvitationArgs_Request_DEFAULT *CancelChatInvitationRequest

func (p *TalkServiceCancelChatInvitationArgs) GetRequest() *CancelChatInvitationRequest {
	if !p.IsSetRequest() {
		return TalkServiceCancelChatInvitationArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *TalkServiceCancelChatInvitationArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceCancelChatInvitationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceCancelChatInvitationArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &CancelChatInvitationRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceCancelChatInvitationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cancelChatInvitation_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceCancelChatInvitationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *TalkServiceCancelChatInvitationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceCancelChatInvitationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceCancelChatInvitationResult struct {
	Success *CancelChatInvitationResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException                `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceCancelChatInvitationResult() *TalkServiceCancelChatInvitationResult {
	return &TalkServiceCancelChatInvitationResult{}
}

var TalkServiceCancelChatInvitationResult_Success_DEFAULT *CancelChatInvitationResponse

func (p *TalkServiceCancelChatInvitationResult) GetSuccess() *CancelChatInvitationResponse {
	if !p.IsSetSuccess() {
		return TalkServiceCancelChatInvitationResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceCancelChatInvitationResult_E_DEFAULT *TalkException

func (p *TalkServiceCancelChatInvitationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceCancelChatInvitationResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceCancelChatInvitationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceCancelChatInvitationResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceCancelChatInvitationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceCancelChatInvitationResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &CancelChatInvitationResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceCancelChatInvitationResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceCancelChatInvitationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cancelChatInvitation_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceCancelChatInvitationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceCancelChatInvitationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceCancelChatInvitationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceCancelChatInvitationResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceFindChatByTicketArgs struct {
	Request *FindChatByTicketRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceFindChatByTicketArgs() *TalkServiceFindChatByTicketArgs {
	return &TalkServiceFindChatByTicketArgs{}
}

var TalkServiceFindChatByTicketArgs_Request_DEFAULT *FindChatByTicketRequest

func (p *TalkServiceFindChatByTicketArgs) GetRequest() *FindChatByTicketRequest {
	if !p.IsSetRequest() {
		return TalkServiceFindChatByTicketArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *TalkServiceFindChatByTicketArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceFindChatByTicketArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindChatByTicketArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &FindChatByTicketRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceFindChatByTicketArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findChatByTicket_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindChatByTicketArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *TalkServiceFindChatByTicketArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindChatByTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindChatByTicketResult struct {
	Success *FindChatByTicketResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException            `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindChatByTicketResult() *TalkServiceFindChatByTicketResult {
	return &TalkServiceFindChatByTicketResult{}
}

var TalkServiceFindChatByTicketResult_Success_DEFAULT *FindChatByTicketResponse

func (p *TalkServiceFindChatByTicketResult) GetSuccess() *FindChatByTicketResponse {
	if !p.IsSetSuccess() {
		return TalkServiceFindChatByTicketResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceFindChatByTicketResult_E_DEFAULT *TalkException

func (p *TalkServiceFindChatByTicketResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceFindChatByTicketResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceFindChatByTicketResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceFindChatByTicketResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceFindChatByTicketResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindChatByTicketResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &FindChatByTicketResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceFindChatByTicketResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceFindChatByTicketResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findChatByTicket_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindChatByTicketResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindChatByTicketResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindChatByTicketResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindChatByTicketResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetAllContactIdsArgs struct {
	SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetAllContactIdsArgs() *TalkServiceGetAllContactIdsArgs {
	return &TalkServiceGetAllContactIdsArgs{}
}

func (p *TalkServiceGetAllContactIdsArgs) GetSyncReason() SyncReason {
	return p.SyncReason
}
func (p *TalkServiceGetAllContactIdsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetAllContactIdsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := SyncReason(v)
		p.SyncReason = temp
	}
	return nil
}

func (p *TalkServiceGetAllContactIdsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAllContactIds_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetAllContactIdsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("syncReason", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SyncReason)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err)
	}
	return err
}

func (p *TalkServiceGetAllContactIdsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetAllContactIdsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetAllContactIdsResult struct {
	Success []string       `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetAllContactIdsResult() *TalkServiceGetAllContactIdsResult {
	return &TalkServiceGetAllContactIdsResult{}
}

var TalkServiceGetAllContactIdsResult_Success_DEFAULT []string

func (p *TalkServiceGetAllContactIdsResult) GetSuccess() []string {
	return p.Success
}

var TalkServiceGetAllContactIdsResult_E_DEFAULT *TalkException

func (p *TalkServiceGetAllContactIdsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetAllContactIdsResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetAllContactIdsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetAllContactIdsResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetAllContactIdsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetAllContactIdsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem352 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem352 = v
		}
		p.Success = append(p.Success, _elem352)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetAllContactIdsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetAllContactIdsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAllContactIds_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetAllContactIdsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetAllContactIdsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetAllContactIdsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetAllContactIdsResult(%+v)", *p)
}

// Attributes:
//  - ChatRoomMids
//  - SyncReason
type TalkServiceGetChatRoomBGMsArgs struct {
	// unused field # 1
	ChatRoomMids []string   `thrift:"chatRoomMids,2" db:"chatRoomMids" json:"chatRoomMids"`
	SyncReason   SyncReason `thrift:"syncReason,3" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetChatRoomBGMsArgs() *TalkServiceGetChatRoomBGMsArgs {
	return &TalkServiceGetChatRoomBGMsArgs{}
}

func (p *TalkServiceGetChatRoomBGMsArgs) GetChatRoomMids() []string {
	return p.ChatRoomMids
}

func (p *TalkServiceGetChatRoomBGMsArgs) GetSyncReason() SyncReason {
	return p.SyncReason
}
func (p *TalkServiceGetChatRoomBGMsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetChatRoomBGMsArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]string, 0, size)
	p.ChatRoomMids = tSet
	for i := 0; i < size; i++ {
		var _elem353 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem353 = v
		}
		p.ChatRoomMids = append(p.ChatRoomMids, _elem353)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TalkServiceGetChatRoomBGMsArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := SyncReason(v)
		p.SyncReason = temp
	}
	return nil
}

func (p *TalkServiceGetChatRoomBGMsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getChatRoomBGMs_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetChatRoomBGMsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatRoomMids", thrift.SET, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatRoomMids: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.ChatRoomMids)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for i := 0; i < len(p.ChatRoomMids); i++ {
		for j := i + 1; j < len(p.ChatRoomMids); j++ {
			if reflect.DeepEqual(p.ChatRoomMids[i], p.ChatRoomMids[j]) {
				return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.ChatRoomMids[i]))
			}
		}
	}
	for _, v := range p.ChatRoomMids {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatRoomMids: ", p), err)
	}
	return err
}

func (p *TalkServiceGetChatRoomBGMsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("syncReason", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:syncReason: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SyncReason)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.syncReason (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:syncReason: ", p), err)
	}
	return err
}

func (p *TalkServiceGetChatRoomBGMsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetChatRoomBGMsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetChatRoomBGMsResult struct {
	Success map[string]*ChatRoomBGM `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException          `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetChatRoomBGMsResult() *TalkServiceGetChatRoomBGMsResult {
	return &TalkServiceGetChatRoomBGMsResult{}
}

var TalkServiceGetChatRoomBGMsResult_Success_DEFAULT map[string]*ChatRoomBGM

func (p *TalkServiceGetChatRoomBGMsResult) GetSuccess() map[string]*ChatRoomBGM {
	return p.Success
}

var TalkServiceGetChatRoomBGMsResult_E_DEFAULT *TalkException

func (p *TalkServiceGetChatRoomBGMsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetChatRoomBGMsResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetChatRoomBGMsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetChatRoomBGMsResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetChatRoomBGMsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetChatRoomBGMsResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*ChatRoomBGM, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key354 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key354 = v
		}
		_val355 := &ChatRoomBGM{}
		if err := _val355.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val355), err)
		}
		p.Success[_key354] = _val355
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TalkServiceGetChatRoomBGMsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetChatRoomBGMsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getChatRoomBGMs_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetChatRoomBGMsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetChatRoomBGMsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetChatRoomBGMsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetChatRoomBGMsResult(%+v)", *p)
}

// Attributes:
//  - KeyVersion
//  - ChatMid
//  - GroupKeyId
type TalkServiceGetE2EEGroupSharedKeyArgs struct {
	// unused field # 1
	KeyVersion int32  `thrift:"keyVersion,2" db:"keyVersion" json:"keyVersion"`
	ChatMid    string `thrift:"chatMid,3" db:"chatMid" json:"chatMid"`
	GroupKeyId int32  `thrift:"groupKeyId,4" db:"groupKeyId" json:"groupKeyId"`
}

func NewTalkServiceGetE2EEGroupSharedKeyArgs() *TalkServiceGetE2EEGroupSharedKeyArgs {
	return &TalkServiceGetE2EEGroupSharedKeyArgs{}
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) GetKeyVersion() int32 {
	return p.KeyVersion
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) GetChatMid() string {
	return p.ChatMid
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) GetGroupKeyId() int32 {
	return p.GroupKeyId
}
func (p *TalkServiceGetE2EEGroupSharedKeyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.KeyVersion = v
	}
	return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ChatMid = v
	}
	return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.GroupKeyId = v
	}
	return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getE2EEGroupSharedKey_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("keyVersion", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keyVersion: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.KeyVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.keyVersion (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keyVersion: ", p), err)
	}
	return err
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:chatMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChatMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatMid (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:chatMid: ", p), err)
	}
	return err
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupKeyId", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:groupKeyId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.GroupKeyId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupKeyId (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:groupKeyId: ", p), err)
	}
	return err
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetE2EEGroupSharedKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetE2EEGroupSharedKeyResult struct {
	Success *E2EEGroupSharedKey `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException      `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetE2EEGroupSharedKeyResult() *TalkServiceGetE2EEGroupSharedKeyResult {
	return &TalkServiceGetE2EEGroupSharedKeyResult{}
}

var TalkServiceGetE2EEGroupSharedKeyResult_Success_DEFAULT *E2EEGroupSharedKey

func (p *TalkServiceGetE2EEGroupSharedKeyResult) GetSuccess() *E2EEGroupSharedKey {
	if !p.IsSetSuccess() {
		return TalkServiceGetE2EEGroupSharedKeyResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetE2EEGroupSharedKeyResult_E_DEFAULT *TalkException

func (p *TalkServiceGetE2EEGroupSharedKeyResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetE2EEGroupSharedKeyResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetE2EEGroupSharedKeyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &E2EEGroupSharedKey{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getE2EEGroupSharedKey_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetE2EEGroupSharedKeyResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetGroupIdsInvitedArgs struct {
	SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetGroupIdsInvitedArgs() *TalkServiceGetGroupIdsInvitedArgs {
	return &TalkServiceGetGroupIdsInvitedArgs{}
}

func (p *TalkServiceGetGroupIdsInvitedArgs) GetSyncReason() SyncReason {
	return p.SyncReason
}
func (p *TalkServiceGetGroupIdsInvitedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetGroupIdsInvitedArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := SyncReason(v)
		p.SyncReason = temp
	}
	return nil
}

func (p *TalkServiceGetGroupIdsInvitedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroupIdsInvited_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupIdsInvitedArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("syncReason", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SyncReason)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err)
	}
	return err
}

func (p *TalkServiceGetGroupIdsInvitedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetGroupIdsInvitedArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetGroupIdsInvitedResult struct {
	Success []string       `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetGroupIdsInvitedResult() *TalkServiceGetGroupIdsInvitedResult {
	return &TalkServiceGetGroupIdsInvitedResult{}
}

var TalkServiceGetGroupIdsInvitedResult_Success_DEFAULT []string

func (p *TalkServiceGetGroupIdsInvitedResult) GetSuccess() []string {
	return p.Success
}

var TalkServiceGetGroupIdsInvitedResult_E_DEFAULT *TalkException

func (p *TalkServiceGetGroupIdsInvitedResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetGroupIdsInvitedResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetGroupIdsInvitedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetGroupIdsInvitedResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetGroupIdsInvitedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetGroupIdsInvitedResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem356 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem356 = v
		}
		p.Success = append(p.Success, _elem356)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupIdsInvitedResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetGroupIdsInvitedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroupIdsInvited_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupIdsInvitedResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetGroupIdsInvitedResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetGroupIdsInvitedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetGroupIdsInvitedResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetProfileArgs struct {
	SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetProfileArgs() *TalkServiceGetProfileArgs {
	return &TalkServiceGetProfileArgs{}
}

func (p *TalkServiceGetProfileArgs) GetSyncReason() SyncReason {
	return p.SyncReason
}
func (p *TalkServiceGetProfileArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetProfileArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := SyncReason(v)
		p.SyncReason = temp
	}
	return nil
}

func (p *TalkServiceGetProfileArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getProfile_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("syncReason", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SyncReason)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err)
	}
	return err
}

func (p *TalkServiceGetProfileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetProfileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetProfileResult struct {
	Success *Profile       `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetProfileResult() *TalkServiceGetProfileResult {
	return &TalkServiceGetProfileResult{}
}

var TalkServiceGetProfileResult_Success_DEFAULT *Profile

func (p *TalkServiceGetProfileResult) GetSuccess() *Profile {
	if !p.IsSetSuccess() {
		return TalkServiceGetProfileResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetProfileResult_E_DEFAULT *TalkException

func (p *TalkServiceGetProfileResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetProfileResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetProfileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetProfileResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetProfileResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetProfileResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Profile{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetProfileResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetProfileResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getProfile_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetProfileResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetProfileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetProfileResult(%+v)", *p)
}

// Attributes:
//  - LastRev
//  - DeviceInfo
//  - UdidHash
//  - OldUdidHash
type TalkServiceNotifyUpdatedArgs struct {
	// unused field # 1
	LastRev     int64       `thrift:"lastRev,2" db:"lastRev" json:"lastRev"`
	DeviceInfo  *DeviceInfo `thrift:"deviceInfo,3" db:"deviceInfo" json:"deviceInfo"`
	UdidHash    string      `thrift:"udidHash,4" db:"udidHash" json:"udidHash"`
	OldUdidHash string      `thrift:"oldUdidHash,5" db:"oldUdidHash" json:"oldUdidHash"`
}

func NewTalkServiceNotifyUpdatedArgs() *TalkServiceNotifyUpdatedArgs {
	return &TalkServiceNotifyUpdatedArgs{}
}

func (p *TalkServiceNotifyUpdatedArgs) GetLastRev() int64 {
	return p.LastRev
}

var TalkServiceNotifyUpdatedArgs_DeviceInfo_DEFAULT *DeviceInfo

func (p *TalkServiceNotifyUpdatedArgs) GetDeviceInfo() *DeviceInfo {
	if !p.IsSetDeviceInfo() {
		return TalkServiceNotifyUpdatedArgs_DeviceInfo_DEFAULT
	}
	return p.DeviceInfo
}

func (p *TalkServiceNotifyUpdatedArgs) GetUdidHash() string {
	return p.UdidHash
}

func (p *TalkServiceNotifyUpdatedArgs) GetOldUdidHash() string {
	return p.OldUdidHash
}
func (p *TalkServiceNotifyUpdatedArgs) IsSetDeviceInfo() bool {
	return p.DeviceInfo != nil
}

func (p *TalkServiceNotifyUpdatedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceNotifyUpdatedArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.LastRev = v
	}
	return nil
}

func (p *TalkServiceNotifyUpdatedArgs) ReadField3(iprot thrift.TProtocol) error {
	p.DeviceInfo = &DeviceInfo{}
	if err := p.DeviceInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeviceInfo), err)
	}
	return nil
}

func (p *TalkServiceNotifyUpdatedArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.UdidHash = v
	}
	return nil
}

func (p *TalkServiceNotifyUpdatedArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.OldUdidHash = v
	}
	return nil
}

func (p *TalkServiceNotifyUpdatedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("notifyUpdated_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceNotifyUpdatedArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastRev", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastRev: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LastRev)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lastRev (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastRev: ", p), err)
	}
	return err
}

func (p *TalkServiceNotifyUpdatedArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceInfo", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:deviceInfo: ", p), err)
	}
	if err := p.DeviceInfo.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeviceInfo), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:deviceInfo: ", p), err)
	}
	return err
}

func (p *TalkServiceNotifyUpdatedArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("udidHash", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:udidHash: ", p), err)
	}
	if err := oprot.WriteString(string(p.UdidHash)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.udidHash (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:udidHash: ", p), err)
	}
	return err
}

func (p *TalkServiceNotifyUpdatedArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("oldUdidHash", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:oldUdidHash: ", p), err)
	}
	if err := oprot.WriteString(string(p.OldUdidHash)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.oldUdidHash (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:oldUdidHash: ", p), err)
	}
	return err
}

func (p *TalkServiceNotifyUpdatedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceNotifyUpdatedArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceNotifyUpdatedResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceNotifyUpdatedResult() *TalkServiceNotifyUpdatedResult {
	return &TalkServiceNotifyUpdatedResult{}
}

var TalkServiceNotifyUpdatedResult_E_DEFAULT *TalkException

func (p *TalkServiceNotifyUpdatedResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceNotifyUpdatedResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceNotifyUpdatedResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceNotifyUpdatedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceNotifyUpdatedResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceNotifyUpdatedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("notifyUpdated_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceNotifyUpdatedResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceNotifyUpdatedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceNotifyUpdatedResult(%+v)", *p)
}

// Attributes:
//  - SnsIdType
//  - SnsAccessToken
//  - Region
//  - UdidHash
//  - DeviceInfo
//  - Mid
//  - MigrationPincodeSessionId
type TalkServiceRegisterWithSnsIdArgs struct {
	// unused field # 1
	SnsIdType                 SnSIdTyoe   `thrift:"snsIdType,2" db:"snsIdType" json:"snsIdType"`
	SnsAccessToken            string      `thrift:"snsAccessToken,3" db:"snsAccessToken" json:"snsAccessToken"`
	Region                    string      `thrift:"region,4" db:"region" json:"region"`
	UdidHash                  string      `thrift:"udidHash,5" db:"udidHash" json:"udidHash"`
	DeviceInfo                *DeviceInfo `thrift:"deviceInfo,6" db:"deviceInfo" json:"deviceInfo"`
	Mid                       string      `thrift:"mid,7" db:"mid" json:"mid"`
	MigrationPincodeSessionId string      `thrift:"migrationPincodeSessionId,8" db:"migrationPincodeSessionId" json:"migrationPincodeSessionId"`
}

func NewTalkServiceRegisterWithSnsIdArgs() *TalkServiceRegisterWithSnsIdArgs {
	return &TalkServiceRegisterWithSnsIdArgs{}
}

func (p *TalkServiceRegisterWithSnsIdArgs) GetSnsIdType() SnSIdTyoe {
	return p.SnsIdType
}

func (p *TalkServiceRegisterWithSnsIdArgs) GetSnsAccessToken() string {
	return p.SnsAccessToken
}

func (p *TalkServiceRegisterWithSnsIdArgs) GetRegion() string {
	return p.Region
}

func (p *TalkServiceRegisterWithSnsIdArgs) GetUdidHash() string {
	return p.UdidHash
}

var TalkServiceRegisterWithSnsIdArgs_DeviceInfo_DEFAULT *DeviceInfo

func (p *TalkServiceRegisterWithSnsIdArgs) GetDeviceInfo() *DeviceInfo {
	if !p.IsSetDeviceInfo() {
		return TalkServiceRegisterWithSnsIdArgs_DeviceInfo_DEFAULT
	}
	return p.DeviceInfo
}

func (p *TalkServiceRegisterWithSnsIdArgs) GetMid() string {
	return p.Mid
}

func (p *TalkServiceRegisterWithSnsIdArgs) GetMigrationPincodeSessionId() string {
	return p.MigrationPincodeSessionId
}
func (p *TalkServiceRegisterWithSnsIdArgs) IsSetDeviceInfo() bool {
	return p.DeviceInfo != nil
}

func (p *TalkServiceRegisterWithSnsIdArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := SnSIdTyoe(v)
		p.SnsIdType = temp
	}
	return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SnsAccessToken = v
	}
	return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Region = v
	}
	return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.UdidHash = v
	}
	return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs) ReadField6(iprot thrift.TProtocol) error {
	p.DeviceInfo = &DeviceInfo{}
	if err := p.DeviceInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeviceInfo), err)
	}
	return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.MigrationPincodeSessionId = v
	}
	return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerWithSnsId_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("snsIdType", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:snsIdType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SnsIdType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.snsIdType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:snsIdType: ", p), err)
	}
	return err
}

func (p *TalkServiceRegisterWithSnsIdArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("snsAccessToken", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:snsAccessToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.SnsAccessToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.snsAccessToken (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:snsAccessToken: ", p), err)
	}
	return err
}

func (p *TalkServiceRegisterWithSnsIdArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("region", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:region: ", p), err)
	}
	if err := oprot.WriteString(string(p.Region)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.region (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:region: ", p), err)
	}
	return err
}

func (p *TalkServiceRegisterWithSnsIdArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("udidHash", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:udidHash: ", p), err)
	}
	if err := oprot.WriteString(string(p.UdidHash)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.udidHash (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:udidHash: ", p), err)
	}
	return err
}

func (p *TalkServiceRegisterWithSnsIdArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceInfo", thrift.STRUCT, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:deviceInfo: ", p), err)
	}
	if err := p.DeviceInfo.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeviceInfo), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:deviceInfo: ", p), err)
	}
	return err
}

func (p *TalkServiceRegisterWithSnsIdArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:mid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mid (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:mid: ", p), err)
	}
	return err
}

func (p *TalkServiceRegisterWithSnsIdArgs) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("migrationPincodeSessionId", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:migrationPincodeSessionId: ", p), err)
	}
	if err := oprot.WriteString(string(p.MigrationPincodeSessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.migrationPincodeSessionId (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:migrationPincodeSessionId: ", p), err)
	}
	return err
}

func (p *TalkServiceRegisterWithSnsIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRegisterWithSnsIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceRegisterWithSnsIdResult struct {
	Success *RegisterWithSnsIdResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException            `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRegisterWithSnsIdResult() *TalkServiceRegisterWithSnsIdResult {
	return &TalkServiceRegisterWithSnsIdResult{}
}

var TalkServiceRegisterWithSnsIdResult_Success_DEFAULT *RegisterWithSnsIdResult_

func (p *TalkServiceRegisterWithSnsIdResult) GetSuccess() *RegisterWithSnsIdResult_ {
	if !p.IsSetSuccess() {
		return TalkServiceRegisterWithSnsIdResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceRegisterWithSnsIdResult_E_DEFAULT *TalkException

func (p *TalkServiceRegisterWithSnsIdResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceRegisterWithSnsIdResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceRegisterWithSnsIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceRegisterWithSnsIdResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceRegisterWithSnsIdResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRegisterWithSnsIdResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &RegisterWithSnsIdResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceRegisterWithSnsIdResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceRegisterWithSnsIdResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerWithSnsId_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRegisterWithSnsIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceRegisterWithSnsIdResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceRegisterWithSnsIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRegisterWithSnsIdResult(%+v)", *p)
}

// Attributes:
//  - Direction
//  - MidOrEMid
type TalkServiceRemoveFriendRequestArgs struct {
	Direction Direction `thrift:"direction,1" db:"direction" json:"direction"`
	MidOrEMid string    `thrift:"midOrEMid,2" db:"midOrEMid" json:"midOrEMid"`
}

func NewTalkServiceRemoveFriendRequestArgs() *TalkServiceRemoveFriendRequestArgs {
	return &TalkServiceRemoveFriendRequestArgs{}
}

func (p *TalkServiceRemoveFriendRequestArgs) GetDirection() Direction {
	return p.Direction
}

func (p *TalkServiceRemoveFriendRequestArgs) GetMidOrEMid() string {
	return p.MidOrEMid
}
func (p *TalkServiceRemoveFriendRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRemoveFriendRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Direction(v)
		p.Direction = temp
	}
	return nil
}

func (p *TalkServiceRemoveFriendRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MidOrEMid = v
	}
	return nil
}

func (p *TalkServiceRemoveFriendRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeFriendRequest_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRemoveFriendRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("direction", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:direction: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Direction)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.direction (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:direction: ", p), err)
	}
	return err
}

func (p *TalkServiceRemoveFriendRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("midOrEMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:midOrEMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.MidOrEMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.midOrEMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:midOrEMid: ", p), err)
	}
	return err
}

func (p *TalkServiceRemoveFriendRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRemoveFriendRequestArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRemoveFriendRequestResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRemoveFriendRequestResult() *TalkServiceRemoveFriendRequestResult {
	return &TalkServiceRemoveFriendRequestResult{}
}

var TalkServiceRemoveFriendRequestResult_E_DEFAULT *TalkException

func (p *TalkServiceRemoveFriendRequestResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceRemoveFriendRequestResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceRemoveFriendRequestResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceRemoveFriendRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRemoveFriendRequestResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceRemoveFriendRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeFriendRequest_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRemoveFriendRequestResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceRemoveFriendRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRemoveFriendRequestResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceOpenAuthSessionArgs struct {
	// unused field # 1
	Request *AuthSessionRequest `thrift:"request,2" db:"request" json:"request"`
}

func NewTalkServiceOpenAuthSessionArgs() *TalkServiceOpenAuthSessionArgs {
	return &TalkServiceOpenAuthSessionArgs{}
}

var TalkServiceOpenAuthSessionArgs_Request_DEFAULT *AuthSessionRequest

func (p *TalkServiceOpenAuthSessionArgs) GetRequest() *AuthSessionRequest {
	if !p.IsSetRequest() {
		return TalkServiceOpenAuthSessionArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *TalkServiceOpenAuthSessionArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceOpenAuthSessionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceOpenAuthSessionArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Request = &AuthSessionRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceOpenAuthSessionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("openAuthSession_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceOpenAuthSessionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:request: ", p), err)
	}
	return err
}

func (p *TalkServiceOpenAuthSessionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceOpenAuthSessionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceOpenAuthSessionResult struct {
	Success *string        `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceOpenAuthSessionResult() *TalkServiceOpenAuthSessionResult {
	return &TalkServiceOpenAuthSessionResult{}
}

var TalkServiceOpenAuthSessionResult_Success_DEFAULT string

func (p *TalkServiceOpenAuthSessionResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return TalkServiceOpenAuthSessionResult_Success_DEFAULT
	}
	return *p.Success
}

var TalkServiceOpenAuthSessionResult_E_DEFAULT *TalkException

func (p *TalkServiceOpenAuthSessionResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceOpenAuthSessionResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceOpenAuthSessionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceOpenAuthSessionResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceOpenAuthSessionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceOpenAuthSessionResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TalkServiceOpenAuthSessionResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceOpenAuthSessionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("openAuthSession_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceOpenAuthSessionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceOpenAuthSessionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceOpenAuthSessionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceOpenAuthSessionResult(%+v)", *p)
}

// Attributes:
//  - Verifier
//  - PinCode
//  - ErrorCode
//  - PublicKey
//  - EncryptedKeyChain
//  - HashKeyChain
type TalkServiceVerifyQrcodeWithE2EEArgs struct {
	// unused field # 1
	Verifier          string         `thrift:"verifier,2" db:"verifier" json:"verifier"`
	PinCode           string         `thrift:"pinCode,3" db:"pinCode" json:"pinCode"`
	ErrorCode         ErrorCode      `thrift:"errorCode,4" db:"errorCode" json:"errorCode"`
	PublicKey         *E2EEPublicKey `thrift:"publicKey,5" db:"publicKey" json:"publicKey"`
	EncryptedKeyChain []byte         `thrift:"encryptedKeyChain,6" db:"encryptedKeyChain" json:"encryptedKeyChain"`
	HashKeyChain      []byte         `thrift:"hashKeyChain,7" db:"hashKeyChain" json:"hashKeyChain"`
}

func NewTalkServiceVerifyQrcodeWithE2EEArgs() *TalkServiceVerifyQrcodeWithE2EEArgs {
	return &TalkServiceVerifyQrcodeWithE2EEArgs{}
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) GetVerifier() string {
	return p.Verifier
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) GetPinCode() string {
	return p.PinCode
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) GetErrorCode() ErrorCode {
	return p.ErrorCode
}

var TalkServiceVerifyQrcodeWithE2EEArgs_PublicKey_DEFAULT *E2EEPublicKey

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) GetPublicKey() *E2EEPublicKey {
	if !p.IsSetPublicKey() {
		return TalkServiceVerifyQrcodeWithE2EEArgs_PublicKey_DEFAULT
	}
	return p.PublicKey
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) GetEncryptedKeyChain() []byte {
	return p.EncryptedKeyChain
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) GetHashKeyChain() []byte {
	return p.HashKeyChain
}
func (p *TalkServiceVerifyQrcodeWithE2EEArgs) IsSetPublicKey() bool {
	return p.PublicKey != nil
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Verifier = v
	}
	return nil
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.PinCode = v
	}
	return nil
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := ErrorCode(v)
		p.ErrorCode = temp
	}
	return nil
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) ReadField5(iprot thrift.TProtocol) error {
	p.PublicKey = &E2EEPublicKey{}
	if err := p.PublicKey.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PublicKey), err)
	}
	return nil
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.EncryptedKeyChain = v
	}
	return nil
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.HashKeyChain = v
	}
	return nil
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("verifyQrcodeWithE2EE_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("verifier", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:verifier: ", p), err)
	}
	if err := oprot.WriteString(string(p.Verifier)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.verifier (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:verifier: ", p), err)
	}
	return err
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pinCode", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pinCode: ", p), err)
	}
	if err := oprot.WriteString(string(p.PinCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pinCode (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pinCode: ", p), err)
	}
	return err
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:errorCode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.errorCode (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:errorCode: ", p), err)
	}
	return err
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("publicKey", thrift.STRUCT, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:publicKey: ", p), err)
	}
	if err := p.PublicKey.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PublicKey), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:publicKey: ", p), err)
	}
	return err
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("encryptedKeyChain", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:encryptedKeyChain: ", p), err)
	}
	if err := oprot.WriteBinary(p.EncryptedKeyChain); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.encryptedKeyChain (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:encryptedKeyChain: ", p), err)
	}
	return err
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hashKeyChain", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:hashKeyChain: ", p), err)
	}
	if err := oprot.WriteBinary(p.HashKeyChain); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hashKeyChain (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:hashKeyChain: ", p), err)
	}
	return err
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceVerifyQrcodeWithE2EEArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceVerifyQrcodeWithE2EEResult struct {
	Success *string        `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceVerifyQrcodeWithE2EEResult() *TalkServiceVerifyQrcodeWithE2EEResult {
	return &TalkServiceVerifyQrcodeWithE2EEResult{}
}

var TalkServiceVerifyQrcodeWithE2EEResult_Success_DEFAULT string

func (p *TalkServiceVerifyQrcodeWithE2EEResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return TalkServiceVerifyQrcodeWithE2EEResult_Success_DEFAULT
	}
	return *p.Success
}

var TalkServiceVerifyQrcodeWithE2EEResult_E_DEFAULT *TalkException

func (p *TalkServiceVerifyQrcodeWithE2EEResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceVerifyQrcodeWithE2EEResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceVerifyQrcodeWithE2EEResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceVerifyQrcodeWithE2EEResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceVerifyQrcodeWithE2EEResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceVerifyQrcodeWithE2EEResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TalkServiceVerifyQrcodeWithE2EEResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceVerifyQrcodeWithE2EEResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("verifyQrcodeWithE2EE_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceVerifyQrcodeWithE2EEResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceVerifyQrcodeWithE2EEResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceVerifyQrcodeWithE2EEResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceVerifyQrcodeWithE2EEResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceGetBalanceArgs struct {
	Request *GetBalanceRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceGetBalanceArgs() *TalkServiceGetBalanceArgs {
	return &TalkServiceGetBalanceArgs{}
}

var TalkServiceGetBalanceArgs_Request_DEFAULT *GetBalanceRequest

func (p *TalkServiceGetBalanceArgs) GetRequest() *GetBalanceRequest {
	if !p.IsSetRequest() {
		return TalkServiceGetBalanceArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *TalkServiceGetBalanceArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceGetBalanceArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetBalanceArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &GetBalanceRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceGetBalanceArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBalance_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetBalanceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *TalkServiceGetBalanceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetBalanceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetBalanceResult struct {
	Success *GetBalanceResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException      `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetBalanceResult() *TalkServiceGetBalanceResult {
	return &TalkServiceGetBalanceResult{}
}

var TalkServiceGetBalanceResult_Success_DEFAULT *GetBalanceResponse

func (p *TalkServiceGetBalanceResult) GetSuccess() *GetBalanceResponse {
	if !p.IsSetSuccess() {
		return TalkServiceGetBalanceResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetBalanceResult_E_DEFAULT *TalkException

func (p *TalkServiceGetBalanceResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetBalanceResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetBalanceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetBalanceResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetBalanceResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetBalanceResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetBalanceResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetBalanceResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetBalanceResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBalance_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetBalanceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetBalanceResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetBalanceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetBalanceResult(%+v)", *p)
}

type TalkServiceUnregisterUserAndDeviceArgs struct {
}

func NewTalkServiceUnregisterUserAndDeviceArgs() *TalkServiceUnregisterUserAndDeviceArgs {
	return &TalkServiceUnregisterUserAndDeviceArgs{}
}

func (p *TalkServiceUnregisterUserAndDeviceArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUnregisterUserAndDeviceArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unregisterUserAndDevice_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUnregisterUserAndDeviceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUnregisterUserAndDeviceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceUnregisterUserAndDeviceResult struct {
	Success *string        `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUnregisterUserAndDeviceResult() *TalkServiceUnregisterUserAndDeviceResult {
	return &TalkServiceUnregisterUserAndDeviceResult{}
}

var TalkServiceUnregisterUserAndDeviceResult_Success_DEFAULT string

func (p *TalkServiceUnregisterUserAndDeviceResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return TalkServiceUnregisterUserAndDeviceResult_Success_DEFAULT
	}
	return *p.Success
}

var TalkServiceUnregisterUserAndDeviceResult_E_DEFAULT *TalkException

func (p *TalkServiceUnregisterUserAndDeviceResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceUnregisterUserAndDeviceResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceUnregisterUserAndDeviceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceUnregisterUserAndDeviceResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceUnregisterUserAndDeviceResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUnregisterUserAndDeviceResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TalkServiceUnregisterUserAndDeviceResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceUnregisterUserAndDeviceResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unregisterUserAndDevice_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUnregisterUserAndDeviceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUnregisterUserAndDeviceResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUnregisterUserAndDeviceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUnregisterUserAndDeviceResult(%+v)", *p)
}

// Attributes:
//  - Type
//  - Token
type TalkServiceUpdateNotificationTokenArgs struct {
	// unused field # 1
	Type  UpdateNotificationType `thrift:"type,2" db:"type" json:"type"`
	Token string                 `thrift:"token,3" db:"token" json:"token"`
}

func NewTalkServiceUpdateNotificationTokenArgs() *TalkServiceUpdateNotificationTokenArgs {
	return &TalkServiceUpdateNotificationTokenArgs{}
}

func (p *TalkServiceUpdateNotificationTokenArgs) GetType() UpdateNotificationType {
	return p.Type
}

func (p *TalkServiceUpdateNotificationTokenArgs) GetToken() string {
	return p.Token
}
func (p *TalkServiceUpdateNotificationTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateNotificationTokenArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := UpdateNotificationType(v)
		p.Type = temp
	}
	return nil
}

func (p *TalkServiceUpdateNotificationTokenArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *TalkServiceUpdateNotificationTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateNotificationToken_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateNotificationTokenArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateNotificationTokenArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:token: ", p), err)
	}
	if err := oprot.WriteString(string(p.Token)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.token (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:token: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateNotificationTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateNotificationTokenArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateNotificationTokenResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateNotificationTokenResult() *TalkServiceUpdateNotificationTokenResult {
	return &TalkServiceUpdateNotificationTokenResult{}
}

var TalkServiceUpdateNotificationTokenResult_E_DEFAULT *TalkException

func (p *TalkServiceUpdateNotificationTokenResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceUpdateNotificationTokenResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceUpdateNotificationTokenResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceUpdateNotificationTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateNotificationTokenResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceUpdateNotificationTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateNotificationToken_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateNotificationTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUpdateNotificationTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateNotificationTokenResult(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - PinCode
//  - UdidHash
//  - MigrationPincodeSessionId
//  - OldUdidHash
type TalkServiceVerifyPhoneNumberArgs struct {
	// unused field # 1
	SessionId                 string `thrift:"sessionId,2" db:"sessionId" json:"sessionId"`
	PinCode                   string `thrift:"pinCode,3" db:"pinCode" json:"pinCode"`
	UdidHash                  string `thrift:"udidHash,4" db:"udidHash" json:"udidHash"`
	MigrationPincodeSessionId string `thrift:"migrationPincodeSessionId,5" db:"migrationPincodeSessionId" json:"migrationPincodeSessionId"`
	OldUdidHash               string `thrift:"oldUdidHash,6" db:"oldUdidHash" json:"oldUdidHash"`
}

func NewTalkServiceVerifyPhoneNumberArgs() *TalkServiceVerifyPhoneNumberArgs {
	return &TalkServiceVerifyPhoneNumberArgs{}
}

func (p *TalkServiceVerifyPhoneNumberArgs) GetSessionId() string {
	return p.SessionId
}

func (p *TalkServiceVerifyPhoneNumberArgs) GetPinCode() string {
	return p.PinCode
}

func (p *TalkServiceVerifyPhoneNumberArgs) GetUdidHash() string {
	return p.UdidHash
}

func (p *TalkServiceVerifyPhoneNumberArgs) GetMigrationPincodeSessionId() string {
	return p.MigrationPincodeSessionId
}

func (p *TalkServiceVerifyPhoneNumberArgs) GetOldUdidHash() string {
	return p.OldUdidHash
}
func (p *TalkServiceVerifyPhoneNumberArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.PinCode = v
	}
	return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.UdidHash = v
	}
	return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.MigrationPincodeSessionId = v
	}
	return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.OldUdidHash = v
	}
	return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("verifyPhoneNumber_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err)
	}
	if err := oprot.WriteString(string(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err)
	}
	return err
}

func (p *TalkServiceVerifyPhoneNumberArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pinCode", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pinCode: ", p), err)
	}
	if err := oprot.WriteString(string(p.PinCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pinCode (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pinCode: ", p), err)
	}
	return err
}

func (p *TalkServiceVerifyPhoneNumberArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("udidHash", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:udidHash: ", p), err)
	}
	if err := oprot.WriteString(string(p.UdidHash)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.udidHash (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:udidHash: ", p), err)
	}
	return err
}

func (p *TalkServiceVerifyPhoneNumberArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("migrationPincodeSessionId", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:migrationPincodeSessionId: ", p), err)
	}
	if err := oprot.WriteString(string(p.MigrationPincodeSessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.migrationPincodeSessionId (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:migrationPincodeSessionId: ", p), err)
	}
	return err
}

func (p *TalkServiceVerifyPhoneNumberArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("oldUdidHash", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:oldUdidHash: ", p), err)
	}
	if err := oprot.WriteString(string(p.OldUdidHash)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.oldUdidHash (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:oldUdidHash: ", p), err)
	}
	return err
}

func (p *TalkServiceVerifyPhoneNumberArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceVerifyPhoneNumberArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceVerifyPhoneNumberResult struct {
	Success *PhoneVerificationResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException            `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceVerifyPhoneNumberResult() *TalkServiceVerifyPhoneNumberResult {
	return &TalkServiceVerifyPhoneNumberResult{}
}

var TalkServiceVerifyPhoneNumberResult_Success_DEFAULT *PhoneVerificationResult_

func (p *TalkServiceVerifyPhoneNumberResult) GetSuccess() *PhoneVerificationResult_ {
	if !p.IsSetSuccess() {
		return TalkServiceVerifyPhoneNumberResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceVerifyPhoneNumberResult_E_DEFAULT *TalkException

func (p *TalkServiceVerifyPhoneNumberResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceVerifyPhoneNumberResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceVerifyPhoneNumberResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceVerifyPhoneNumberResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceVerifyPhoneNumberResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceVerifyPhoneNumberResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &PhoneVerificationResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceVerifyPhoneNumberResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceVerifyPhoneNumberResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("verifyPhoneNumber_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceVerifyPhoneNumberResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceVerifyPhoneNumberResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceVerifyPhoneNumberResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceVerifyPhoneNumberResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupId
//  - ContactIds
type TalkServiceCancelGroupInvitationArgs struct {
	ReqSeq     int32    `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	GroupId    string   `thrift:"groupId,2" db:"groupId" json:"groupId"`
	ContactIds []string `thrift:"contactIds,3" db:"contactIds" json:"contactIds"`
}

func NewTalkServiceCancelGroupInvitationArgs() *TalkServiceCancelGroupInvitationArgs {
	return &TalkServiceCancelGroupInvitationArgs{}
}

func (p *TalkServiceCancelGroupInvitationArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceCancelGroupInvitationArgs) GetGroupId() string {
	return p.GroupId
}

func (p *TalkServiceCancelGroupInvitationArgs) GetContactIds() []string {
	return p.ContactIds
}
func (p *TalkServiceCancelGroupInvitationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceCancelGroupInvitationArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceCancelGroupInvitationArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *TalkServiceCancelGroupInvitationArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ContactIds = tSlice
	for i := 0; i < size; i++ {
		var _elem357 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem357 = v
		}
		p.ContactIds = append(p.ContactIds, _elem357)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceCancelGroupInvitationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cancelGroupInvitation_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceCancelGroupInvitationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceCancelGroupInvitationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err)
	}
	return err
}

func (p *TalkServiceCancelGroupInvitationArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contactIds", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contactIds: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ContactIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ContactIds {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contactIds: ", p), err)
	}
	return err
}

func (p *TalkServiceCancelGroupInvitationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceCancelGroupInvitationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceCancelGroupInvitationResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceCancelGroupInvitationResult() *TalkServiceCancelGroupInvitationResult {
	return &TalkServiceCancelGroupInvitationResult{}
}

var TalkServiceCancelGroupInvitationResult_E_DEFAULT *TalkException

func (p *TalkServiceCancelGroupInvitationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceCancelGroupInvitationResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceCancelGroupInvitationResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceCancelGroupInvitationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceCancelGroupInvitationResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceCancelGroupInvitationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cancelGroupInvitation_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceCancelGroupInvitationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceCancelGroupInvitationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceCancelGroupInvitationResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ContactIds
type TalkServiceCreateRoomV2Args struct {
	ReqSeq     int32    `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	ContactIds []string `thrift:"contactIds,2" db:"contactIds" json:"contactIds"`
}

func NewTalkServiceCreateRoomV2Args() *TalkServiceCreateRoomV2Args {
	return &TalkServiceCreateRoomV2Args{}
}

func (p *TalkServiceCreateRoomV2Args) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceCreateRoomV2Args) GetContactIds() []string {
	return p.ContactIds
}
func (p *TalkServiceCreateRoomV2Args) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceCreateRoomV2Args) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceCreateRoomV2Args) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ContactIds = tSlice
	for i := 0; i < size; i++ {
		var _elem358 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem358 = v
		}
		p.ContactIds = append(p.ContactIds, _elem358)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceCreateRoomV2Args) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createRoomV2_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceCreateRoomV2Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceCreateRoomV2Args) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contactIds", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:contactIds: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ContactIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ContactIds {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:contactIds: ", p), err)
	}
	return err
}

func (p *TalkServiceCreateRoomV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceCreateRoomV2Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceCreateRoomV2Result struct {
	Success *Room          `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceCreateRoomV2Result() *TalkServiceCreateRoomV2Result {
	return &TalkServiceCreateRoomV2Result{}
}

var TalkServiceCreateRoomV2Result_Success_DEFAULT *Room

func (p *TalkServiceCreateRoomV2Result) GetSuccess() *Room {
	if !p.IsSetSuccess() {
		return TalkServiceCreateRoomV2Result_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceCreateRoomV2Result_E_DEFAULT *TalkException

func (p *TalkServiceCreateRoomV2Result) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceCreateRoomV2Result_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceCreateRoomV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceCreateRoomV2Result) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceCreateRoomV2Result) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceCreateRoomV2Result) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Room{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceCreateRoomV2Result) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceCreateRoomV2Result) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createRoomV2_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceCreateRoomV2Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceCreateRoomV2Result) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceCreateRoomV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceCreateRoomV2Result(%+v)", *p)
}

// Attributes:
//  - SearchId
//  - Reference
type TalkServiceFindContactByMetaTagArgs struct {
	// unused field # 1
	SearchId  string `thrift:"searchId,2" db:"searchId" json:"searchId"`
	Reference string `thrift:"reference,3" db:"reference" json:"reference"`
}

func NewTalkServiceFindContactByMetaTagArgs() *TalkServiceFindContactByMetaTagArgs {
	return &TalkServiceFindContactByMetaTagArgs{}
}

func (p *TalkServiceFindContactByMetaTagArgs) GetSearchId() string {
	return p.SearchId
}

func (p *TalkServiceFindContactByMetaTagArgs) GetReference() string {
	return p.Reference
}
func (p *TalkServiceFindContactByMetaTagArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindContactByMetaTagArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SearchId = v
	}
	return nil
}

func (p *TalkServiceFindContactByMetaTagArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Reference = v
	}
	return nil
}

func (p *TalkServiceFindContactByMetaTagArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findContactByMetaTag_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindContactByMetaTagArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("searchId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:searchId: ", p), err)
	}
	if err := oprot.WriteString(string(p.SearchId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.searchId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:searchId: ", p), err)
	}
	return err
}

func (p *TalkServiceFindContactByMetaTagArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reference", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reference: ", p), err)
	}
	if err := oprot.WriteString(string(p.Reference)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reference (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reference: ", p), err)
	}
	return err
}

func (p *TalkServiceFindContactByMetaTagArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindContactByMetaTagArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindContactByMetaTagResult struct {
	Success *Contact       `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindContactByMetaTagResult() *TalkServiceFindContactByMetaTagResult {
	return &TalkServiceFindContactByMetaTagResult{}
}

var TalkServiceFindContactByMetaTagResult_Success_DEFAULT *Contact

func (p *TalkServiceFindContactByMetaTagResult) GetSuccess() *Contact {
	if !p.IsSetSuccess() {
		return TalkServiceFindContactByMetaTagResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceFindContactByMetaTagResult_E_DEFAULT *TalkException

func (p *TalkServiceFindContactByMetaTagResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceFindContactByMetaTagResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceFindContactByMetaTagResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceFindContactByMetaTagResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceFindContactByMetaTagResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindContactByMetaTagResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Contact{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceFindContactByMetaTagResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceFindContactByMetaTagResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findContactByMetaTag_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindContactByMetaTagResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindContactByMetaTagResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindContactByMetaTagResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindContactByMetaTagResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceGetChatsArgs struct {
	Request *GetChatsRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceGetChatsArgs() *TalkServiceGetChatsArgs {
	return &TalkServiceGetChatsArgs{}
}

var TalkServiceGetChatsArgs_Request_DEFAULT *GetChatsRequest

func (p *TalkServiceGetChatsArgs) GetRequest() *GetChatsRequest {
	if !p.IsSetRequest() {
		return TalkServiceGetChatsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *TalkServiceGetChatsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceGetChatsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetChatsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &GetChatsRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceGetChatsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getChats_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetChatsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *TalkServiceGetChatsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetChatsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetChatsResult struct {
	Success *GetChatsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException    `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetChatsResult() *TalkServiceGetChatsResult {
	return &TalkServiceGetChatsResult{}
}

var TalkServiceGetChatsResult_Success_DEFAULT *GetChatsResponse

func (p *TalkServiceGetChatsResult) GetSuccess() *GetChatsResponse {
	if !p.IsSetSuccess() {
		return TalkServiceGetChatsResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetChatsResult_E_DEFAULT *TalkException

func (p *TalkServiceGetChatsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetChatsResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetChatsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetChatsResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetChatsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetChatsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetChatsResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetChatsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetChatsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getChats_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetChatsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetChatsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetChatsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetChatsResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetGroupIdsJoinedArgs struct {
	SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetGroupIdsJoinedArgs() *TalkServiceGetGroupIdsJoinedArgs {
	return &TalkServiceGetGroupIdsJoinedArgs{}
}

func (p *TalkServiceGetGroupIdsJoinedArgs) GetSyncReason() SyncReason {
	return p.SyncReason
}
func (p *TalkServiceGetGroupIdsJoinedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetGroupIdsJoinedArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := SyncReason(v)
		p.SyncReason = temp
	}
	return nil
}

func (p *TalkServiceGetGroupIdsJoinedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroupIdsJoined_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupIdsJoinedArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("syncReason", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SyncReason)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err)
	}
	return err
}

func (p *TalkServiceGetGroupIdsJoinedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetGroupIdsJoinedArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetGroupIdsJoinedResult struct {
	Success []string       `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetGroupIdsJoinedResult() *TalkServiceGetGroupIdsJoinedResult {
	return &TalkServiceGetGroupIdsJoinedResult{}
}

var TalkServiceGetGroupIdsJoinedResult_Success_DEFAULT []string

func (p *TalkServiceGetGroupIdsJoinedResult) GetSuccess() []string {
	return p.Success
}

var TalkServiceGetGroupIdsJoinedResult_E_DEFAULT *TalkException

func (p *TalkServiceGetGroupIdsJoinedResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetGroupIdsJoinedResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetGroupIdsJoinedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetGroupIdsJoinedResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetGroupIdsJoinedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetGroupIdsJoinedResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem359 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem359 = v
		}
		p.Success = append(p.Success, _elem359)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupIdsJoinedResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetGroupIdsJoinedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroupIdsJoined_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupIdsJoinedResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetGroupIdsJoinedResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetGroupIdsJoinedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetGroupIdsJoinedResult(%+v)", *p)
}

// Attributes:
//  - RoomIds
type TalkServiceGetRoomsV2Args struct {
	// unused field # 1
	RoomIds []string `thrift:"roomIds,2" db:"roomIds" json:"roomIds"`
}

func NewTalkServiceGetRoomsV2Args() *TalkServiceGetRoomsV2Args {
	return &TalkServiceGetRoomsV2Args{}
}

func (p *TalkServiceGetRoomsV2Args) GetRoomIds() []string {
	return p.RoomIds
}
func (p *TalkServiceGetRoomsV2Args) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetRoomsV2Args) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.RoomIds = tSlice
	for i := 0; i < size; i++ {
		var _elem360 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem360 = v
		}
		p.RoomIds = append(p.RoomIds, _elem360)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetRoomsV2Args) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRoomsV2_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetRoomsV2Args) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roomIds", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roomIds: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.RoomIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.RoomIds {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roomIds: ", p), err)
	}
	return err
}

func (p *TalkServiceGetRoomsV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetRoomsV2Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetRoomsV2Result struct {
	Success []*Room        `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetRoomsV2Result() *TalkServiceGetRoomsV2Result {
	return &TalkServiceGetRoomsV2Result{}
}

var TalkServiceGetRoomsV2Result_Success_DEFAULT []*Room

func (p *TalkServiceGetRoomsV2Result) GetSuccess() []*Room {
	return p.Success
}

var TalkServiceGetRoomsV2Result_E_DEFAULT *TalkException

func (p *TalkServiceGetRoomsV2Result) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetRoomsV2Result_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetRoomsV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetRoomsV2Result) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetRoomsV2Result) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetRoomsV2Result) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Room, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem361 := &Room{}
		if err := _elem361.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem361), err)
		}
		p.Success = append(p.Success, _elem361)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetRoomsV2Result) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetRoomsV2Result) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRoomsV2_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetRoomsV2Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetRoomsV2Result) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetRoomsV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetRoomsV2Result(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceReissueChatTicketArgs struct {
	Request *ReissueChatTicketRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceReissueChatTicketArgs() *TalkServiceReissueChatTicketArgs {
	return &TalkServiceReissueChatTicketArgs{}
}

var TalkServiceReissueChatTicketArgs_Request_DEFAULT *ReissueChatTicketRequest

func (p *TalkServiceReissueChatTicketArgs) GetRequest() *ReissueChatTicketRequest {
	if !p.IsSetRequest() {
		return TalkServiceReissueChatTicketArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *TalkServiceReissueChatTicketArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceReissueChatTicketArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceReissueChatTicketArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &ReissueChatTicketRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceReissueChatTicketArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reissueChatTicket_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceReissueChatTicketArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *TalkServiceReissueChatTicketArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceReissueChatTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceReissueChatTicketResult struct {
	Success *ReissueChatTicketResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException             `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceReissueChatTicketResult() *TalkServiceReissueChatTicketResult {
	return &TalkServiceReissueChatTicketResult{}
}

var TalkServiceReissueChatTicketResult_Success_DEFAULT *ReissueChatTicketResponse

func (p *TalkServiceReissueChatTicketResult) GetSuccess() *ReissueChatTicketResponse {
	if !p.IsSetSuccess() {
		return TalkServiceReissueChatTicketResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceReissueChatTicketResult_E_DEFAULT *TalkException

func (p *TalkServiceReissueChatTicketResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceReissueChatTicketResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceReissueChatTicketResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceReissueChatTicketResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceReissueChatTicketResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceReissueChatTicketResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ReissueChatTicketResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceReissueChatTicketResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceReissueChatTicketResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reissueChatTicket_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceReissueChatTicketResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceReissueChatTicketResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceReissueChatTicketResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceReissueChatTicketResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - Message
type TalkServiceSendMessageArgs struct {
	Seq     int32    `thrift:"seq,1" db:"seq" json:"seq"`
	Message *Message `thrift:"message,2" db:"message" json:"message"`
}

func NewTalkServiceSendMessageArgs() *TalkServiceSendMessageArgs {
	return &TalkServiceSendMessageArgs{}
}

func (p *TalkServiceSendMessageArgs) GetSeq() int32 {
	return p.Seq
}

var TalkServiceSendMessageArgs_Message_DEFAULT *Message

func (p *TalkServiceSendMessageArgs) GetMessage() *Message {
	if !p.IsSetMessage() {
		return TalkServiceSendMessageArgs_Message_DEFAULT
	}
	return p.Message
}
func (p *TalkServiceSendMessageArgs) IsSetMessage() bool {
	return p.Message != nil
}

func (p *TalkServiceSendMessageArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceSendMessageArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *TalkServiceSendMessageArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Message = &Message{}
	if err := p.Message.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Message), err)
	}
	return nil
}

func (p *TalkServiceSendMessageArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendMessage_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceSendMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Seq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err)
	}
	return err
}

func (p *TalkServiceSendMessageArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err)
	}
	if err := p.Message.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Message), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err)
	}
	return err
}

func (p *TalkServiceSendMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceSendMessageArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceSendMessageResult struct {
	Success *Message       `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceSendMessageResult() *TalkServiceSendMessageResult {
	return &TalkServiceSendMessageResult{}
}

var TalkServiceSendMessageResult_Success_DEFAULT *Message

func (p *TalkServiceSendMessageResult) GetSuccess() *Message {
	if !p.IsSetSuccess() {
		return TalkServiceSendMessageResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceSendMessageResult_E_DEFAULT *TalkException

func (p *TalkServiceSendMessageResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceSendMessageResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceSendMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceSendMessageResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceSendMessageResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceSendMessageResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Message{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceSendMessageResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceSendMessageResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendMessage_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceSendMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceSendMessageResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceSendMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceSendMessageResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - MessageId
type TalkServiceUnsendMessageArgs struct {
	Seq       int32  `thrift:"seq,1" db:"seq" json:"seq"`
	MessageId string `thrift:"messageId,2" db:"messageId" json:"messageId"`
}

func NewTalkServiceUnsendMessageArgs() *TalkServiceUnsendMessageArgs {
	return &TalkServiceUnsendMessageArgs{}
}

func (p *TalkServiceUnsendMessageArgs) GetSeq() int32 {
	return p.Seq
}

func (p *TalkServiceUnsendMessageArgs) GetMessageId() string {
	return p.MessageId
}
func (p *TalkServiceUnsendMessageArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUnsendMessageArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *TalkServiceUnsendMessageArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MessageId = v
	}
	return nil
}

func (p *TalkServiceUnsendMessageArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unsendMessage_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUnsendMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Seq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err)
	}
	return err
}

func (p *TalkServiceUnsendMessageArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:messageId: ", p), err)
	}
	if err := oprot.WriteString(string(p.MessageId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.messageId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:messageId: ", p), err)
	}
	return err
}

func (p *TalkServiceUnsendMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUnsendMessageArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUnsendMessageResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUnsendMessageResult() *TalkServiceUnsendMessageResult {
	return &TalkServiceUnsendMessageResult{}
}

var TalkServiceUnsendMessageResult_E_DEFAULT *TalkException

func (p *TalkServiceUnsendMessageResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceUnsendMessageResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceUnsendMessageResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceUnsendMessageResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUnsendMessageResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceUnsendMessageResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unsendMessage_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUnsendMessageResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUnsendMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUnsendMessageResult(%+v)", *p)
}

// Attributes:
//  - ChatMid
//  - MediaType
//  - IsInitialHost
//  - Capabilities
type TalkServiceAcquireGroupCallRouteArgs struct {
	// unused field # 1
	ChatMid       string    `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
	MediaType     MediaType `thrift:"mediaType,3" db:"mediaType" json:"mediaType"`
	IsInitialHost bool      `thrift:"isInitialHost,4" db:"isInitialHost" json:"isInitialHost"`
	Capabilities  []string  `thrift:"capabilities,5" db:"capabilities" json:"capabilities"`
}

func NewTalkServiceAcquireGroupCallRouteArgs() *TalkServiceAcquireGroupCallRouteArgs {
	return &TalkServiceAcquireGroupCallRouteArgs{}
}

func (p *TalkServiceAcquireGroupCallRouteArgs) GetChatMid() string {
	return p.ChatMid
}

func (p *TalkServiceAcquireGroupCallRouteArgs) GetMediaType() MediaType {
	return p.MediaType
}

func (p *TalkServiceAcquireGroupCallRouteArgs) GetIsInitialHost() bool {
	return p.IsInitialHost
}

func (p *TalkServiceAcquireGroupCallRouteArgs) GetCapabilities() []string {
	return p.Capabilities
}
func (p *TalkServiceAcquireGroupCallRouteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceAcquireGroupCallRouteArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChatMid = v
	}
	return nil
}

func (p *TalkServiceAcquireGroupCallRouteArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := MediaType(v)
		p.MediaType = temp
	}
	return nil
}

func (p *TalkServiceAcquireGroupCallRouteArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.IsInitialHost = v
	}
	return nil
}

func (p *TalkServiceAcquireGroupCallRouteArgs) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Capabilities = tSlice
	for i := 0; i < size; i++ {
		var _elem362 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem362 = v
		}
		p.Capabilities = append(p.Capabilities, _elem362)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceAcquireGroupCallRouteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acquireGroupCallRoute_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceAcquireGroupCallRouteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChatMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err)
	}
	return err
}

func (p *TalkServiceAcquireGroupCallRouteArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mediaType", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mediaType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MediaType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mediaType (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mediaType: ", p), err)
	}
	return err
}

func (p *TalkServiceAcquireGroupCallRouteArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isInitialHost", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:isInitialHost: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsInitialHost)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.isInitialHost (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:isInitialHost: ", p), err)
	}
	return err
}

func (p *TalkServiceAcquireGroupCallRouteArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("capabilities", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:capabilities: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Capabilities)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Capabilities {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:capabilities: ", p), err)
	}
	return err
}

func (p *TalkServiceAcquireGroupCallRouteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceAcquireGroupCallRouteArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceAcquireGroupCallRouteResult struct {
	Success *GroupCallRoute `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException  `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceAcquireGroupCallRouteResult() *TalkServiceAcquireGroupCallRouteResult {
	return &TalkServiceAcquireGroupCallRouteResult{}
}

var TalkServiceAcquireGroupCallRouteResult_Success_DEFAULT *GroupCallRoute

func (p *TalkServiceAcquireGroupCallRouteResult) GetSuccess() *GroupCallRoute {
	if !p.IsSetSuccess() {
		return TalkServiceAcquireGroupCallRouteResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceAcquireGroupCallRouteResult_E_DEFAULT *TalkException

func (p *TalkServiceAcquireGroupCallRouteResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceAcquireGroupCallRouteResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceAcquireGroupCallRouteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceAcquireGroupCallRouteResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceAcquireGroupCallRouteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceAcquireGroupCallRouteResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GroupCallRoute{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceAcquireGroupCallRouteResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceAcquireGroupCallRouteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acquireGroupCallRoute_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceAcquireGroupCallRouteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceAcquireGroupCallRouteResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceAcquireGroupCallRouteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceAcquireGroupCallRouteResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceAcceptChatInvitationByTicketArgs struct {
	Request *AcceptChatInvitationByTicketRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceAcceptChatInvitationByTicketArgs() *TalkServiceAcceptChatInvitationByTicketArgs {
	return &TalkServiceAcceptChatInvitationByTicketArgs{}
}

var TalkServiceAcceptChatInvitationByTicketArgs_Request_DEFAULT *AcceptChatInvitationByTicketRequest

func (p *TalkServiceAcceptChatInvitationByTicketArgs) GetRequest() *AcceptChatInvitationByTicketRequest {
	if !p.IsSetRequest() {
		return TalkServiceAcceptChatInvitationByTicketArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *TalkServiceAcceptChatInvitationByTicketArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceAcceptChatInvitationByTicketArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &AcceptChatInvitationByTicketRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acceptChatInvitationByTicket_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *TalkServiceAcceptChatInvitationByTicketArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceAcceptChatInvitationByTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceAcceptChatInvitationByTicketResult struct {
	Success *AcceptChatInvitationByTicketResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException                        `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceAcceptChatInvitationByTicketResult() *TalkServiceAcceptChatInvitationByTicketResult {
	return &TalkServiceAcceptChatInvitationByTicketResult{}
}

var TalkServiceAcceptChatInvitationByTicketResult_Success_DEFAULT *AcceptChatInvitationByTicketResponse

func (p *TalkServiceAcceptChatInvitationByTicketResult) GetSuccess() *AcceptChatInvitationByTicketResponse {
	if !p.IsSetSuccess() {
		return TalkServiceAcceptChatInvitationByTicketResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceAcceptChatInvitationByTicketResult_E_DEFAULT *TalkException

func (p *TalkServiceAcceptChatInvitationByTicketResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceAcceptChatInvitationByTicketResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceAcceptChatInvitationByTicketResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceAcceptChatInvitationByTicketResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceAcceptChatInvitationByTicketResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &AcceptChatInvitationByTicketResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acceptChatInvitationByTicket_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceAcceptChatInvitationByTicketResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceAcceptChatInvitationByTicketResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceAcceptChatInvitationByTicketResult(%+v)", *p)
}

// Attributes:
//  - TicketIdWithTag
type TalkServiceFindContactByUserTicketArgs struct {
	// unused field # 1
	TicketIdWithTag string `thrift:"ticketIdWithTag,2" db:"ticketIdWithTag" json:"ticketIdWithTag"`
}

func NewTalkServiceFindContactByUserTicketArgs() *TalkServiceFindContactByUserTicketArgs {
	return &TalkServiceFindContactByUserTicketArgs{}
}

func (p *TalkServiceFindContactByUserTicketArgs) GetTicketIdWithTag() string {
	return p.TicketIdWithTag
}
func (p *TalkServiceFindContactByUserTicketArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindContactByUserTicketArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TicketIdWithTag = v
	}
	return nil
}

func (p *TalkServiceFindContactByUserTicketArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findContactByUserTicket_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindContactByUserTicketArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ticketIdWithTag", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ticketIdWithTag: ", p), err)
	}
	if err := oprot.WriteString(string(p.TicketIdWithTag)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ticketIdWithTag (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ticketIdWithTag: ", p), err)
	}
	return err
}

func (p *TalkServiceFindContactByUserTicketArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindContactByUserTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindContactByUserTicketResult struct {
	Success *Contact       `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindContactByUserTicketResult() *TalkServiceFindContactByUserTicketResult {
	return &TalkServiceFindContactByUserTicketResult{}
}

var TalkServiceFindContactByUserTicketResult_Success_DEFAULT *Contact

func (p *TalkServiceFindContactByUserTicketResult) GetSuccess() *Contact {
	if !p.IsSetSuccess() {
		return TalkServiceFindContactByUserTicketResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceFindContactByUserTicketResult_E_DEFAULT *TalkException

func (p *TalkServiceFindContactByUserTicketResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceFindContactByUserTicketResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceFindContactByUserTicketResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceFindContactByUserTicketResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceFindContactByUserTicketResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindContactByUserTicketResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Contact{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceFindContactByUserTicketResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceFindContactByUserTicketResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findContactByUserTicket_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindContactByUserTicketResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindContactByUserTicketResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindContactByUserTicketResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindContactByUserTicketResult(%+v)", *p)
}

// Attributes:
//  - Mid
//  - KeyVersion
//  - KeyId
type TalkServiceGetE2EEPublicKeyArgs struct {
	// unused field # 1
	Mid        string `thrift:"mid,2" db:"mid" json:"mid"`
	KeyVersion int32  `thrift:"keyVersion,3" db:"keyVersion" json:"keyVersion"`
	KeyId      int32  `thrift:"keyId,4" db:"keyId" json:"keyId"`
}

func NewTalkServiceGetE2EEPublicKeyArgs() *TalkServiceGetE2EEPublicKeyArgs {
	return &TalkServiceGetE2EEPublicKeyArgs{}
}

func (p *TalkServiceGetE2EEPublicKeyArgs) GetMid() string {
	return p.Mid
}

func (p *TalkServiceGetE2EEPublicKeyArgs) GetKeyVersion() int32 {
	return p.KeyVersion
}

func (p *TalkServiceGetE2EEPublicKeyArgs) GetKeyId() int32 {
	return p.KeyId
}
func (p *TalkServiceGetE2EEPublicKeyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetE2EEPublicKeyArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *TalkServiceGetE2EEPublicKeyArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.KeyVersion = v
	}
	return nil
}

func (p *TalkServiceGetE2EEPublicKeyArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.KeyId = v
	}
	return nil
}

func (p *TalkServiceGetE2EEPublicKeyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getE2EEPublicKey_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetE2EEPublicKeyArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mid: ", p), err)
	}
	return err
}

func (p *TalkServiceGetE2EEPublicKeyArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("keyVersion", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:keyVersion: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.KeyVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.keyVersion (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:keyVersion: ", p), err)
	}
	return err
}

func (p *TalkServiceGetE2EEPublicKeyArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("keyId", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:keyId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.KeyId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.keyId (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:keyId: ", p), err)
	}
	return err
}

func (p *TalkServiceGetE2EEPublicKeyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetE2EEPublicKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetE2EEPublicKeyResult struct {
	Success []*E2EEPublicKey `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException   `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetE2EEPublicKeyResult() *TalkServiceGetE2EEPublicKeyResult {
	return &TalkServiceGetE2EEPublicKeyResult{}
}

var TalkServiceGetE2EEPublicKeyResult_Success_DEFAULT []*E2EEPublicKey

func (p *TalkServiceGetE2EEPublicKeyResult) GetSuccess() []*E2EEPublicKey {
	return p.Success
}

var TalkServiceGetE2EEPublicKeyResult_E_DEFAULT *TalkException

func (p *TalkServiceGetE2EEPublicKeyResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetE2EEPublicKeyResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetE2EEPublicKeyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetE2EEPublicKeyResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetE2EEPublicKeyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetE2EEPublicKeyResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*E2EEPublicKey, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem363 := &E2EEPublicKey{}
		if err := _elem363.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem363), err)
		}
		p.Success = append(p.Success, _elem363)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetE2EEPublicKeyResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetE2EEPublicKeyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getE2EEPublicKey_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetE2EEPublicKeyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetE2EEPublicKeyResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetE2EEPublicKeyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetE2EEPublicKeyResult(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Provider
//  - Identifier
//  - Verifier
//  - MigrationPincodeSessionId
type TalkServiceRegisterDeviceWithIdentityCredentialArgs struct {
	// unused field # 1
	SessionId                 string   `thrift:"sessionId,2" db:"sessionId" json:"sessionId"`
	Identifier                string   `thrift:"identifier,3" db:"identifier" json:"identifier"`
	Verifier                  string   `thrift:"verifier,4" db:"verifier" json:"verifier"`
	Provider                  Provider `thrift:"provider,5" db:"provider" json:"provider"`
	MigrationPincodeSessionId string   `thrift:"migrationPincodeSessionId,6" db:"migrationPincodeSessionId" json:"migrationPincodeSessionId"`
}

func NewTalkServiceRegisterDeviceWithIdentityCredentialArgs() *TalkServiceRegisterDeviceWithIdentityCredentialArgs {
	return &TalkServiceRegisterDeviceWithIdentityCredentialArgs{}
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) GetSessionId() string {
	return p.SessionId
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) GetProvider() Provider {
	return p.Provider
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) GetIdentifier() string {
	return p.Identifier
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) GetVerifier() string {
	return p.Verifier
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) GetMigrationPincodeSessionId() string {
	return p.MigrationPincodeSessionId
}
func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := Provider(v)
		p.Provider = temp
	}
	return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Identifier = v
	}
	return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Verifier = v
	}
	return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.MigrationPincodeSessionId = v
	}
	return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerDeviceWithIdentityCredential_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err)
	}
	if err := oprot.WriteString(string(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err)
	}
	return err
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identifier", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:identifier: ", p), err)
	}
	if err := oprot.WriteString(string(p.Identifier)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.identifier (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:identifier: ", p), err)
	}
	return err
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("verifier", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:verifier: ", p), err)
	}
	if err := oprot.WriteString(string(p.Verifier)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.verifier (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:verifier: ", p), err)
	}
	return err
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("provider", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:provider: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Provider)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.provider (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:provider: ", p), err)
	}
	return err
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("migrationPincodeSessionId", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:migrationPincodeSessionId: ", p), err)
	}
	if err := oprot.WriteString(string(p.MigrationPincodeSessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.migrationPincodeSessionId (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:migrationPincodeSessionId: ", p), err)
	}
	return err
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRegisterDeviceWithIdentityCredentialArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceRegisterDeviceWithIdentityCredentialResult struct {
	Success *string        `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRegisterDeviceWithIdentityCredentialResult() *TalkServiceRegisterDeviceWithIdentityCredentialResult {
	return &TalkServiceRegisterDeviceWithIdentityCredentialResult{}
}

var TalkServiceRegisterDeviceWithIdentityCredentialResult_Success_DEFAULT string

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return TalkServiceRegisterDeviceWithIdentityCredentialResult_Success_DEFAULT
	}
	return *p.Success
}

var TalkServiceRegisterDeviceWithIdentityCredentialResult_E_DEFAULT *TalkException

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceRegisterDeviceWithIdentityCredentialResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerDeviceWithIdentityCredential_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRegisterDeviceWithIdentityCredentialResult(%+v)", *p)
}

// Attributes:
//  - GroupMid
type TalkServiceReissueGroupTicketArgs struct {
	GroupMid string `thrift:"groupMid,1" db:"groupMid" json:"groupMid"`
}

func NewTalkServiceReissueGroupTicketArgs() *TalkServiceReissueGroupTicketArgs {
	return &TalkServiceReissueGroupTicketArgs{}
}

func (p *TalkServiceReissueGroupTicketArgs) GetGroupMid() string {
	return p.GroupMid
}
func (p *TalkServiceReissueGroupTicketArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceReissueGroupTicketArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.GroupMid = v
	}
	return nil
}

func (p *TalkServiceReissueGroupTicketArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reissueGroupTicket_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceReissueGroupTicketArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupMid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:groupMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupMid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:groupMid: ", p), err)
	}
	return err
}

func (p *TalkServiceReissueGroupTicketArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceReissueGroupTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceReissueGroupTicketResult struct {
	Success *string        `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceReissueGroupTicketResult() *TalkServiceReissueGroupTicketResult {
	return &TalkServiceReissueGroupTicketResult{}
}

var TalkServiceReissueGroupTicketResult_Success_DEFAULT string

func (p *TalkServiceReissueGroupTicketResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return TalkServiceReissueGroupTicketResult_Success_DEFAULT
	}
	return *p.Success
}

var TalkServiceReissueGroupTicketResult_E_DEFAULT *TalkException

func (p *TalkServiceReissueGroupTicketResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceReissueGroupTicketResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceReissueGroupTicketResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceReissueGroupTicketResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceReissueGroupTicketResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceReissueGroupTicketResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TalkServiceReissueGroupTicketResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceReissueGroupTicketResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reissueGroupTicket_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceReissueGroupTicketResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceReissueGroupTicketResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceReissueGroupTicketResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceReissueGroupTicketResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Request
type TalkServiceUpdateProfileAttributesArgs struct {
	ReqSeq  int32                           `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	Request *UpdateProfileAttributesRequest `thrift:"request,2" db:"request" json:"request"`
}

func NewTalkServiceUpdateProfileAttributesArgs() *TalkServiceUpdateProfileAttributesArgs {
	return &TalkServiceUpdateProfileAttributesArgs{}
}

func (p *TalkServiceUpdateProfileAttributesArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

var TalkServiceUpdateProfileAttributesArgs_Request_DEFAULT *UpdateProfileAttributesRequest

func (p *TalkServiceUpdateProfileAttributesArgs) GetRequest() *UpdateProfileAttributesRequest {
	if !p.IsSetRequest() {
		return TalkServiceUpdateProfileAttributesArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *TalkServiceUpdateProfileAttributesArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceUpdateProfileAttributesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateProfileAttributesArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceUpdateProfileAttributesArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Request = &UpdateProfileAttributesRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceUpdateProfileAttributesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateProfileAttributes_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateProfileAttributesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateProfileAttributesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:request: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateProfileAttributesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateProfileAttributesArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateProfileAttributesResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateProfileAttributesResult() *TalkServiceUpdateProfileAttributesResult {
	return &TalkServiceUpdateProfileAttributesResult{}
}

var TalkServiceUpdateProfileAttributesResult_E_DEFAULT *TalkException

func (p *TalkServiceUpdateProfileAttributesResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceUpdateProfileAttributesResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceUpdateProfileAttributesResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceUpdateProfileAttributesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateProfileAttributesResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceUpdateProfileAttributesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateProfileAttributes_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateProfileAttributesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUpdateProfileAttributesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateProfileAttributesResult(%+v)", *p)
}

// Attributes:
//  - Verifier
//  - PinCode
type TalkServiceVerifyQrcodeArgs struct {
	// unused field # 1
	Verifier string `thrift:"verifier,2" db:"verifier" json:"verifier"`
	PinCode  string `thrift:"pinCode,3" db:"pinCode" json:"pinCode"`
}

func NewTalkServiceVerifyQrcodeArgs() *TalkServiceVerifyQrcodeArgs {
	return &TalkServiceVerifyQrcodeArgs{}
}

func (p *TalkServiceVerifyQrcodeArgs) GetVerifier() string {
	return p.Verifier
}

func (p *TalkServiceVerifyQrcodeArgs) GetPinCode() string {
	return p.PinCode
}
func (p *TalkServiceVerifyQrcodeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceVerifyQrcodeArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Verifier = v
	}
	return nil
}

func (p *TalkServiceVerifyQrcodeArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.PinCode = v
	}
	return nil
}

func (p *TalkServiceVerifyQrcodeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("verifyQrcode_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceVerifyQrcodeArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("verifier", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:verifier: ", p), err)
	}
	if err := oprot.WriteString(string(p.Verifier)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.verifier (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:verifier: ", p), err)
	}
	return err
}

func (p *TalkServiceVerifyQrcodeArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pinCode", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pinCode: ", p), err)
	}
	if err := oprot.WriteString(string(p.PinCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pinCode (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pinCode: ", p), err)
	}
	return err
}

func (p *TalkServiceVerifyQrcodeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceVerifyQrcodeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceVerifyQrcodeResult struct {
	Success *string        `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceVerifyQrcodeResult() *TalkServiceVerifyQrcodeResult {
	return &TalkServiceVerifyQrcodeResult{}
}

var TalkServiceVerifyQrcodeResult_Success_DEFAULT string

func (p *TalkServiceVerifyQrcodeResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return TalkServiceVerifyQrcodeResult_Success_DEFAULT
	}
	return *p.Success
}

var TalkServiceVerifyQrcodeResult_E_DEFAULT *TalkException

func (p *TalkServiceVerifyQrcodeResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceVerifyQrcodeResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceVerifyQrcodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceVerifyQrcodeResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceVerifyQrcodeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceVerifyQrcodeResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TalkServiceVerifyQrcodeResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceVerifyQrcodeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("verifyQrcode_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceVerifyQrcodeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceVerifyQrcodeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceVerifyQrcodeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceVerifyQrcodeResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceAcceptChatInvitationArgs struct {
	Request *AcceptChatInvitationRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceAcceptChatInvitationArgs() *TalkServiceAcceptChatInvitationArgs {
	return &TalkServiceAcceptChatInvitationArgs{}
}

var TalkServiceAcceptChatInvitationArgs_Request_DEFAULT *AcceptChatInvitationRequest

func (p *TalkServiceAcceptChatInvitationArgs) GetRequest() *AcceptChatInvitationRequest {
	if !p.IsSetRequest() {
		return TalkServiceAcceptChatInvitationArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *TalkServiceAcceptChatInvitationArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceAcceptChatInvitationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceAcceptChatInvitationArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &AcceptChatInvitationRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceAcceptChatInvitationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acceptChatInvitation_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceAcceptChatInvitationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *TalkServiceAcceptChatInvitationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceAcceptChatInvitationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceAcceptChatInvitationResult struct {
	Success *AcceptChatInvitationResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException                `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceAcceptChatInvitationResult() *TalkServiceAcceptChatInvitationResult {
	return &TalkServiceAcceptChatInvitationResult{}
}

var TalkServiceAcceptChatInvitationResult_Success_DEFAULT *AcceptChatInvitationResponse

func (p *TalkServiceAcceptChatInvitationResult) GetSuccess() *AcceptChatInvitationResponse {
	if !p.IsSetSuccess() {
		return TalkServiceAcceptChatInvitationResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceAcceptChatInvitationResult_E_DEFAULT *TalkException

func (p *TalkServiceAcceptChatInvitationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceAcceptChatInvitationResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceAcceptChatInvitationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceAcceptChatInvitationResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceAcceptChatInvitationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceAcceptChatInvitationResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &AcceptChatInvitationResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceAcceptChatInvitationResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceAcceptChatInvitationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acceptChatInvitation_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceAcceptChatInvitationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceAcceptChatInvitationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceAcceptChatInvitationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceAcceptChatInvitationResult(%+v)", *p)
}

// Attributes:
//  - EMid
type TalkServiceDecryptFollowEMidArgs struct {
	// unused field # 1
	EMid string `thrift:"eMid,2" db:"eMid" json:"eMid"`
}

func NewTalkServiceDecryptFollowEMidArgs() *TalkServiceDecryptFollowEMidArgs {
	return &TalkServiceDecryptFollowEMidArgs{}
}

func (p *TalkServiceDecryptFollowEMidArgs) GetEMid() string {
	return p.EMid
}
func (p *TalkServiceDecryptFollowEMidArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceDecryptFollowEMidArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.EMid = v
	}
	return nil
}

func (p *TalkServiceDecryptFollowEMidArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("decryptFollowEMid_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceDecryptFollowEMidArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("eMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:eMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.EMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.eMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:eMid: ", p), err)
	}
	return err
}

func (p *TalkServiceDecryptFollowEMidArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceDecryptFollowEMidArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceDecryptFollowEMidResult struct {
	Success *string        `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceDecryptFollowEMidResult() *TalkServiceDecryptFollowEMidResult {
	return &TalkServiceDecryptFollowEMidResult{}
}

var TalkServiceDecryptFollowEMidResult_Success_DEFAULT string

func (p *TalkServiceDecryptFollowEMidResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return TalkServiceDecryptFollowEMidResult_Success_DEFAULT
	}
	return *p.Success
}

var TalkServiceDecryptFollowEMidResult_E_DEFAULT *TalkException

func (p *TalkServiceDecryptFollowEMidResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceDecryptFollowEMidResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceDecryptFollowEMidResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceDecryptFollowEMidResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceDecryptFollowEMidResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceDecryptFollowEMidResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TalkServiceDecryptFollowEMidResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceDecryptFollowEMidResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("decryptFollowEMid_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceDecryptFollowEMidResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceDecryptFollowEMidResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceDecryptFollowEMidResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceDecryptFollowEMidResult(%+v)", *p)
}

// Attributes:
//  - SearchId
type TalkServiceFindContactByUseridArgs struct {
	// unused field # 1
	SearchId string `thrift:"searchId,2" db:"searchId" json:"searchId"`
}

func NewTalkServiceFindContactByUseridArgs() *TalkServiceFindContactByUseridArgs {
	return &TalkServiceFindContactByUseridArgs{}
}

func (p *TalkServiceFindContactByUseridArgs) GetSearchId() string {
	return p.SearchId
}
func (p *TalkServiceFindContactByUseridArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindContactByUseridArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SearchId = v
	}
	return nil
}

func (p *TalkServiceFindContactByUseridArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findContactByUserid_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindContactByUseridArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("searchId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:searchId: ", p), err)
	}
	if err := oprot.WriteString(string(p.SearchId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.searchId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:searchId: ", p), err)
	}
	return err
}

func (p *TalkServiceFindContactByUseridArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindContactByUseridArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindContactByUseridResult struct {
	Success *Contact       `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindContactByUseridResult() *TalkServiceFindContactByUseridResult {
	return &TalkServiceFindContactByUseridResult{}
}

var TalkServiceFindContactByUseridResult_Success_DEFAULT *Contact

func (p *TalkServiceFindContactByUseridResult) GetSuccess() *Contact {
	if !p.IsSetSuccess() {
		return TalkServiceFindContactByUseridResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceFindContactByUseridResult_E_DEFAULT *TalkException

func (p *TalkServiceFindContactByUseridResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceFindContactByUseridResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceFindContactByUseridResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceFindContactByUseridResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceFindContactByUseridResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindContactByUseridResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Contact{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceFindContactByUseridResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceFindContactByUseridResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findContactByUserid_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindContactByUseridResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindContactByUseridResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindContactByUseridResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindContactByUseridResult(%+v)", *p)
}

type TalkServiceGetServerTimeArgs struct {
}

func NewTalkServiceGetServerTimeArgs() *TalkServiceGetServerTimeArgs {
	return &TalkServiceGetServerTimeArgs{}
}

func (p *TalkServiceGetServerTimeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetServerTimeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getServerTime_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetServerTimeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetServerTimeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetServerTimeResult struct {
	Success *int64         `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetServerTimeResult() *TalkServiceGetServerTimeResult {
	return &TalkServiceGetServerTimeResult{}
}

var TalkServiceGetServerTimeResult_Success_DEFAULT int64

func (p *TalkServiceGetServerTimeResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return TalkServiceGetServerTimeResult_Success_DEFAULT
	}
	return *p.Success
}

var TalkServiceGetServerTimeResult_E_DEFAULT *TalkException

func (p *TalkServiceGetServerTimeResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetServerTimeResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetServerTimeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetServerTimeResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetServerTimeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetServerTimeResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TalkServiceGetServerTimeResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetServerTimeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getServerTime_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetServerTimeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetServerTimeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetServerTimeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetServerTimeResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceInviteIntoChatArgs struct {
	Request *InviteIntoChatRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceInviteIntoChatArgs() *TalkServiceInviteIntoChatArgs {
	return &TalkServiceInviteIntoChatArgs{}
}

var TalkServiceInviteIntoChatArgs_Request_DEFAULT *InviteIntoChatRequest

func (p *TalkServiceInviteIntoChatArgs) GetRequest() *InviteIntoChatRequest {
	if !p.IsSetRequest() {
		return TalkServiceInviteIntoChatArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *TalkServiceInviteIntoChatArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceInviteIntoChatArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceInviteIntoChatArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &InviteIntoChatRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceInviteIntoChatArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("inviteIntoChat_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceInviteIntoChatArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *TalkServiceInviteIntoChatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceInviteIntoChatArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceInviteIntoChatResult struct {
	Success *InviteIntoChatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException          `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceInviteIntoChatResult() *TalkServiceInviteIntoChatResult {
	return &TalkServiceInviteIntoChatResult{}
}

var TalkServiceInviteIntoChatResult_Success_DEFAULT *InviteIntoChatResponse

func (p *TalkServiceInviteIntoChatResult) GetSuccess() *InviteIntoChatResponse {
	if !p.IsSetSuccess() {
		return TalkServiceInviteIntoChatResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceInviteIntoChatResult_E_DEFAULT *TalkException

func (p *TalkServiceInviteIntoChatResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceInviteIntoChatResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceInviteIntoChatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceInviteIntoChatResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceInviteIntoChatResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceInviteIntoChatResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &InviteIntoChatResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceInviteIntoChatResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceInviteIntoChatResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("inviteIntoChat_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceInviteIntoChatResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceInviteIntoChatResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceInviteIntoChatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceInviteIntoChatResult(%+v)", *p)
}

// Attributes:
//  - ClientRevision
type TalkServiceWakeUpLongPollingArgs struct {
	// unused field # 1
	ClientRevision int64 `thrift:"clientRevision,2" db:"clientRevision" json:"clientRevision"`
}

func NewTalkServiceWakeUpLongPollingArgs() *TalkServiceWakeUpLongPollingArgs {
	return &TalkServiceWakeUpLongPollingArgs{}
}

func (p *TalkServiceWakeUpLongPollingArgs) GetClientRevision() int64 {
	return p.ClientRevision
}
func (p *TalkServiceWakeUpLongPollingArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceWakeUpLongPollingArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ClientRevision = v
	}
	return nil
}

func (p *TalkServiceWakeUpLongPollingArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("wakeUpLongPolling_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceWakeUpLongPollingArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("clientRevision", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clientRevision: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ClientRevision)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.clientRevision (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clientRevision: ", p), err)
	}
	return err
}

func (p *TalkServiceWakeUpLongPollingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceWakeUpLongPollingArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceWakeUpLongPollingResult struct {
	Success *bool          `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceWakeUpLongPollingResult() *TalkServiceWakeUpLongPollingResult {
	return &TalkServiceWakeUpLongPollingResult{}
}

var TalkServiceWakeUpLongPollingResult_Success_DEFAULT bool

func (p *TalkServiceWakeUpLongPollingResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return TalkServiceWakeUpLongPollingResult_Success_DEFAULT
	}
	return *p.Success
}

var TalkServiceWakeUpLongPollingResult_E_DEFAULT *TalkException

func (p *TalkServiceWakeUpLongPollingResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceWakeUpLongPollingResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceWakeUpLongPollingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceWakeUpLongPollingResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceWakeUpLongPollingResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceWakeUpLongPollingResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TalkServiceWakeUpLongPollingResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceWakeUpLongPollingResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("wakeUpLongPolling_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceWakeUpLongPollingResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceWakeUpLongPollingResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceWakeUpLongPollingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceWakeUpLongPollingResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupMid
//  - TicketId
type TalkServiceAcceptGroupInvitationByTicketArgs struct {
	ReqSeq   int32  `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	GroupMid string `thrift:"groupMid,2" db:"groupMid" json:"groupMid"`
	TicketId string `thrift:"ticketId,3" db:"ticketId" json:"ticketId"`
}

func NewTalkServiceAcceptGroupInvitationByTicketArgs() *TalkServiceAcceptGroupInvitationByTicketArgs {
	return &TalkServiceAcceptGroupInvitationByTicketArgs{}
}

func (p *TalkServiceAcceptGroupInvitationByTicketArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceAcceptGroupInvitationByTicketArgs) GetGroupMid() string {
	return p.GroupMid
}

func (p *TalkServiceAcceptGroupInvitationByTicketArgs) GetTicketId() string {
	return p.TicketId
}
func (p *TalkServiceAcceptGroupInvitationByTicketArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceAcceptGroupInvitationByTicketArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceAcceptGroupInvitationByTicketArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupMid = v
	}
	return nil
}

func (p *TalkServiceAcceptGroupInvitationByTicketArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TicketId = v
	}
	return nil
}

func (p *TalkServiceAcceptGroupInvitationByTicketArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acceptGroupInvitationByTicket_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceAcceptGroupInvitationByTicketArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceAcceptGroupInvitationByTicketArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupMid: ", p), err)
	}
	return err
}

func (p *TalkServiceAcceptGroupInvitationByTicketArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ticketId", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ticketId: ", p), err)
	}
	if err := oprot.WriteString(string(p.TicketId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ticketId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ticketId: ", p), err)
	}
	return err
}

func (p *TalkServiceAcceptGroupInvitationByTicketArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceAcceptGroupInvitationByTicketArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceAcceptGroupInvitationByTicketResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceAcceptGroupInvitationByTicketResult() *TalkServiceAcceptGroupInvitationByTicketResult {
	return &TalkServiceAcceptGroupInvitationByTicketResult{}
}

var TalkServiceAcceptGroupInvitationByTicketResult_E_DEFAULT *TalkException

func (p *TalkServiceAcceptGroupInvitationByTicketResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceAcceptGroupInvitationByTicketResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceAcceptGroupInvitationByTicketResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceAcceptGroupInvitationByTicketResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceAcceptGroupInvitationByTicketResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceAcceptGroupInvitationByTicketResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acceptGroupInvitationByTicket_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceAcceptGroupInvitationByTicketResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceAcceptGroupInvitationByTicketResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceAcceptGroupInvitationByTicketResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceDeleteOtherFromChatArgs struct {
	Request *DeleteOtherFromChatRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceDeleteOtherFromChatArgs() *TalkServiceDeleteOtherFromChatArgs {
	return &TalkServiceDeleteOtherFromChatArgs{}
}

var TalkServiceDeleteOtherFromChatArgs_Request_DEFAULT *DeleteOtherFromChatRequest

func (p *TalkServiceDeleteOtherFromChatArgs) GetRequest() *DeleteOtherFromChatRequest {
	if !p.IsSetRequest() {
		return TalkServiceDeleteOtherFromChatArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *TalkServiceDeleteOtherFromChatArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceDeleteOtherFromChatArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceDeleteOtherFromChatArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &DeleteOtherFromChatRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceDeleteOtherFromChatArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteOtherFromChat_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceDeleteOtherFromChatArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *TalkServiceDeleteOtherFromChatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceDeleteOtherFromChatArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceDeleteOtherFromChatResult struct {
	Success *DeleteOtherFromChatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException               `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceDeleteOtherFromChatResult() *TalkServiceDeleteOtherFromChatResult {
	return &TalkServiceDeleteOtherFromChatResult{}
}

var TalkServiceDeleteOtherFromChatResult_Success_DEFAULT *DeleteOtherFromChatResponse

func (p *TalkServiceDeleteOtherFromChatResult) GetSuccess() *DeleteOtherFromChatResponse {
	if !p.IsSetSuccess() {
		return TalkServiceDeleteOtherFromChatResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceDeleteOtherFromChatResult_E_DEFAULT *TalkException

func (p *TalkServiceDeleteOtherFromChatResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceDeleteOtherFromChatResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceDeleteOtherFromChatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceDeleteOtherFromChatResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceDeleteOtherFromChatResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceDeleteOtherFromChatResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &DeleteOtherFromChatResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceDeleteOtherFromChatResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceDeleteOtherFromChatResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteOtherFromChat_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceDeleteOtherFromChatResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceDeleteOtherFromChatResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceDeleteOtherFromChatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceDeleteOtherFromChatResult(%+v)", *p)
}

// Attributes:
//  - Phones
type TalkServiceFindContactsByPhoneArgs struct {
	// unused field # 1
	Phones []string `thrift:"phones,2" db:"phones" json:"phones"`
}

func NewTalkServiceFindContactsByPhoneArgs() *TalkServiceFindContactsByPhoneArgs {
	return &TalkServiceFindContactsByPhoneArgs{}
}

func (p *TalkServiceFindContactsByPhoneArgs) GetPhones() []string {
	return p.Phones
}
func (p *TalkServiceFindContactsByPhoneArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindContactsByPhoneArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]string, 0, size)
	p.Phones = tSet
	for i := 0; i < size; i++ {
		var _elem364 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem364 = v
		}
		p.Phones = append(p.Phones, _elem364)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TalkServiceFindContactsByPhoneArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findContactsByPhone_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindContactsByPhoneArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phones", thrift.SET, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:phones: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.Phones)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for i := 0; i < len(p.Phones); i++ {
		for j := i + 1; j < len(p.Phones); j++ {
			if reflect.DeepEqual(p.Phones[i], p.Phones[j]) {
				return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Phones[i]))
			}
		}
	}
	for _, v := range p.Phones {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:phones: ", p), err)
	}
	return err
}

func (p *TalkServiceFindContactsByPhoneArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindContactsByPhoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindContactsByPhoneResult struct {
	Success map[string]*Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException      `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindContactsByPhoneResult() *TalkServiceFindContactsByPhoneResult {
	return &TalkServiceFindContactsByPhoneResult{}
}

var TalkServiceFindContactsByPhoneResult_Success_DEFAULT map[string]*Contact

func (p *TalkServiceFindContactsByPhoneResult) GetSuccess() map[string]*Contact {
	return p.Success
}

var TalkServiceFindContactsByPhoneResult_E_DEFAULT *TalkException

func (p *TalkServiceFindContactsByPhoneResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceFindContactsByPhoneResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceFindContactsByPhoneResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceFindContactsByPhoneResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceFindContactsByPhoneResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindContactsByPhoneResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*Contact, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key365 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key365 = v
		}
		_val366 := &Contact{}
		if err := _val366.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val366), err)
		}
		p.Success[_key365] = _val366
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TalkServiceFindContactsByPhoneResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceFindContactsByPhoneResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findContactsByPhone_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindContactsByPhoneResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindContactsByPhoneResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindContactsByPhoneResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindContactsByPhoneResult(%+v)", *p)
}

// Attributes:
//  - GroupId
type TalkServiceGetGroupsV2Args struct {
	// unused field # 1
	GroupId []string `thrift:"groupId,2" db:"groupId" json:"groupId"`
}

func NewTalkServiceGetGroupsV2Args() *TalkServiceGetGroupsV2Args {
	return &TalkServiceGetGroupsV2Args{}
}

func (p *TalkServiceGetGroupsV2Args) GetGroupId() []string {
	return p.GroupId
}
func (p *TalkServiceGetGroupsV2Args) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetGroupsV2Args) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.GroupId = tSlice
	for i := 0; i < size; i++ {
		var _elem367 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem367 = v
		}
		p.GroupId = append(p.GroupId, _elem367)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupsV2Args) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroupsV2_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupsV2Args) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.GroupId)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.GroupId {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err)
	}
	return err
}

func (p *TalkServiceGetGroupsV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetGroupsV2Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetGroupsV2Result struct {
	Success []*Group       `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetGroupsV2Result() *TalkServiceGetGroupsV2Result {
	return &TalkServiceGetGroupsV2Result{}
}

var TalkServiceGetGroupsV2Result_Success_DEFAULT []*Group

func (p *TalkServiceGetGroupsV2Result) GetSuccess() []*Group {
	return p.Success
}

var TalkServiceGetGroupsV2Result_E_DEFAULT *TalkException

func (p *TalkServiceGetGroupsV2Result) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetGroupsV2Result_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetGroupsV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetGroupsV2Result) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetGroupsV2Result) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetGroupsV2Result) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Group, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem368 := &Group{}
		if err := _elem368.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem368), err)
		}
		p.Success = append(p.Success, _elem368)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupsV2Result) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetGroupsV2Result) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroupsV2_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupsV2Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetGroupsV2Result) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetGroupsV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetGroupsV2Result(%+v)", *p)
}

// Attributes:
//  - GroupId
type TalkServiceGetGroupsArgs struct {
	// unused field # 1
	GroupId []string `thrift:"groupId,2" db:"groupId" json:"groupId"`
}

func NewTalkServiceGetGroupsArgs() *TalkServiceGetGroupsArgs {
	return &TalkServiceGetGroupsArgs{}
}

func (p *TalkServiceGetGroupsArgs) GetGroupId() []string {
	return p.GroupId
}
func (p *TalkServiceGetGroupsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetGroupsArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.GroupId = tSlice
	for i := 0; i < size; i++ {
		var _elem369 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem369 = v
		}
		p.GroupId = append(p.GroupId, _elem369)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroups_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.GroupId)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.GroupId {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err)
	}
	return err
}

func (p *TalkServiceGetGroupsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetGroupsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetGroupsResult struct {
	Success []*Group       `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetGroupsResult() *TalkServiceGetGroupsResult {
	return &TalkServiceGetGroupsResult{}
}

var TalkServiceGetGroupsResult_Success_DEFAULT []*Group

func (p *TalkServiceGetGroupsResult) GetSuccess() []*Group {
	return p.Success
}

var TalkServiceGetGroupsResult_E_DEFAULT *TalkException

func (p *TalkServiceGetGroupsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetGroupsResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetGroupsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetGroupsResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetGroupsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetGroupsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Group, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem370 := &Group{}
		if err := _elem370.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem370), err)
		}
		p.Success = append(p.Success, _elem370)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetGroupsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroups_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetGroupsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetGroupsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetGroupsResult(%+v)", *p)
}

// Attributes:
//  - GroupId
type TalkServiceGetGroupArgs struct {
	// unused field # 1
	GroupId string `thrift:"groupId,2" db:"groupId" json:"groupId"`
}

func NewTalkServiceGetGroupArgs() *TalkServiceGetGroupArgs {
	return &TalkServiceGetGroupArgs{}
}

func (p *TalkServiceGetGroupArgs) GetGroupId() string {
	return p.GroupId
}
func (p *TalkServiceGetGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetGroupArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *TalkServiceGetGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err)
	}
	return err
}

func (p *TalkServiceGetGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetGroupResult struct {
	Success *Group         `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetGroupResult() *TalkServiceGetGroupResult {
	return &TalkServiceGetGroupResult{}
}

var TalkServiceGetGroupResult_Success_DEFAULT *Group

func (p *TalkServiceGetGroupResult) GetSuccess() *Group {
	if !p.IsSetSuccess() {
		return TalkServiceGetGroupResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetGroupResult_E_DEFAULT *TalkException

func (p *TalkServiceGetGroupResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetGroupResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetGroupResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetGroupResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Group{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetGroupResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetGroupResult(%+v)", *p)
}

// Attributes:
//  - GroupId
type TalkServiceGetCompactGroupArgs struct {
	// unused field # 1
	GroupId string `thrift:"groupId,2" db:"groupId" json:"groupId"`
}

func NewTalkServiceGetCompactGroupArgs() *TalkServiceGetCompactGroupArgs {
	return &TalkServiceGetCompactGroupArgs{}
}

func (p *TalkServiceGetCompactGroupArgs) GetGroupId() string {
	return p.GroupId
}
func (p *TalkServiceGetCompactGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetCompactGroupArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *TalkServiceGetCompactGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCompactGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetCompactGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err)
	}
	return err
}

func (p *TalkServiceGetCompactGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetCompactGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetCompactGroupResult struct {
	Success *Group         `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetCompactGroupResult() *TalkServiceGetCompactGroupResult {
	return &TalkServiceGetCompactGroupResult{}
}

var TalkServiceGetCompactGroupResult_Success_DEFAULT *Group

func (p *TalkServiceGetCompactGroupResult) GetSuccess() *Group {
	if !p.IsSetSuccess() {
		return TalkServiceGetCompactGroupResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetCompactGroupResult_E_DEFAULT *TalkException

func (p *TalkServiceGetCompactGroupResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetCompactGroupResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetCompactGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetCompactGroupResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetCompactGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetCompactGroupResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Group{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetCompactGroupResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetCompactGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCompactGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetCompactGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetCompactGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetCompactGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetCompactGroupResult(%+v)", *p)
}

// Attributes:
//  - GroupId
type TalkServiceGetGroupWithoutMembersArgs struct {
	// unused field # 1
	GroupId string `thrift:"groupId,2" db:"groupId" json:"groupId"`
}

func NewTalkServiceGetGroupWithoutMembersArgs() *TalkServiceGetGroupWithoutMembersArgs {
	return &TalkServiceGetGroupWithoutMembersArgs{}
}

func (p *TalkServiceGetGroupWithoutMembersArgs) GetGroupId() string {
	return p.GroupId
}
func (p *TalkServiceGetGroupWithoutMembersArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetGroupWithoutMembersArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *TalkServiceGetGroupWithoutMembersArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroupWithoutMembers_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupWithoutMembersArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err)
	}
	return err
}

func (p *TalkServiceGetGroupWithoutMembersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetGroupWithoutMembersArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetGroupWithoutMembersResult struct {
	Success *Group         `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetGroupWithoutMembersResult() *TalkServiceGetGroupWithoutMembersResult {
	return &TalkServiceGetGroupWithoutMembersResult{}
}

var TalkServiceGetGroupWithoutMembersResult_Success_DEFAULT *Group

func (p *TalkServiceGetGroupWithoutMembersResult) GetSuccess() *Group {
	if !p.IsSetSuccess() {
		return TalkServiceGetGroupWithoutMembersResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetGroupWithoutMembersResult_E_DEFAULT *TalkException

func (p *TalkServiceGetGroupWithoutMembersResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetGroupWithoutMembersResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetGroupWithoutMembersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetGroupWithoutMembersResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetGroupWithoutMembersResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetGroupWithoutMembersResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Group{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetGroupWithoutMembersResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetGroupWithoutMembersResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroupWithoutMembers_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupWithoutMembersResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetGroupWithoutMembersResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetGroupWithoutMembersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetGroupWithoutMembersResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupId
//  - ContactIds
type TalkServiceInviteIntoGroupArgs struct {
	ReqSeq     int32    `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	GroupId    string   `thrift:"groupId,2" db:"groupId" json:"groupId"`
	ContactIds []string `thrift:"contactIds,3" db:"contactIds" json:"contactIds"`
}

func NewTalkServiceInviteIntoGroupArgs() *TalkServiceInviteIntoGroupArgs {
	return &TalkServiceInviteIntoGroupArgs{}
}

func (p *TalkServiceInviteIntoGroupArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceInviteIntoGroupArgs) GetGroupId() string {
	return p.GroupId
}

func (p *TalkServiceInviteIntoGroupArgs) GetContactIds() []string {
	return p.ContactIds
}
func (p *TalkServiceInviteIntoGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceInviteIntoGroupArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceInviteIntoGroupArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *TalkServiceInviteIntoGroupArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ContactIds = tSlice
	for i := 0; i < size; i++ {
		var _elem371 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem371 = v
		}
		p.ContactIds = append(p.ContactIds, _elem371)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceInviteIntoGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("inviteIntoGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceInviteIntoGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceInviteIntoGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err)
	}
	return err
}

func (p *TalkServiceInviteIntoGroupArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contactIds", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contactIds: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ContactIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ContactIds {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contactIds: ", p), err)
	}
	return err
}

func (p *TalkServiceInviteIntoGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceInviteIntoGroupArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceInviteIntoGroupResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceInviteIntoGroupResult() *TalkServiceInviteIntoGroupResult {
	return &TalkServiceInviteIntoGroupResult{}
}

var TalkServiceInviteIntoGroupResult_E_DEFAULT *TalkException

func (p *TalkServiceInviteIntoGroupResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceInviteIntoGroupResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceInviteIntoGroupResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceInviteIntoGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceInviteIntoGroupResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceInviteIntoGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("inviteIntoGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceInviteIntoGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceInviteIntoGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceInviteIntoGroupResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupId
type TalkServiceAcceptGroupInvitationArgs struct {
	ReqSeq  int32  `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	GroupId string `thrift:"groupId,2" db:"groupId" json:"groupId"`
}

func NewTalkServiceAcceptGroupInvitationArgs() *TalkServiceAcceptGroupInvitationArgs {
	return &TalkServiceAcceptGroupInvitationArgs{}
}

func (p *TalkServiceAcceptGroupInvitationArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceAcceptGroupInvitationArgs) GetGroupId() string {
	return p.GroupId
}
func (p *TalkServiceAcceptGroupInvitationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceAcceptGroupInvitationArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceAcceptGroupInvitationArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *TalkServiceAcceptGroupInvitationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acceptGroupInvitation_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceAcceptGroupInvitationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceAcceptGroupInvitationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err)
	}
	return err
}

func (p *TalkServiceAcceptGroupInvitationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceAcceptGroupInvitationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceAcceptGroupInvitationResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceAcceptGroupInvitationResult() *TalkServiceAcceptGroupInvitationResult {
	return &TalkServiceAcceptGroupInvitationResult{}
}

var TalkServiceAcceptGroupInvitationResult_E_DEFAULT *TalkException

func (p *TalkServiceAcceptGroupInvitationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceAcceptGroupInvitationResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceAcceptGroupInvitationResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceAcceptGroupInvitationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceAcceptGroupInvitationResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceAcceptGroupInvitationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acceptGroupInvitation_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceAcceptGroupInvitationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceAcceptGroupInvitationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceAcceptGroupInvitationResult(%+v)", *p)
}

// Attributes:
//  - ChatIds
//  - SyncReason
type TalkServiceGetMessageReadRangeArgs struct {
	// unused field # 1
	ChatIds    []string   `thrift:"chatIds,2" db:"chatIds" json:"chatIds"`
	SyncReason SyncReason `thrift:"syncReason,3" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetMessageReadRangeArgs() *TalkServiceGetMessageReadRangeArgs {
	return &TalkServiceGetMessageReadRangeArgs{}
}

func (p *TalkServiceGetMessageReadRangeArgs) GetChatIds() []string {
	return p.ChatIds
}

func (p *TalkServiceGetMessageReadRangeArgs) GetSyncReason() SyncReason {
	return p.SyncReason
}
func (p *TalkServiceGetMessageReadRangeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetMessageReadRangeArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ChatIds = tSlice
	for i := 0; i < size; i++ {
		var _elem372 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem372 = v
		}
		p.ChatIds = append(p.ChatIds, _elem372)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetMessageReadRangeArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := SyncReason(v)
		p.SyncReason = temp
	}
	return nil
}

func (p *TalkServiceGetMessageReadRangeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getMessageReadRange_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetMessageReadRangeArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatIds", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatIds: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ChatIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ChatIds {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatIds: ", p), err)
	}
	return err
}

func (p *TalkServiceGetMessageReadRangeArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("syncReason", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:syncReason: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SyncReason)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.syncReason (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:syncReason: ", p), err)
	}
	return err
}

func (p *TalkServiceGetMessageReadRangeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetMessageReadRangeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetMessageReadRangeResult struct {
	Success []*TMessageReadRange `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException       `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetMessageReadRangeResult() *TalkServiceGetMessageReadRangeResult {
	return &TalkServiceGetMessageReadRangeResult{}
}

var TalkServiceGetMessageReadRangeResult_Success_DEFAULT []*TMessageReadRange

func (p *TalkServiceGetMessageReadRangeResult) GetSuccess() []*TMessageReadRange {
	return p.Success
}

var TalkServiceGetMessageReadRangeResult_E_DEFAULT *TalkException

func (p *TalkServiceGetMessageReadRangeResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetMessageReadRangeResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetMessageReadRangeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetMessageReadRangeResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetMessageReadRangeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetMessageReadRangeResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TMessageReadRange, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem373 := &TMessageReadRange{}
		if err := _elem373.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem373), err)
		}
		p.Success = append(p.Success, _elem373)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetMessageReadRangeResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetMessageReadRangeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getMessageReadRange_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetMessageReadRangeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetMessageReadRangeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetMessageReadRangeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetMessageReadRangeResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceDeleteSelfFromChatArgs struct {
	Request *DeleteSelfFromChatRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceDeleteSelfFromChatArgs() *TalkServiceDeleteSelfFromChatArgs {
	return &TalkServiceDeleteSelfFromChatArgs{}
}

var TalkServiceDeleteSelfFromChatArgs_Request_DEFAULT *DeleteSelfFromChatRequest

func (p *TalkServiceDeleteSelfFromChatArgs) GetRequest() *DeleteSelfFromChatRequest {
	if !p.IsSetRequest() {
		return TalkServiceDeleteSelfFromChatArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *TalkServiceDeleteSelfFromChatArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceDeleteSelfFromChatArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceDeleteSelfFromChatArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &DeleteSelfFromChatRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceDeleteSelfFromChatArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteSelfFromChat_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceDeleteSelfFromChatArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *TalkServiceDeleteSelfFromChatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceDeleteSelfFromChatArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceDeleteSelfFromChatResult struct {
	Success *DeleteSelfFromChatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException              `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceDeleteSelfFromChatResult() *TalkServiceDeleteSelfFromChatResult {
	return &TalkServiceDeleteSelfFromChatResult{}
}

var TalkServiceDeleteSelfFromChatResult_Success_DEFAULT *DeleteSelfFromChatResponse

func (p *TalkServiceDeleteSelfFromChatResult) GetSuccess() *DeleteSelfFromChatResponse {
	if !p.IsSetSuccess() {
		return TalkServiceDeleteSelfFromChatResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceDeleteSelfFromChatResult_E_DEFAULT *TalkException

func (p *TalkServiceDeleteSelfFromChatResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceDeleteSelfFromChatResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceDeleteSelfFromChatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceDeleteSelfFromChatResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceDeleteSelfFromChatResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceDeleteSelfFromChatResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &DeleteSelfFromChatResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceDeleteSelfFromChatResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceDeleteSelfFromChatResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteSelfFromChat_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceDeleteSelfFromChatResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceDeleteSelfFromChatResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceDeleteSelfFromChatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceDeleteSelfFromChatResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetBlockedContactIdsArgs struct {
	SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetBlockedContactIdsArgs() *TalkServiceGetBlockedContactIdsArgs {
	return &TalkServiceGetBlockedContactIdsArgs{}
}

func (p *TalkServiceGetBlockedContactIdsArgs) GetSyncReason() SyncReason {
	return p.SyncReason
}
func (p *TalkServiceGetBlockedContactIdsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetBlockedContactIdsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := SyncReason(v)
		p.SyncReason = temp
	}
	return nil
}

func (p *TalkServiceGetBlockedContactIdsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBlockedContactIds_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetBlockedContactIdsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("syncReason", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SyncReason)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err)
	}
	return err
}

func (p *TalkServiceGetBlockedContactIdsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetBlockedContactIdsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetBlockedContactIdsResult struct {
	Success []string       `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetBlockedContactIdsResult() *TalkServiceGetBlockedContactIdsResult {
	return &TalkServiceGetBlockedContactIdsResult{}
}

var TalkServiceGetBlockedContactIdsResult_Success_DEFAULT []string

func (p *TalkServiceGetBlockedContactIdsResult) GetSuccess() []string {
	return p.Success
}

var TalkServiceGetBlockedContactIdsResult_E_DEFAULT *TalkException

func (p *TalkServiceGetBlockedContactIdsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetBlockedContactIdsResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetBlockedContactIdsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetBlockedContactIdsResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetBlockedContactIdsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetBlockedContactIdsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem374 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem374 = v
		}
		p.Success = append(p.Success, _elem374)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetBlockedContactIdsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetBlockedContactIdsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBlockedContactIds_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetBlockedContactIdsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetBlockedContactIdsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetBlockedContactIdsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetBlockedContactIdsResult(%+v)", *p)
}

// Attributes:
//  - AttributesToRetrieve
type TalkServiceGetSettingsAttributes2Args struct {
	// unused field # 1
	AttributesToRetrieve []SettingsAttributes `thrift:"attributesToRetrieve,2" db:"attributesToRetrieve" json:"attributesToRetrieve"`
}

func NewTalkServiceGetSettingsAttributes2Args() *TalkServiceGetSettingsAttributes2Args {
	return &TalkServiceGetSettingsAttributes2Args{}
}

func (p *TalkServiceGetSettingsAttributes2Args) GetAttributesToRetrieve() []SettingsAttributes {
	return p.AttributesToRetrieve
}
func (p *TalkServiceGetSettingsAttributes2Args) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributes2Args) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]SettingsAttributes, 0, size)
	p.AttributesToRetrieve = tSet
	for i := 0; i < size; i++ {
		var _elem375 SettingsAttributes
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := SettingsAttributes(v)
			_elem375 = temp
		}
		p.AttributesToRetrieve = append(p.AttributesToRetrieve, _elem375)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributes2Args) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSettingsAttributes2_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributes2Args) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributesToRetrieve", thrift.SET, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:attributesToRetrieve: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.I32, len(p.AttributesToRetrieve)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for i := 0; i < len(p.AttributesToRetrieve); i++ {
		for j := i + 1; j < len(p.AttributesToRetrieve); j++ {
			if reflect.DeepEqual(p.AttributesToRetrieve[i], p.AttributesToRetrieve[j]) {
				return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.AttributesToRetrieve[i]))
			}
		}
	}
	for _, v := range p.AttributesToRetrieve {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:attributesToRetrieve: ", p), err)
	}
	return err
}

func (p *TalkServiceGetSettingsAttributes2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetSettingsAttributes2Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetSettingsAttributes2Result struct {
	Success *Settings      `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetSettingsAttributes2Result() *TalkServiceGetSettingsAttributes2Result {
	return &TalkServiceGetSettingsAttributes2Result{}
}

var TalkServiceGetSettingsAttributes2Result_Success_DEFAULT *Settings

func (p *TalkServiceGetSettingsAttributes2Result) GetSuccess() *Settings {
	if !p.IsSetSuccess() {
		return TalkServiceGetSettingsAttributes2Result_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetSettingsAttributes2Result_E_DEFAULT *TalkException

func (p *TalkServiceGetSettingsAttributes2Result) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetSettingsAttributes2Result_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetSettingsAttributes2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetSettingsAttributes2Result) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetSettingsAttributes2Result) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributes2Result) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Settings{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributes2Result) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributes2Result) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSettingsAttributes2_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributes2Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetSettingsAttributes2Result) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetSettingsAttributes2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetSettingsAttributes2Result(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - RoomId
//  - ContactIds
type TalkServiceInviteIntoRoomArgs struct {
	ReqSeq     int32    `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	RoomId     string   `thrift:"roomId,2" db:"roomId" json:"roomId"`
	ContactIds []string `thrift:"contactIds,3" db:"contactIds" json:"contactIds"`
}

func NewTalkServiceInviteIntoRoomArgs() *TalkServiceInviteIntoRoomArgs {
	return &TalkServiceInviteIntoRoomArgs{}
}

func (p *TalkServiceInviteIntoRoomArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceInviteIntoRoomArgs) GetRoomId() string {
	return p.RoomId
}

func (p *TalkServiceInviteIntoRoomArgs) GetContactIds() []string {
	return p.ContactIds
}
func (p *TalkServiceInviteIntoRoomArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceInviteIntoRoomArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceInviteIntoRoomArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RoomId = v
	}
	return nil
}

func (p *TalkServiceInviteIntoRoomArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ContactIds = tSlice
	for i := 0; i < size; i++ {
		var _elem376 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem376 = v
		}
		p.ContactIds = append(p.ContactIds, _elem376)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceInviteIntoRoomArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("inviteIntoRoom_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceInviteIntoRoomArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceInviteIntoRoomArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roomId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roomId: ", p), err)
	}
	if err := oprot.WriteString(string(p.RoomId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roomId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roomId: ", p), err)
	}
	return err
}

func (p *TalkServiceInviteIntoRoomArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contactIds", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contactIds: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ContactIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ContactIds {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contactIds: ", p), err)
	}
	return err
}

func (p *TalkServiceInviteIntoRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceInviteIntoRoomArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceInviteIntoRoomResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceInviteIntoRoomResult() *TalkServiceInviteIntoRoomResult {
	return &TalkServiceInviteIntoRoomResult{}
}

var TalkServiceInviteIntoRoomResult_E_DEFAULT *TalkException

func (p *TalkServiceInviteIntoRoomResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceInviteIntoRoomResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceInviteIntoRoomResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceInviteIntoRoomResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceInviteIntoRoomResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceInviteIntoRoomResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("inviteIntoRoom_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceInviteIntoRoomResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceInviteIntoRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceInviteIntoRoomResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceRejectChatInvitationArgs struct {
	Request *RejectChatInvitationRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceRejectChatInvitationArgs() *TalkServiceRejectChatInvitationArgs {
	return &TalkServiceRejectChatInvitationArgs{}
}

var TalkServiceRejectChatInvitationArgs_Request_DEFAULT *RejectChatInvitationRequest

func (p *TalkServiceRejectChatInvitationArgs) GetRequest() *RejectChatInvitationRequest {
	if !p.IsSetRequest() {
		return TalkServiceRejectChatInvitationArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *TalkServiceRejectChatInvitationArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceRejectChatInvitationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRejectChatInvitationArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &RejectChatInvitationRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceRejectChatInvitationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rejectChatInvitation_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRejectChatInvitationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *TalkServiceRejectChatInvitationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRejectChatInvitationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceRejectChatInvitationResult struct {
	Success *RejectChatInvitationResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException                `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRejectChatInvitationResult() *TalkServiceRejectChatInvitationResult {
	return &TalkServiceRejectChatInvitationResult{}
}

var TalkServiceRejectChatInvitationResult_Success_DEFAULT *RejectChatInvitationResponse

func (p *TalkServiceRejectChatInvitationResult) GetSuccess() *RejectChatInvitationResponse {
	if !p.IsSetSuccess() {
		return TalkServiceRejectChatInvitationResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceRejectChatInvitationResult_E_DEFAULT *TalkException

func (p *TalkServiceRejectChatInvitationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceRejectChatInvitationResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceRejectChatInvitationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceRejectChatInvitationResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceRejectChatInvitationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRejectChatInvitationResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &RejectChatInvitationResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceRejectChatInvitationResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceRejectChatInvitationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rejectChatInvitation_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRejectChatInvitationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceRejectChatInvitationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceRejectChatInvitationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRejectChatInvitationResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetBlockedRecommendationIdsArgs struct {
	SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetBlockedRecommendationIdsArgs() *TalkServiceGetBlockedRecommendationIdsArgs {
	return &TalkServiceGetBlockedRecommendationIdsArgs{}
}

func (p *TalkServiceGetBlockedRecommendationIdsArgs) GetSyncReason() SyncReason {
	return p.SyncReason
}
func (p *TalkServiceGetBlockedRecommendationIdsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := SyncReason(v)
		p.SyncReason = temp
	}
	return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBlockedRecommendationIds_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("syncReason", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SyncReason)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err)
	}
	return err
}

func (p *TalkServiceGetBlockedRecommendationIdsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetBlockedRecommendationIdsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetBlockedRecommendationIdsResult struct {
	Success []string       `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetBlockedRecommendationIdsResult() *TalkServiceGetBlockedRecommendationIdsResult {
	return &TalkServiceGetBlockedRecommendationIdsResult{}
}

var TalkServiceGetBlockedRecommendationIdsResult_Success_DEFAULT []string

func (p *TalkServiceGetBlockedRecommendationIdsResult) GetSuccess() []string {
	return p.Success
}

var TalkServiceGetBlockedRecommendationIdsResult_E_DEFAULT *TalkException

func (p *TalkServiceGetBlockedRecommendationIdsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetBlockedRecommendationIdsResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetBlockedRecommendationIdsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem377 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem377 = v
		}
		p.Success = append(p.Success, _elem377)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBlockedRecommendationIds_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetBlockedRecommendationIdsResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatRoomMid
//  - ChatRoomBGMInfo
type TalkServiceUpdateChatRoomBGMArgs struct {
	ReqSeq          int32  `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	ChatRoomMid     string `thrift:"chatRoomMid,2" db:"chatRoomMid" json:"chatRoomMid"`
	ChatRoomBGMInfo string `thrift:"chatRoomBGMInfo,3" db:"chatRoomBGMInfo" json:"chatRoomBGMInfo"`
}

func NewTalkServiceUpdateChatRoomBGMArgs() *TalkServiceUpdateChatRoomBGMArgs {
	return &TalkServiceUpdateChatRoomBGMArgs{}
}

func (p *TalkServiceUpdateChatRoomBGMArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceUpdateChatRoomBGMArgs) GetChatRoomMid() string {
	return p.ChatRoomMid
}

func (p *TalkServiceUpdateChatRoomBGMArgs) GetChatRoomBGMInfo() string {
	return p.ChatRoomBGMInfo
}
func (p *TalkServiceUpdateChatRoomBGMArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateChatRoomBGMArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceUpdateChatRoomBGMArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChatRoomMid = v
	}
	return nil
}

func (p *TalkServiceUpdateChatRoomBGMArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ChatRoomBGMInfo = v
	}
	return nil
}

func (p *TalkServiceUpdateChatRoomBGMArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateChatRoomBGM_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateChatRoomBGMArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateChatRoomBGMArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatRoomMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatRoomMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChatRoomMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatRoomMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatRoomMid: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateChatRoomBGMArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatRoomBGMInfo", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:chatRoomBGMInfo: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChatRoomBGMInfo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatRoomBGMInfo (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:chatRoomBGMInfo: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateChatRoomBGMArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateChatRoomBGMArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceUpdateChatRoomBGMResult struct {
	Success *ChatRoomBGM   `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateChatRoomBGMResult() *TalkServiceUpdateChatRoomBGMResult {
	return &TalkServiceUpdateChatRoomBGMResult{}
}

var TalkServiceUpdateChatRoomBGMResult_Success_DEFAULT *ChatRoomBGM

func (p *TalkServiceUpdateChatRoomBGMResult) GetSuccess() *ChatRoomBGM {
	if !p.IsSetSuccess() {
		return TalkServiceUpdateChatRoomBGMResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceUpdateChatRoomBGMResult_E_DEFAULT *TalkException

func (p *TalkServiceUpdateChatRoomBGMResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceUpdateChatRoomBGMResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceUpdateChatRoomBGMResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceUpdateChatRoomBGMResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceUpdateChatRoomBGMResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateChatRoomBGMResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ChatRoomBGM{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceUpdateChatRoomBGMResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceUpdateChatRoomBGMResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateChatRoomBGM_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateChatRoomBGMResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUpdateChatRoomBGMResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUpdateChatRoomBGMResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateChatRoomBGMResult(%+v)", *p)
}

// Attributes:
//  - TicketId
type TalkServiceFindGroupByTicketArgs struct {
	TicketId string `thrift:"ticketId,1" db:"ticketId" json:"ticketId"`
}

func NewTalkServiceFindGroupByTicketArgs() *TalkServiceFindGroupByTicketArgs {
	return &TalkServiceFindGroupByTicketArgs{}
}

func (p *TalkServiceFindGroupByTicketArgs) GetTicketId() string {
	return p.TicketId
}
func (p *TalkServiceFindGroupByTicketArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindGroupByTicketArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TicketId = v
	}
	return nil
}

func (p *TalkServiceFindGroupByTicketArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findGroupByTicket_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindGroupByTicketArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ticketId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ticketId: ", p), err)
	}
	if err := oprot.WriteString(string(p.TicketId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ticketId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ticketId: ", p), err)
	}
	return err
}

func (p *TalkServiceFindGroupByTicketArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindGroupByTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindGroupByTicketResult struct {
	Success *Group         `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindGroupByTicketResult() *TalkServiceFindGroupByTicketResult {
	return &TalkServiceFindGroupByTicketResult{}
}

var TalkServiceFindGroupByTicketResult_Success_DEFAULT *Group

func (p *TalkServiceFindGroupByTicketResult) GetSuccess() *Group {
	if !p.IsSetSuccess() {
		return TalkServiceFindGroupByTicketResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceFindGroupByTicketResult_E_DEFAULT *TalkException

func (p *TalkServiceFindGroupByTicketResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceFindGroupByTicketResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceFindGroupByTicketResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceFindGroupByTicketResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceFindGroupByTicketResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindGroupByTicketResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Group{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceFindGroupByTicketResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceFindGroupByTicketResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findGroupByTicket_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindGroupByTicketResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindGroupByTicketResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindGroupByTicketResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindGroupByTicketResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetRecentFriendRequestsArgs struct {
	SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetRecentFriendRequestsArgs() *TalkServiceGetRecentFriendRequestsArgs {
	return &TalkServiceGetRecentFriendRequestsArgs{}
}

func (p *TalkServiceGetRecentFriendRequestsArgs) GetSyncReason() SyncReason {
	return p.SyncReason
}
func (p *TalkServiceGetRecentFriendRequestsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetRecentFriendRequestsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := SyncReason(v)
		p.SyncReason = temp
	}
	return nil
}

func (p *TalkServiceGetRecentFriendRequestsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRecentFriendRequests_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetRecentFriendRequestsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("syncReason", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SyncReason)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err)
	}
	return err
}

func (p *TalkServiceGetRecentFriendRequestsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetRecentFriendRequestsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetRecentFriendRequestsResult struct {
	Success *FriendRequestsInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException      `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetRecentFriendRequestsResult() *TalkServiceGetRecentFriendRequestsResult {
	return &TalkServiceGetRecentFriendRequestsResult{}
}

var TalkServiceGetRecentFriendRequestsResult_Success_DEFAULT *FriendRequestsInfo

func (p *TalkServiceGetRecentFriendRequestsResult) GetSuccess() *FriendRequestsInfo {
	if !p.IsSetSuccess() {
		return TalkServiceGetRecentFriendRequestsResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetRecentFriendRequestsResult_E_DEFAULT *TalkException

func (p *TalkServiceGetRecentFriendRequestsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetRecentFriendRequestsResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetRecentFriendRequestsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetRecentFriendRequestsResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetRecentFriendRequestsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetRecentFriendRequestsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &FriendRequestsInfo{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetRecentFriendRequestsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetRecentFriendRequestsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRecentFriendRequests_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetRecentFriendRequestsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetRecentFriendRequestsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetRecentFriendRequestsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetRecentFriendRequestsResult(%+v)", *p)
}

// Attributes:
//  - AttrBitset
type TalkServiceGetSettingsAttributesArgs struct {
	// unused field # 1
	AttrBitset int32 `thrift:"attrBitset,2" db:"attrBitset" json:"attrBitset"`
}

func NewTalkServiceGetSettingsAttributesArgs() *TalkServiceGetSettingsAttributesArgs {
	return &TalkServiceGetSettingsAttributesArgs{}
}

func (p *TalkServiceGetSettingsAttributesArgs) GetAttrBitset() int32 {
	return p.AttrBitset
}
func (p *TalkServiceGetSettingsAttributesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AttrBitset = v
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSettingsAttributes_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attrBitset", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:attrBitset: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.AttrBitset)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.attrBitset (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:attrBitset: ", p), err)
	}
	return err
}

func (p *TalkServiceGetSettingsAttributesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetSettingsAttributesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetSettingsAttributesResult struct {
	Success *Settings      `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetSettingsAttributesResult() *TalkServiceGetSettingsAttributesResult {
	return &TalkServiceGetSettingsAttributesResult{}
}

var TalkServiceGetSettingsAttributesResult_Success_DEFAULT *Settings

func (p *TalkServiceGetSettingsAttributesResult) GetSuccess() *Settings {
	if !p.IsSetSuccess() {
		return TalkServiceGetSettingsAttributesResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetSettingsAttributesResult_E_DEFAULT *TalkException

func (p *TalkServiceGetSettingsAttributesResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetSettingsAttributesResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetSettingsAttributesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetSettingsAttributesResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetSettingsAttributesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Settings{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributesResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSettingsAttributes_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetSettingsAttributesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetSettingsAttributesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetSettingsAttributesResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupId
type TalkServiceRejectGroupInvitationArgs struct {
	ReqSeq  int32  `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	GroupId string `thrift:"groupId,2" db:"groupId" json:"groupId"`
}

func NewTalkServiceRejectGroupInvitationArgs() *TalkServiceRejectGroupInvitationArgs {
	return &TalkServiceRejectGroupInvitationArgs{}
}

func (p *TalkServiceRejectGroupInvitationArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceRejectGroupInvitationArgs) GetGroupId() string {
	return p.GroupId
}
func (p *TalkServiceRejectGroupInvitationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRejectGroupInvitationArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceRejectGroupInvitationArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *TalkServiceRejectGroupInvitationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rejectGroupInvitation_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRejectGroupInvitationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceRejectGroupInvitationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err)
	}
	return err
}

func (p *TalkServiceRejectGroupInvitationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRejectGroupInvitationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRejectGroupInvitationResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRejectGroupInvitationResult() *TalkServiceRejectGroupInvitationResult {
	return &TalkServiceRejectGroupInvitationResult{}
}

var TalkServiceRejectGroupInvitationResult_E_DEFAULT *TalkException

func (p *TalkServiceRejectGroupInvitationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceRejectGroupInvitationResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceRejectGroupInvitationResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceRejectGroupInvitationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRejectGroupInvitationResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceRejectGroupInvitationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rejectGroupInvitation_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRejectGroupInvitationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceRejectGroupInvitationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRejectGroupInvitationResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceUpdateChatArgs struct {
	Request *UpdateChatRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceUpdateChatArgs() *TalkServiceUpdateChatArgs {
	return &TalkServiceUpdateChatArgs{}
}

var TalkServiceUpdateChatArgs_Request_DEFAULT *UpdateChatRequest

func (p *TalkServiceUpdateChatArgs) GetRequest() *UpdateChatRequest {
	if !p.IsSetRequest() {
		return TalkServiceUpdateChatArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *TalkServiceUpdateChatArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceUpdateChatArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateChatArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &UpdateChatRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceUpdateChatArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateChat_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateChatArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateChatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateChatArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceUpdateChatResult struct {
	Success *UpdateChatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException      `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateChatResult() *TalkServiceUpdateChatResult {
	return &TalkServiceUpdateChatResult{}
}

var TalkServiceUpdateChatResult_Success_DEFAULT *UpdateChatResponse

func (p *TalkServiceUpdateChatResult) GetSuccess() *UpdateChatResponse {
	if !p.IsSetSuccess() {
		return TalkServiceUpdateChatResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceUpdateChatResult_E_DEFAULT *TalkException

func (p *TalkServiceUpdateChatResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceUpdateChatResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceUpdateChatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceUpdateChatResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceUpdateChatResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateChatResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &UpdateChatResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceUpdateChatResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceUpdateChatResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateChat_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateChatResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUpdateChatResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUpdateChatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateChatResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - AttributesToUpdate
//  - Settings
type TalkServiceUpdateSettingsAttributes2Args struct {
	ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	// unused field # 2
	Settings           *Settings            `thrift:"settings,3" db:"settings" json:"settings"`
	AttributesToUpdate []SettingsAttributes `thrift:"attributesToUpdate,4" db:"attributesToUpdate" json:"attributesToUpdate"`
}

func NewTalkServiceUpdateSettingsAttributes2Args() *TalkServiceUpdateSettingsAttributes2Args {
	return &TalkServiceUpdateSettingsAttributes2Args{}
}

func (p *TalkServiceUpdateSettingsAttributes2Args) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceUpdateSettingsAttributes2Args) GetAttributesToUpdate() []SettingsAttributes {
	return p.AttributesToUpdate
}

var TalkServiceUpdateSettingsAttributes2Args_Settings_DEFAULT *Settings

func (p *TalkServiceUpdateSettingsAttributes2Args) GetSettings() *Settings {
	if !p.IsSetSettings() {
		return TalkServiceUpdateSettingsAttributes2Args_Settings_DEFAULT
	}
	return p.Settings
}
func (p *TalkServiceUpdateSettingsAttributes2Args) IsSetSettings() bool {
	return p.Settings != nil
}

func (p *TalkServiceUpdateSettingsAttributes2Args) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Args) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Args) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]SettingsAttributes, 0, size)
	p.AttributesToUpdate = tSet
	for i := 0; i < size; i++ {
		var _elem378 SettingsAttributes
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := SettingsAttributes(v)
			_elem378 = temp
		}
		p.AttributesToUpdate = append(p.AttributesToUpdate, _elem378)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Args) ReadField3(iprot thrift.TProtocol) error {
	p.Settings = &Settings{}
	if err := p.Settings.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Settings), err)
	}
	return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Args) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateSettingsAttributes2_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateSettingsAttributes2Args) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("settings", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:settings: ", p), err)
	}
	if err := p.Settings.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Settings), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:settings: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateSettingsAttributes2Args) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributesToUpdate", thrift.SET, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:attributesToUpdate: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.I32, len(p.AttributesToUpdate)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for i := 0; i < len(p.AttributesToUpdate); i++ {
		for j := i + 1; j < len(p.AttributesToUpdate); j++ {
			if reflect.DeepEqual(p.AttributesToUpdate[i], p.AttributesToUpdate[j]) {
				return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.AttributesToUpdate[i]))
			}
		}
	}
	for _, v := range p.AttributesToUpdate {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:attributesToUpdate: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateSettingsAttributes2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateSettingsAttributes2Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceUpdateSettingsAttributes2Result struct {
	Success []SettingsAttributes `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException       `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateSettingsAttributes2Result() *TalkServiceUpdateSettingsAttributes2Result {
	return &TalkServiceUpdateSettingsAttributes2Result{}
}

var TalkServiceUpdateSettingsAttributes2Result_Success_DEFAULT []SettingsAttributes

func (p *TalkServiceUpdateSettingsAttributes2Result) GetSuccess() []SettingsAttributes {
	return p.Success
}

var TalkServiceUpdateSettingsAttributes2Result_E_DEFAULT *TalkException

func (p *TalkServiceUpdateSettingsAttributes2Result) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceUpdateSettingsAttributes2Result_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceUpdateSettingsAttributes2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceUpdateSettingsAttributes2Result) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceUpdateSettingsAttributes2Result) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Result) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]SettingsAttributes, 0, size)
	p.Success = tSet
	for i := 0; i < size; i++ {
		var _elem379 SettingsAttributes
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := SettingsAttributes(v)
			_elem379 = temp
		}
		p.Success = append(p.Success, _elem379)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Result) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Result) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateSettingsAttributes2_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.SET, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.I32, len(p.Success)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for i := 0; i < len(p.Success); i++ {
			for j := i + 1; j < len(p.Success); j++ {
				if reflect.DeepEqual(p.Success[i], p.Success[j]) {
					return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Success[i]))
				}
			}
		}
		for _, v := range p.Success {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUpdateSettingsAttributes2Result) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUpdateSettingsAttributes2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateSettingsAttributes2Result(%+v)", *p)
}

// Attributes:
//  - ID
//  - Type
type TalkServiceGetContactRegistrationArgs struct {
	ID   string  `thrift:"id,1" db:"id" json:"id"`
	Type MIDType `thrift:"type,2" db:"type" json:"type"`
}

func NewTalkServiceGetContactRegistrationArgs() *TalkServiceGetContactRegistrationArgs {
	return &TalkServiceGetContactRegistrationArgs{}
}

func (p *TalkServiceGetContactRegistrationArgs) GetID() string {
	return p.ID
}

func (p *TalkServiceGetContactRegistrationArgs) GetType() MIDType {
	return p.Type
}
func (p *TalkServiceGetContactRegistrationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetContactRegistrationArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *TalkServiceGetContactRegistrationArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := MIDType(v)
		p.Type = temp
	}
	return nil
}

func (p *TalkServiceGetContactRegistrationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getContactRegistration_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetContactRegistrationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *TalkServiceGetContactRegistrationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *TalkServiceGetContactRegistrationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetContactRegistrationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetContactRegistrationResult struct {
	Success *ContactRegistration `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException       `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetContactRegistrationResult() *TalkServiceGetContactRegistrationResult {
	return &TalkServiceGetContactRegistrationResult{}
}

var TalkServiceGetContactRegistrationResult_Success_DEFAULT *ContactRegistration

func (p *TalkServiceGetContactRegistrationResult) GetSuccess() *ContactRegistration {
	if !p.IsSetSuccess() {
		return TalkServiceGetContactRegistrationResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetContactRegistrationResult_E_DEFAULT *TalkException

func (p *TalkServiceGetContactRegistrationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetContactRegistrationResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetContactRegistrationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetContactRegistrationResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetContactRegistrationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetContactRegistrationResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ContactRegistration{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetContactRegistrationResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetContactRegistrationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getContactRegistration_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetContactRegistrationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetContactRegistrationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetContactRegistrationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetContactRegistrationResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetSettingsArgs struct {
	SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetSettingsArgs() *TalkServiceGetSettingsArgs {
	return &TalkServiceGetSettingsArgs{}
}

func (p *TalkServiceGetSettingsArgs) GetSyncReason() SyncReason {
	return p.SyncReason
}
func (p *TalkServiceGetSettingsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetSettingsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := SyncReason(v)
		p.SyncReason = temp
	}
	return nil
}

func (p *TalkServiceGetSettingsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSettings_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetSettingsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("syncReason", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SyncReason)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err)
	}
	return err
}

func (p *TalkServiceGetSettingsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetSettingsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetSettingsResult struct {
	Success *Settings      `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetSettingsResult() *TalkServiceGetSettingsResult {
	return &TalkServiceGetSettingsResult{}
}

var TalkServiceGetSettingsResult_Success_DEFAULT *Settings

func (p *TalkServiceGetSettingsResult) GetSuccess() *Settings {
	if !p.IsSetSuccess() {
		return TalkServiceGetSettingsResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetSettingsResult_E_DEFAULT *TalkException

func (p *TalkServiceGetSettingsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetSettingsResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetSettingsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetSettingsResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetSettingsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetSettingsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Settings{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetSettingsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetSettingsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSettings_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetSettingsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetSettingsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetSettingsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetSettingsResult(%+v)", *p)
}

type TalkServiceNoopArgs struct {
}

func NewTalkServiceNoopArgs() *TalkServiceNoopArgs {
	return &TalkServiceNoopArgs{}
}

func (p *TalkServiceNoopArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceNoopArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("noop_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceNoopArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceNoopArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceNoopResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceNoopResult() *TalkServiceNoopResult {
	return &TalkServiceNoopResult{}
}

var TalkServiceNoopResult_E_DEFAULT *TalkException

func (p *TalkServiceNoopResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceNoopResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceNoopResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceNoopResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceNoopResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceNoopResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("noop_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceNoopResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceNoopResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceNoopResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - LastMessageId
type TalkServiceRemoveAllMessagesArgs struct {
	Seq           int32  `thrift:"seq,1" db:"seq" json:"seq"`
	LastMessageId string `thrift:"lastMessageId,2" db:"lastMessageId" json:"lastMessageId"`
}

func NewTalkServiceRemoveAllMessagesArgs() *TalkServiceRemoveAllMessagesArgs {
	return &TalkServiceRemoveAllMessagesArgs{}
}

func (p *TalkServiceRemoveAllMessagesArgs) GetSeq() int32 {
	return p.Seq
}

func (p *TalkServiceRemoveAllMessagesArgs) GetLastMessageId() string {
	return p.LastMessageId
}
func (p *TalkServiceRemoveAllMessagesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRemoveAllMessagesArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *TalkServiceRemoveAllMessagesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.LastMessageId = v
	}
	return nil
}

func (p *TalkServiceRemoveAllMessagesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeAllMessages_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRemoveAllMessagesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Seq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err)
	}
	return err
}

func (p *TalkServiceRemoveAllMessagesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastMessageId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastMessageId: ", p), err)
	}
	if err := oprot.WriteString(string(p.LastMessageId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lastMessageId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastMessageId: ", p), err)
	}
	return err
}

func (p *TalkServiceRemoveAllMessagesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRemoveAllMessagesArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRemoveAllMessagesResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRemoveAllMessagesResult() *TalkServiceRemoveAllMessagesResult {
	return &TalkServiceRemoveAllMessagesResult{}
}

var TalkServiceRemoveAllMessagesResult_E_DEFAULT *TalkException

func (p *TalkServiceRemoveAllMessagesResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceRemoveAllMessagesResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceRemoveAllMessagesResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceRemoveAllMessagesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRemoveAllMessagesResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceRemoveAllMessagesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeAllMessages_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRemoveAllMessagesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceRemoveAllMessagesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRemoveAllMessagesResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Mid
//  - Flag
//  - Value
type TalkServiceUpdateContactSettingArgs struct {
	ReqSeq int32       `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	Mid    string      `thrift:"mid,2" db:"mid" json:"mid"`
	Flag   ContactFlag `thrift:"flag,3" db:"flag" json:"flag"`
	Value  string      `thrift:"value,4" db:"value" json:"value"`
}

func NewTalkServiceUpdateContactSettingArgs() *TalkServiceUpdateContactSettingArgs {
	return &TalkServiceUpdateContactSettingArgs{}
}

func (p *TalkServiceUpdateContactSettingArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceUpdateContactSettingArgs) GetMid() string {
	return p.Mid
}

func (p *TalkServiceUpdateContactSettingArgs) GetFlag() ContactFlag {
	return p.Flag
}

func (p *TalkServiceUpdateContactSettingArgs) GetValue() string {
	return p.Value
}
func (p *TalkServiceUpdateContactSettingArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateContactSettingArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceUpdateContactSettingArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *TalkServiceUpdateContactSettingArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := ContactFlag(v)
		p.Flag = temp
	}
	return nil
}

func (p *TalkServiceUpdateContactSettingArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *TalkServiceUpdateContactSettingArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateContactSetting_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateContactSettingArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateContactSettingArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mid: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateContactSettingArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("flag", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:flag: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Flag)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.flag (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:flag: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateContactSettingArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:value: ", p), err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:value: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateContactSettingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateContactSettingArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateContactSettingResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateContactSettingResult() *TalkServiceUpdateContactSettingResult {
	return &TalkServiceUpdateContactSettingResult{}
}

var TalkServiceUpdateContactSettingResult_E_DEFAULT *TalkException

func (p *TalkServiceUpdateContactSettingResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceUpdateContactSettingResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceUpdateContactSettingResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceUpdateContactSettingResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateContactSettingResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceUpdateContactSettingResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateContactSetting_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateContactSettingResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUpdateContactSettingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateContactSettingResult(%+v)", *p)
}

// Attributes:
//  - ChatMid
type TalkServiceGetGroupCallArgs struct {
	// unused field # 1
	ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
}

func NewTalkServiceGetGroupCallArgs() *TalkServiceGetGroupCallArgs {
	return &TalkServiceGetGroupCallArgs{}
}

func (p *TalkServiceGetGroupCallArgs) GetChatMid() string {
	return p.ChatMid
}
func (p *TalkServiceGetGroupCallArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetGroupCallArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChatMid = v
	}
	return nil
}

func (p *TalkServiceGetGroupCallArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroupCall_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupCallArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChatMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err)
	}
	return err
}

func (p *TalkServiceGetGroupCallArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetGroupCallArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetGroupCallResult struct {
	Success *GroupCall     `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetGroupCallResult() *TalkServiceGetGroupCallResult {
	return &TalkServiceGetGroupCallResult{}
}

var TalkServiceGetGroupCallResult_Success_DEFAULT *GroupCall

func (p *TalkServiceGetGroupCallResult) GetSuccess() *GroupCall {
	if !p.IsSetSuccess() {
		return TalkServiceGetGroupCallResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetGroupCallResult_E_DEFAULT *TalkException

func (p *TalkServiceGetGroupCallResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetGroupCallResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetGroupCallResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetGroupCallResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetGroupCallResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetGroupCallResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GroupCall{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetGroupCallResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetGroupCallResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroupCall_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupCallResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetGroupCallResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetGroupCallResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetGroupCallResult(%+v)", *p)
}

// Attributes:
//  - LocalRev
//  - Count
//  - GlobalRev
//  - IndividualRev
type TalkServiceFetchOpsArgs struct {
	// unused field # 1
	LocalRev      int64 `thrift:"localRev,2" db:"localRev" json:"localRev"`
	Count         int32 `thrift:"count,3" db:"count" json:"count"`
	GlobalRev     int64 `thrift:"globalRev,4" db:"globalRev" json:"globalRev"`
	IndividualRev int64 `thrift:"individualRev,5" db:"individualRev" json:"individualRev"`
}

func NewTalkServiceFetchOpsArgs() *TalkServiceFetchOpsArgs {
	return &TalkServiceFetchOpsArgs{}
}

func (p *TalkServiceFetchOpsArgs) GetLocalRev() int64 {
	return p.LocalRev
}

func (p *TalkServiceFetchOpsArgs) GetCount() int32 {
	return p.Count
}

func (p *TalkServiceFetchOpsArgs) GetGlobalRev() int64 {
	return p.GlobalRev
}

func (p *TalkServiceFetchOpsArgs) GetIndividualRev() int64 {
	return p.IndividualRev
}
func (p *TalkServiceFetchOpsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFetchOpsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.LocalRev = v
	}
	return nil
}

func (p *TalkServiceFetchOpsArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *TalkServiceFetchOpsArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.GlobalRev = v
	}
	return nil
}

func (p *TalkServiceFetchOpsArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.IndividualRev = v
	}
	return nil
}

func (p *TalkServiceFetchOpsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fetchOps_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFetchOpsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("localRev", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:localRev: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LocalRev)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.localRev (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:localRev: ", p), err)
	}
	return err
}

func (p *TalkServiceFetchOpsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err)
	}
	return err
}

func (p *TalkServiceFetchOpsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("globalRev", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:globalRev: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.GlobalRev)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.globalRev (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:globalRev: ", p), err)
	}
	return err
}

func (p *TalkServiceFetchOpsArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("individualRev", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:individualRev: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.IndividualRev)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.individualRev (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:individualRev: ", p), err)
	}
	return err
}

func (p *TalkServiceFetchOpsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFetchOpsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFetchOpsResult struct {
	Success []*Operation   `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFetchOpsResult() *TalkServiceFetchOpsResult {
	return &TalkServiceFetchOpsResult{}
}

var TalkServiceFetchOpsResult_Success_DEFAULT []*Operation

func (p *TalkServiceFetchOpsResult) GetSuccess() []*Operation {
	return p.Success
}

var TalkServiceFetchOpsResult_E_DEFAULT *TalkException

func (p *TalkServiceFetchOpsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceFetchOpsResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceFetchOpsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceFetchOpsResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceFetchOpsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFetchOpsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Operation, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem380 := &Operation{}
		if err := _elem380.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem380), err)
		}
		p.Success = append(p.Success, _elem380)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceFetchOpsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceFetchOpsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fetchOps_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFetchOpsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFetchOpsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFetchOpsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFetchOpsResult(%+v)", *p)
}

// Attributes:
//  - LocalRev
//  - Count
type TalkServiceFetchOperationsArgs struct {
	// unused field # 1
	LocalRev int64 `thrift:"localRev,2" db:"localRev" json:"localRev"`
	Count    int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTalkServiceFetchOperationsArgs() *TalkServiceFetchOperationsArgs {
	return &TalkServiceFetchOperationsArgs{}
}

func (p *TalkServiceFetchOperationsArgs) GetLocalRev() int64 {
	return p.LocalRev
}

func (p *TalkServiceFetchOperationsArgs) GetCount() int32 {
	return p.Count
}
func (p *TalkServiceFetchOperationsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFetchOperationsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.LocalRev = v
	}
	return nil
}

func (p *TalkServiceFetchOperationsArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *TalkServiceFetchOperationsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fetchOperations_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFetchOperationsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("localRev", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:localRev: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LocalRev)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.localRev (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:localRev: ", p), err)
	}
	return err
}

func (p *TalkServiceFetchOperationsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err)
	}
	return err
}

func (p *TalkServiceFetchOperationsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFetchOperationsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFetchOperationsResult struct {
	Success []*Operation   `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFetchOperationsResult() *TalkServiceFetchOperationsResult {
	return &TalkServiceFetchOperationsResult{}
}

var TalkServiceFetchOperationsResult_Success_DEFAULT []*Operation

func (p *TalkServiceFetchOperationsResult) GetSuccess() []*Operation {
	return p.Success
}

var TalkServiceFetchOperationsResult_E_DEFAULT *TalkException

func (p *TalkServiceFetchOperationsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceFetchOperationsResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceFetchOperationsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceFetchOperationsResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceFetchOperationsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFetchOperationsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Operation, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem381 := &Operation{}
		if err := _elem381.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem381), err)
		}
		p.Success = append(p.Success, _elem381)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceFetchOperationsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceFetchOperationsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fetchOperations_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFetchOperationsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFetchOperationsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFetchOperationsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFetchOperationsResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupId
//  - ContactIds
type TalkServiceKickoutFromGroupArgs struct {
	ReqSeq     int32    `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	GroupId    string   `thrift:"groupId,2" db:"groupId" json:"groupId"`
	ContactIds []string `thrift:"contactIds,3" db:"contactIds" json:"contactIds"`
}

func NewTalkServiceKickoutFromGroupArgs() *TalkServiceKickoutFromGroupArgs {
	return &TalkServiceKickoutFromGroupArgs{}
}

func (p *TalkServiceKickoutFromGroupArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceKickoutFromGroupArgs) GetGroupId() string {
	return p.GroupId
}

func (p *TalkServiceKickoutFromGroupArgs) GetContactIds() []string {
	return p.ContactIds
}
func (p *TalkServiceKickoutFromGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceKickoutFromGroupArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceKickoutFromGroupArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *TalkServiceKickoutFromGroupArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ContactIds = tSlice
	for i := 0; i < size; i++ {
		var _elem382 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem382 = v
		}
		p.ContactIds = append(p.ContactIds, _elem382)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceKickoutFromGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("kickoutFromGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceKickoutFromGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceKickoutFromGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err)
	}
	return err
}

func (p *TalkServiceKickoutFromGroupArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contactIds", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contactIds: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ContactIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ContactIds {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contactIds: ", p), err)
	}
	return err
}

func (p *TalkServiceKickoutFromGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceKickoutFromGroupArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceKickoutFromGroupResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceKickoutFromGroupResult() *TalkServiceKickoutFromGroupResult {
	return &TalkServiceKickoutFromGroupResult{}
}

var TalkServiceKickoutFromGroupResult_E_DEFAULT *TalkException

func (p *TalkServiceKickoutFromGroupResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceKickoutFromGroupResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceKickoutFromGroupResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceKickoutFromGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceKickoutFromGroupResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceKickoutFromGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("kickoutFromGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceKickoutFromGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceKickoutFromGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceKickoutFromGroupResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetExtendedProfileArgs struct {
	SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetExtendedProfileArgs() *TalkServiceGetExtendedProfileArgs {
	return &TalkServiceGetExtendedProfileArgs{}
}

func (p *TalkServiceGetExtendedProfileArgs) GetSyncReason() SyncReason {
	return p.SyncReason
}
func (p *TalkServiceGetExtendedProfileArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetExtendedProfileArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := SyncReason(v)
		p.SyncReason = temp
	}
	return nil
}

func (p *TalkServiceGetExtendedProfileArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getExtendedProfile_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetExtendedProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("syncReason", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SyncReason)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err)
	}
	return err
}

func (p *TalkServiceGetExtendedProfileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetExtendedProfileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetExtendedProfileResult struct {
	Success *ExtendedProfile `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException   `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetExtendedProfileResult() *TalkServiceGetExtendedProfileResult {
	return &TalkServiceGetExtendedProfileResult{}
}

var TalkServiceGetExtendedProfileResult_Success_DEFAULT *ExtendedProfile

func (p *TalkServiceGetExtendedProfileResult) GetSuccess() *ExtendedProfile {
	if !p.IsSetSuccess() {
		return TalkServiceGetExtendedProfileResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetExtendedProfileResult_E_DEFAULT *TalkException

func (p *TalkServiceGetExtendedProfileResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetExtendedProfileResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetExtendedProfileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetExtendedProfileResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetExtendedProfileResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetExtendedProfileResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ExtendedProfile{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetExtendedProfileResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetExtendedProfileResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getExtendedProfile_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetExtendedProfileResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetExtendedProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetExtendedProfileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetExtendedProfileResult(%+v)", *p)
}

// Attributes:
//  - FeatureType
type TalkServiceAcquireEncryptedAccessTokenArgs struct {
	// unused field # 1
	FeatureType FeatureType `thrift:"featureType,2" db:"featureType" json:"featureType"`
}

func NewTalkServiceAcquireEncryptedAccessTokenArgs() *TalkServiceAcquireEncryptedAccessTokenArgs {
	return &TalkServiceAcquireEncryptedAccessTokenArgs{}
}

func (p *TalkServiceAcquireEncryptedAccessTokenArgs) GetFeatureType() FeatureType {
	return p.FeatureType
}
func (p *TalkServiceAcquireEncryptedAccessTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := FeatureType(v)
		p.FeatureType = temp
	}
	return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acquireEncryptedAccessToken_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("featureType", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:featureType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.FeatureType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.featureType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:featureType: ", p), err)
	}
	return err
}

func (p *TalkServiceAcquireEncryptedAccessTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceAcquireEncryptedAccessTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceAcquireEncryptedAccessTokenResult struct {
	Success *string        `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceAcquireEncryptedAccessTokenResult() *TalkServiceAcquireEncryptedAccessTokenResult {
	return &TalkServiceAcquireEncryptedAccessTokenResult{}
}

var TalkServiceAcquireEncryptedAccessTokenResult_Success_DEFAULT string

func (p *TalkServiceAcquireEncryptedAccessTokenResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return TalkServiceAcquireEncryptedAccessTokenResult_Success_DEFAULT
	}
	return *p.Success
}

var TalkServiceAcquireEncryptedAccessTokenResult_E_DEFAULT *TalkException

func (p *TalkServiceAcquireEncryptedAccessTokenResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceAcquireEncryptedAccessTokenResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceAcquireEncryptedAccessTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acquireEncryptedAccessToken_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceAcquireEncryptedAccessTokenResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatRoomMid
//  - Type
//  - Contents
type TalkServiceCreateChatRoomAnnouncementArgs struct {
	ReqSeq      int32                         `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	ChatRoomMid string                        `thrift:"chatRoomMid,2" db:"chatRoomMid" json:"chatRoomMid"`
	Type        ChatRoomAnnouncementType      `thrift:"type,3" db:"type" json:"type"`
	Contents    *ChatRoomAnnouncementContents `thrift:"contents,4" db:"contents" json:"contents"`
}

func NewTalkServiceCreateChatRoomAnnouncementArgs() *TalkServiceCreateChatRoomAnnouncementArgs {
	return &TalkServiceCreateChatRoomAnnouncementArgs{}
}

func (p *TalkServiceCreateChatRoomAnnouncementArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceCreateChatRoomAnnouncementArgs) GetChatRoomMid() string {
	return p.ChatRoomMid
}

func (p *TalkServiceCreateChatRoomAnnouncementArgs) GetType() ChatRoomAnnouncementType {
	return p.Type
}

var TalkServiceCreateChatRoomAnnouncementArgs_Contents_DEFAULT *ChatRoomAnnouncementContents

func (p *TalkServiceCreateChatRoomAnnouncementArgs) GetContents() *ChatRoomAnnouncementContents {
	if !p.IsSetContents() {
		return TalkServiceCreateChatRoomAnnouncementArgs_Contents_DEFAULT
	}
	return p.Contents
}
func (p *TalkServiceCreateChatRoomAnnouncementArgs) IsSetContents() bool {
	return p.Contents != nil
}

func (p *TalkServiceCreateChatRoomAnnouncementArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceCreateChatRoomAnnouncementArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceCreateChatRoomAnnouncementArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChatRoomMid = v
	}
	return nil
}

func (p *TalkServiceCreateChatRoomAnnouncementArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := ChatRoomAnnouncementType(v)
		p.Type = temp
	}
	return nil
}

func (p *TalkServiceCreateChatRoomAnnouncementArgs) ReadField4(iprot thrift.TProtocol) error {
	p.Contents = &ChatRoomAnnouncementContents{}
	if err := p.Contents.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Contents), err)
	}
	return nil
}

func (p *TalkServiceCreateChatRoomAnnouncementArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createChatRoomAnnouncement_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceCreateChatRoomAnnouncementArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceCreateChatRoomAnnouncementArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatRoomMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatRoomMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChatRoomMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatRoomMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatRoomMid: ", p), err)
	}
	return err
}

func (p *TalkServiceCreateChatRoomAnnouncementArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err)
	}
	return err
}

func (p *TalkServiceCreateChatRoomAnnouncementArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contents", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:contents: ", p), err)
	}
	if err := p.Contents.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Contents), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:contents: ", p), err)
	}
	return err
}

func (p *TalkServiceCreateChatRoomAnnouncementArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceCreateChatRoomAnnouncementArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceCreateChatRoomAnnouncementResult struct {
	Success *ChatRoomAnnouncement `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException        `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceCreateChatRoomAnnouncementResult() *TalkServiceCreateChatRoomAnnouncementResult {
	return &TalkServiceCreateChatRoomAnnouncementResult{}
}

var TalkServiceCreateChatRoomAnnouncementResult_Success_DEFAULT *ChatRoomAnnouncement

func (p *TalkServiceCreateChatRoomAnnouncementResult) GetSuccess() *ChatRoomAnnouncement {
	if !p.IsSetSuccess() {
		return TalkServiceCreateChatRoomAnnouncementResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceCreateChatRoomAnnouncementResult_E_DEFAULT *TalkException

func (p *TalkServiceCreateChatRoomAnnouncementResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceCreateChatRoomAnnouncementResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceCreateChatRoomAnnouncementResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceCreateChatRoomAnnouncementResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceCreateChatRoomAnnouncementResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceCreateChatRoomAnnouncementResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ChatRoomAnnouncement{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceCreateChatRoomAnnouncementResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceCreateChatRoomAnnouncementResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createChatRoomAnnouncement_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceCreateChatRoomAnnouncementResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceCreateChatRoomAnnouncementResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceCreateChatRoomAnnouncementResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceCreateChatRoomAnnouncementResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - SearchId
//  - Reference
type TalkServiceFindAndAddContactByMetaTagArgs struct {
	ReqSeq    int32  `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	SearchId  string `thrift:"searchId,2" db:"searchId" json:"searchId"`
	Reference string `thrift:"reference,3" db:"reference" json:"reference"`
}

func NewTalkServiceFindAndAddContactByMetaTagArgs() *TalkServiceFindAndAddContactByMetaTagArgs {
	return &TalkServiceFindAndAddContactByMetaTagArgs{}
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs) GetSearchId() string {
	return p.SearchId
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs) GetReference() string {
	return p.Reference
}
func (p *TalkServiceFindAndAddContactByMetaTagArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SearchId = v
	}
	return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Reference = v
	}
	return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAndAddContactByMetaTag_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("searchId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:searchId: ", p), err)
	}
	if err := oprot.WriteString(string(p.SearchId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.searchId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:searchId: ", p), err)
	}
	return err
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reference", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reference: ", p), err)
	}
	if err := oprot.WriteString(string(p.Reference)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reference (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reference: ", p), err)
	}
	return err
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindAndAddContactByMetaTagArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindAndAddContactByMetaTagResult struct {
	Success *Contact       `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindAndAddContactByMetaTagResult() *TalkServiceFindAndAddContactByMetaTagResult {
	return &TalkServiceFindAndAddContactByMetaTagResult{}
}

var TalkServiceFindAndAddContactByMetaTagResult_Success_DEFAULT *Contact

func (p *TalkServiceFindAndAddContactByMetaTagResult) GetSuccess() *Contact {
	if !p.IsSetSuccess() {
		return TalkServiceFindAndAddContactByMetaTagResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceFindAndAddContactByMetaTagResult_E_DEFAULT *TalkException

func (p *TalkServiceFindAndAddContactByMetaTagResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceFindAndAddContactByMetaTagResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceFindAndAddContactByMetaTagResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceFindAndAddContactByMetaTagResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceFindAndAddContactByMetaTagResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Contact{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAndAddContactByMetaTag_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindAndAddContactByMetaTagResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindAndAddContactByMetaTagResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindAndAddContactByMetaTagResult(%+v)", *p)
}

// Attributes:
//  - FollowRequest
type TalkServiceFollowArgs struct {
	// unused field # 1
	FollowRequest *FollowRequest `thrift:"followRequest,2" db:"followRequest" json:"followRequest"`
}

func NewTalkServiceFollowArgs() *TalkServiceFollowArgs {
	return &TalkServiceFollowArgs{}
}

var TalkServiceFollowArgs_FollowRequest_DEFAULT *FollowRequest

func (p *TalkServiceFollowArgs) GetFollowRequest() *FollowRequest {
	if !p.IsSetFollowRequest() {
		return TalkServiceFollowArgs_FollowRequest_DEFAULT
	}
	return p.FollowRequest
}
func (p *TalkServiceFollowArgs) IsSetFollowRequest() bool {
	return p.FollowRequest != nil
}

func (p *TalkServiceFollowArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFollowArgs) ReadField2(iprot thrift.TProtocol) error {
	p.FollowRequest = &FollowRequest{}
	if err := p.FollowRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FollowRequest), err)
	}
	return nil
}

func (p *TalkServiceFollowArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("follow_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFollowArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("followRequest", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:followRequest: ", p), err)
	}
	if err := p.FollowRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FollowRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:followRequest: ", p), err)
	}
	return err
}

func (p *TalkServiceFollowArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFollowArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceFollowResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFollowResult() *TalkServiceFollowResult {
	return &TalkServiceFollowResult{}
}

var TalkServiceFollowResult_E_DEFAULT *TalkException

func (p *TalkServiceFollowResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceFollowResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceFollowResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceFollowResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFollowResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceFollowResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("follow_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFollowResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFollowResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFollowResult(%+v)", *p)
}

// Attributes:
//  - ID
type TalkServiceGetContactArgs struct {
	// unused field # 1
	ID string `thrift:"id,2" db:"id" json:"id"`
}

func NewTalkServiceGetContactArgs() *TalkServiceGetContactArgs {
	return &TalkServiceGetContactArgs{}
}

func (p *TalkServiceGetContactArgs) GetID() string {
	return p.ID
}
func (p *TalkServiceGetContactArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetContactArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *TalkServiceGetContactArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getContact_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetContactArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err)
	}
	return err
}

func (p *TalkServiceGetContactArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetContactArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetContactResult struct {
	Success *Contact       `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetContactResult() *TalkServiceGetContactResult {
	return &TalkServiceGetContactResult{}
}

var TalkServiceGetContactResult_Success_DEFAULT *Contact

func (p *TalkServiceGetContactResult) GetSuccess() *Contact {
	if !p.IsSetSuccess() {
		return TalkServiceGetContactResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetContactResult_E_DEFAULT *TalkException

func (p *TalkServiceGetContactResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetContactResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetContactResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetContactResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetContactResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetContactResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Contact{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetContactResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetContactResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getContact_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetContactResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetContactResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetContactResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetContactResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupId
type TalkServiceLeaveGroupArgs struct {
	ReqSeq  int32  `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	GroupId string `thrift:"groupId,2" db:"groupId" json:"groupId"`
}

func NewTalkServiceLeaveGroupArgs() *TalkServiceLeaveGroupArgs {
	return &TalkServiceLeaveGroupArgs{}
}

func (p *TalkServiceLeaveGroupArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceLeaveGroupArgs) GetGroupId() string {
	return p.GroupId
}
func (p *TalkServiceLeaveGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceLeaveGroupArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceLeaveGroupArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *TalkServiceLeaveGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("leaveGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceLeaveGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceLeaveGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err)
	}
	return err
}

func (p *TalkServiceLeaveGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceLeaveGroupArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceLeaveGroupResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceLeaveGroupResult() *TalkServiceLeaveGroupResult {
	return &TalkServiceLeaveGroupResult{}
}

var TalkServiceLeaveGroupResult_E_DEFAULT *TalkException

func (p *TalkServiceLeaveGroupResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceLeaveGroupResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceLeaveGroupResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceLeaveGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceLeaveGroupResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceLeaveGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("leaveGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceLeaveGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceLeaveGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceLeaveGroupResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - ChatMid
//  - LastMessageId
//  - SessionId
type TalkServiceSendChatCheckedArgs struct {
	Seq           int32  `thrift:"seq,1" db:"seq" json:"seq"`
	ChatMid       string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
	LastMessageId string `thrift:"lastMessageId,3" db:"lastMessageId" json:"lastMessageId"`
	SessionId     int8   `thrift:"sessionId,4" db:"sessionId" json:"sessionId"`
}

func NewTalkServiceSendChatCheckedArgs() *TalkServiceSendChatCheckedArgs {
	return &TalkServiceSendChatCheckedArgs{}
}

func (p *TalkServiceSendChatCheckedArgs) GetSeq() int32 {
	return p.Seq
}

func (p *TalkServiceSendChatCheckedArgs) GetChatMid() string {
	return p.ChatMid
}

func (p *TalkServiceSendChatCheckedArgs) GetLastMessageId() string {
	return p.LastMessageId
}

func (p *TalkServiceSendChatCheckedArgs) GetSessionId() int8 {
	return p.SessionId
}
func (p *TalkServiceSendChatCheckedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceSendChatCheckedArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *TalkServiceSendChatCheckedArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChatMid = v
	}
	return nil
}

func (p *TalkServiceSendChatCheckedArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.LastMessageId = v
	}
	return nil
}

func (p *TalkServiceSendChatCheckedArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := int8(v)
		p.SessionId = temp
	}
	return nil
}

func (p *TalkServiceSendChatCheckedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendChatChecked_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceSendChatCheckedArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Seq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err)
	}
	return err
}

func (p *TalkServiceSendChatCheckedArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChatMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err)
	}
	return err
}

func (p *TalkServiceSendChatCheckedArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastMessageId", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastMessageId: ", p), err)
	}
	if err := oprot.WriteString(string(p.LastMessageId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lastMessageId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastMessageId: ", p), err)
	}
	return err
}

func (p *TalkServiceSendChatCheckedArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.BYTE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sessionId: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sessionId: ", p), err)
	}
	return err
}

func (p *TalkServiceSendChatCheckedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceSendChatCheckedArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceSendChatCheckedResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceSendChatCheckedResult() *TalkServiceSendChatCheckedResult {
	return &TalkServiceSendChatCheckedResult{}
}

var TalkServiceSendChatCheckedResult_E_DEFAULT *TalkException

func (p *TalkServiceSendChatCheckedResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceSendChatCheckedResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceSendChatCheckedResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceSendChatCheckedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceSendChatCheckedResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceSendChatCheckedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendChatChecked_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceSendChatCheckedResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceSendChatCheckedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceSendChatCheckedResult(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
//  - Request
type TalkServiceUpdateIdentifierArgs struct {
	// unused field # 1
	AuthSessionId string                     `thrift:"authSessionId,2" db:"authSessionId" json:"authSessionId"`
	Request       *IdentityCredentialRequest `thrift:"request,3" db:"request" json:"request"`
}

func NewTalkServiceUpdateIdentifierArgs() *TalkServiceUpdateIdentifierArgs {
	return &TalkServiceUpdateIdentifierArgs{}
}

func (p *TalkServiceUpdateIdentifierArgs) GetAuthSessionId() string {
	return p.AuthSessionId
}

var TalkServiceUpdateIdentifierArgs_Request_DEFAULT *IdentityCredentialRequest

func (p *TalkServiceUpdateIdentifierArgs) GetRequest() *IdentityCredentialRequest {
	if !p.IsSetRequest() {
		return TalkServiceUpdateIdentifierArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *TalkServiceUpdateIdentifierArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceUpdateIdentifierArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateIdentifierArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AuthSessionId = v
	}
	return nil
}

func (p *TalkServiceUpdateIdentifierArgs) ReadField3(iprot thrift.TProtocol) error {
	p.Request = &IdentityCredentialRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceUpdateIdentifierArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateIdentifier_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateIdentifierArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authSessionId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:authSessionId: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthSessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authSessionId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:authSessionId: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateIdentifierArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:request: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateIdentifierArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateIdentifierArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceUpdateIdentifierResult struct {
	Success *IdentityCredentialResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException              `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateIdentifierResult() *TalkServiceUpdateIdentifierResult {
	return &TalkServiceUpdateIdentifierResult{}
}

var TalkServiceUpdateIdentifierResult_Success_DEFAULT *IdentityCredentialResponse

func (p *TalkServiceUpdateIdentifierResult) GetSuccess() *IdentityCredentialResponse {
	if !p.IsSetSuccess() {
		return TalkServiceUpdateIdentifierResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceUpdateIdentifierResult_E_DEFAULT *TalkException

func (p *TalkServiceUpdateIdentifierResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceUpdateIdentifierResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceUpdateIdentifierResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceUpdateIdentifierResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceUpdateIdentifierResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateIdentifierResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &IdentityCredentialResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceUpdateIdentifierResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceUpdateIdentifierResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateIdentifier_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateIdentifierResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUpdateIdentifierResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUpdateIdentifierResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateIdentifierResult(%+v)", *p)
}
